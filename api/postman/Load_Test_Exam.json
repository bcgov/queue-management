{
	"info": {
		"_postman_id": "b8ea4228-164b-4447-a63e-d2c384530553",
		"name": "Load_Test_Exam",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Setup",
			"item": [
				{
					"name": "Setup-Variables",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5409b66d-67a4-449b-8633-9aeca632b388",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e9eed831-7955-4218-a400-ae6e1e7e2e10",
								"exec": [
									"//  See if the use-prefix global has been set.  Use default if not.",
									"let usePrefix = '';",
									"if (pm.globals.get('use-prefix')) {",
									"    console.log(\"==> use-prefix exists\");",
									"    usePrefix = pm.globals.get('use-prefix');",
									"    console.log(\"    --> Prefix is: \" + usePrefix);",
									"    ",
									"    //  Set up all globals, using the correct prefix.",
									"    pm.globals.set('auth_url', pm.globals.get(usePrefix + 'auth_url'));",
									"    pm.globals.set('realm', pm.globals.get(usePrefix + 'realm'));",
									"    pm.globals.set('clientid', pm.globals.get(usePrefix + 'clientid'));",
									"    pm.globals.set('client_secret', pm.globals.get(usePrefix + 'client_secret'));",
									"    pm.globals.set('url', pm.globals.get(usePrefix + 'url'));",
									"}",
									"else {",
									"    console.log(\"==> use-prefix does not exist\");",
									"    console.log(\"    --> No default globals set.\");",
									"}",
									"",
									"//  If no maximum load time defined, set a default.",
									"if (!pm.globals.get('max_load_time')) {",
									"    console.log(\"==> max_load_time not present, default set.\");",
									"    pm.globals.set(\"max_load_time\", JSON.stringify(1503));",
									"}",
									"",
									"//  If no maximum response defined, set a default.",
									"if (!pm.globals.get('max_response_time')) {",
									"    console.log(\"==> max_response_time not present, default set.\");",
									"    pm.globals.set(\"max_response_time\", JSON.stringify(15005));",
									"}",
									"",
									"//  Display the values of all globals.",
									"console.log(\"\");",
									"console.log(\"==> Globals are:\");",
									"console.log(\"    --> auth_url:          \" + pm.globals.get(\"auth_url\"));",
									"console.log(\"    --> realm:             \" + pm.globals.get(\"realm\"));",
									"console.log(\"    --> clientid:          \" + pm.globals.get(\"clientid\"));",
									"console.log(\"    --> client_secret:     \" + pm.globals.get(\"client_secret\"));",
									"console.log(\"    --> url:               \" + pm.globals.get(\"url\"));",
									"console.log(\"    --> max_load_time:     \" + pm.globals.get(\"max_load_time\"));",
									"console.log(\"    --> max_response_time: \" + pm.globals.get(\"max_response_time\"));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "// Dummy data."
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-Auth-First",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5409b66d-67a4-449b-8633-9aeca632b388",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"auth_first\", jsonData.data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "auth_url = globals.auth_url;\nrealm = globals.realm;\nclientid = globals.clientid;\nuserid = globals.userid;\npassword = globals.password;\nclient_secret = globals.client_secret;\n\nconst echoPostRequest = {\n  url: auth_url + '/auth/realms/' + realm + '/protocol/openid-connect/token',\n  method: 'POST',\n  header: 'Content-Type:application/x-www-form-urlencoded',\n  body: {\n    mode: 'raw',\n    raw: 'grant_type=password&client_id=' + clientid \n          + '&username=' + userid \n          + '&password=' + password\n          + '&client_secret=' + client_secret\n  }\n};\npm.sendRequest(echoPostRequest, function (err, res) {\n    var jsonData = res.json();\n    if (jsonData.hasOwnProperty('access_token')) {\n    \tpm.environment.set(\"token\", jsonData.access_token);\n\t    pm.environment.set(\"refresh_token\", jsonData.refresh_token);\n\t    console.log(err ? err : res.json());\n\t} else {\n\t    pm.environment.set(\"token\", 0);\n\t    pm.environment.set(\"refresh_token\", 0);\n\t    pm.environment.set(\"token_expires\", 0);\n\t    pm.environment.set(\"refresh_token_expires\", 0);\n\t}\n});"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-Auth-Script",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f386cf22-bb0f-47d9-9c22-cda162ed4375",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"auth_script\", jsonData.data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "auth_url = globals.auth_url;\nrealm = globals.realm;\nclientid = globals.clientid;\nuserid = environment.userid;\npassword = globals.password;\nclient_secret = globals.client_secret;\n"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-Basic-Response-Tests",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a0d8e240-3b40-4654-a32b-bf2e676fdeb9",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"basic_response_test\", jsonData.data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//  Test the authenticate response.\npm.test(\"Response time should be below 1500ms\", function() {\n    pm.expect(pm.response.responseTime).to.be.below(1500);\n});\npm.test('Response statusCode should be 200 OK', function() {\n    pm.response.to.have.status(200);\n});\npm.test('Response header should have Content-Type of application/json', function() {\n    pm.response.to.have.header('content-type', 'application/json');\n});\npm.test('Response body be in JSON format', function() {\n    pm.response.to.be.json; \n});\n"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-Complex-Response-Tests",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f006b951-3205-4f21-a315-369f85591929",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"complex_response_test\", jsonData.data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//  Test the authenticate response.\npm.test('Response time should be below 25000ms', function() {\n    pm.response.responseTime.to.be.below(25000);\n});\npm.test('Response statusCode should be 200 OK', function() {\n    response.to.have.status(200);\n});\npm.test('Response header should have Content-Type of application/json', function() {\n    response.to.have.header('content-type', 'application/json');\n});\npm.test('Response body be in JSON format', function() {\n    response.to.be.json; \n});\n"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-Create-Response-Tests",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "382b7b65-d736-4a03-a44a-3891f33b617d",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"create_response_test\", jsonData.data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//  Test the authenticate response.\npm.test('Response time should be below 20000ms', function() {\n    pm.expect(pm.response.responseTime).to.be.below(20000);\n});\npm.test('Response statusCode should be 201 CREATED', function() {\n    pm.response.to.have.status(201);\n});\npm.test('Response header should have Content-Type of application/json', function() {\n    pm.response.to.have.header('content-type', 'application/json');\n});\npm.test('Response body be in JSON format', function() {\n    pm.response.to.be.json; \n});\n"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-Exam-Type-Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "382b7b65-d736-4a03-a44a-3891f33b617d",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"init_exam_type_data\", jsonData.data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//  Finds an exam name in the JSON list allTypes of exam types.\nfunction find_exam(input_exam_name, allTypes) {\n\texam_id_value = -1;\n\n    //  Loop to look for the input exam name.\n    if (allTypes) {\n        allTypes.forEach(function(type) {\n            if ((type.exam_type_name) == input_exam_name) {\n            exam_id_value = type.exam_type_id;\n            }\n        });\n    }\n    \n    //  If the exam wasn't found, set it to be the first exam.\n    if (exam_id_value == -1) {\n        exam_id_value = allTypes[0].exam_type_id;\n    }\n\n    //  Return the exam_id_type of the input exam name.\n    return exam_id_value;\n}\n\n//  Get the list of all possible exam types.\nallTypes = null;\nvar jsonData = JSON.parse(responseBody);\nif (jsonData.hasOwnProperty(\"exam_types\")) {\n\tallTypes = jsonData.exam_types;\n}\n\nexam_array = [];\nexam_array.push({name: \"Pesticide\", weight: 40.2, id: find_exam(\"Pesticide\", allTypes)});\nname = \"IPSE - 4HR Single Exam\";\nexam_array.push({name: name, weight: exam_array[0].weight + 14.5, id: find_exam(name, allTypes)});\nname = \"SLE - 3HR Group Exam\";\nexam_array.push({name: name, weight: exam_array[1].weight + 7.4, id: find_exam(name, allTypes)});\nname = \"COFQ - 3HR Group Exam\";\nexam_array.push({name: name, weight: exam_array[2].weight + 5.8, id: find_exam(name, allTypes)});\nname = \"IPSE - 4HR Group Exam\";\nexam_array.push({name: name, weight: exam_array[3].weight + 5.7, id: find_exam(name, allTypes)});\nname = \"COFQ - 3HR Single Exam\";\nexam_array.push({name: name, weight: exam_array[4].weight + 5.5, id: find_exam(name, allTypes)});\nname = \"Monthly Session Exam\";\nexam_array.push({name: name, weight: exam_array[5].weight + 3.8, id: find_exam(name, allTypes)});\nname = \"SLE - 3HR Single Exam\";\nexam_array.push({name: name, weight: exam_array[6].weight + 3.5, id: find_exam(name, allTypes)});\nname = \"Angling Guide Outfitter\";\nexam_array.push({name: name, weight: exam_array[7].weight + 2.4, id: find_exam(name, allTypes)});\nname = \"IPSE - 5HR Single Exam - Time Extension\";\nexam_array.push({name: name, weight: exam_array[8].weight + 2.3, id: find_exam(name, allTypes)});\nname = \"Exam Booking - 3 Hour Miscellaneous\";\nexam_array.push({name: name, weight: exam_array[9].weight + 1.7, id: find_exam(name, allTypes)});\n\n//  Store the initialized exam data for later use.\npostman.setEnvironmentVariable(\"exam_array_data\", JSON.stringify(exam_array));"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-Exam-Get-Random",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "382b7b65-d736-4a03-a44a-3891f33b617d",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"create_random_functions\", jsonData.data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//  Function returns a weighted randomized exam type index.\nfunction get_random_index(exam_array) {\n\n    //  Generate a random number up to the maximum weight allowed.\n    random_number = Math.floor(Math.random() * exam_array[exam_array.length - 1].weight);\n    \n    //  Get the index of the exam type corresponding to that weight.\n    index = get_index(random_number, exam_array);\n\n    //  Return the index.\n    return index;\n}\n\n//  Based on a random number, turns it into a weighted randomized exam type index.\nfunction get_index(random_value, exam_array) {\n    index = 0;\n    var i;\n    for (i = 0; i < exam_array.length; i++) {\n        if (random_value <= exam_array[i].weight) {\n            index = i;\n            break;\n        }\n    }\n    \n    return index;\n}\n"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-Exam-Schema-Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8cebcf78-f5a2-4694-b108-60e146791a78",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"exam_schema_check\", jsonData.data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "// Define the JSON Schema expected in response\nvar examSchema = {\n    \"type\": \"object\",\n    \"properties\": {\n        \"exam\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"booking_id\": {},\n                \"deleted_date\": {},\n                \"event_id\": {\"type\": \"string\"},\n                \"exam_id\": {\"type\": \"number\"},\n                \"exam_method\": {\"type\": \"string\"},\n                \"exam_name\": {\"type\": \"string\"},\n                \"exam_received_date\": {},\n                \"exam_returned_tracking_number\": {},\n                \"exam_type\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"exam_color\": {\"type\": \"string\"},\n                        \"exam_type_id\": {\"type\": \"number\"},\n                        \"exam_type_name\": {\"type\": \"string\"},\n                        \"group_exam_ind\": {\"type\": \"number\"},\n                        \"ita_ind\": {\"type\": \"number\"},\n                        \"method_type\": {\"type\": \"string\"},\n                        \"number_of_hours\": {\"type\": \"number\"},\n                        \"number_of_minutes\": {\"type\": [\"number\", \"null\"]},\n                        \"pesticide_exam_ind\": {\"type\": \"number\" }\n                    },\n                    \"required\": [\"exam_color\", \"exam_type_id\", \"exam_type_name\", \"group_exam_ind\", \"ita_ind\", \"method_type\", \"number_of_hours\", \"number_of_minutes\", \"pesticide_exam_ind\"]\n                },\n                \"exam_type_id\": {\"type\": \"number\"},\n                \"exam_written_ind\": {\"type\": \"number\"},\n                \"examinee_name\": {\"type\": \"string\"},\n                \"expiry_date\": {\"type\": [\"string\", \"null\"]},\n                \"notes\": {\"type\": \"string\"},\n                \"number_of_students\": {\"type\": \"number\"},\n                \"office\":{\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"appointments_enabled_ind\": {\"type\": \"number\"},\n                        \"exams_enabled_ind\": {\"type\": \"number\"},\n                        \"office_id\": {\"type\": \"number\"},\n                        \"office_name\": {\"type\": \"string\"},\n                        \"office_number\": {\"type\": \"number\" },\n                        \"timezone\": {\n                            \"type\": \"object\",\n                            \"properties\": {\n                                \"timezone_id\": {\"type\" : \"number\"},\n                                \"timezone_name\": {\"type\": \"string\"}\n                            },\n                            \"required\": [\"timezone_id\", \"timezone_name\"]\n                        },\n                    },\n                    \"required\": []\n                },\n                \"office_id\": {\"type\": \"number\"},\n                \"offsite_location\": {},\n                \"session_number\": {\"type\": [\"number\", \"null\"]},\n                \"booking\": {}\n            },\n            \"required\": [\"booking\", \"booking_id\", \"deleted_date\", \"event_id\", \"exam_id\", \"exam_method\", \"exam_name\", \"exam_received_date\", \"exam_returned_tracking_number\", \"exam_type\", \"exam_type_id\", \"exam_written_ind\", \"examinee_name\", \"expiry_date\", \"notes\", \"number_of_students\", \"office\", \"office_id\", \"offsite_location\", \"session_number\"]\n        }\n    },\n    \"required\": [\"exam\"]\n};\n\n//Test to see if response schema is valid\npm.test(\"Validate Response Exam Schema\", function(){\n    pm.expect(tv4.validate(jsonData, examSchema)).to.be.true;\n});\n"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-Exam-Data-Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8cebcf78-f5a2-4694-b108-60e146791a78",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"exam_data_check\", jsonData.data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//  Make sure that jsonData has an exam property.\npm.test(\"Response should have exam property\", function(){\n    pm.expect(jsonData.hasOwnProperty(\"exam\")).to.be.true;\n});\n\n//  If jsonData has exam property, check data.\nif (jsonData.hasOwnProperty(\"exam\")) {\n\n    //Test to see if Event ID field remains unchanged\n    pm.test(\"Validate Event Id has expected value\", function(){\n        pm.expect(jsonData.event_id === environment.event_id);\n    });\n\n    //Test to see if exam method field remains unchanged\n    pm.test(\"Validate exam method has expected value\", function(){\n        pm.expect(jsonData.exam_method === environment.exam_method);\n    });\n\n    //Test to see if exam name field remains unchanged\n    pm.test(\"Validate exam name has expected value\", function(){\n        pm.expect(jsonData.exam_name === environment.exam_name);\n    });\n\n    //Test to see if exam type field remains unchanged\n    pm.test(\"Validate exam type id has expected value\", function(){\n        pm.expect(jsonData.exam_type_id === environment.random_exam_type_id);\n    });\n\n    //Test to see if exam written indicator field remains unchanged\n    pm.test(\"Validate exam written indicator has expected value\", function(){\n        pm.expect(jsonData.exam_written_ind === environment.exam_written_ind);\n    });\n\n    //Test to see if examinee name field remains unchanged\n    pm.test(\"Validate examinee name has expected value\", function(){\n        pm.expect(jsonData.examinee_name === environment.examinee_name);\n    });\n\n    //Test to see if notes field remains unchanged\n    pm.test(\"Validate notes has expected value\", function(){\n        pm.expect(jsonData.notes === environment.notes);\n    });\n\n    //Test to see if number of students field remains unchanged\n    pm.test(\"Validate number of students has expected value\", function(){\n        pm.expect(jsonData.number_of_students === environment.number_of_students);\n    });\n\n    //Test to see if office id remains unchanged\n    pm.test(\"Validate office id has expected value\", function(){\n        pm.expect(jsonData.office_id === environment.current_office_id);\n    });\n\n    //Test to see if offsite location is expected\n    pm.test(\"Validate offsite location has expected value\", function(){\n        pm.expect(jsonData.offsite_location === environment.offsite_location);\n    });\n}\n"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-Exam-List-Schema-Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8cebcf78-f5a2-4694-b108-60e146791a78",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"exam_schema_list_check\", jsonData.data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "// Define the JSON Schema expected in response\nvar examSchema = {\n    \"type\": \"object\",\n    \"properties\": {\n        \"exams\": {\n            \"type\": \"array\",\n            \"properties\": {\n                \"booking_id\": {},\n                \"deleted_date\": {},\n                \"event_id\": {\"type\": \"string\"},\n                \"exam_id\": {\"type\": \"number\"},\n                \"exam_method\": {\"type\": \"string\"},\n                \"exam_name\": {\"type\": \"string\"},\n                \"exam_received_date\": {},\n                \"exam_returned_tracking_number\": {},\n                \"exam_type\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"exam_color\": {\"type\": \"string\"},\n                        \"exam_type_id\": {\"type\": \"number\"},\n                        \"exam_type_name\": {\"type\": \"string\"},\n                        \"group_exam_ind\": {\"type\": \"number\"},\n                        \"ita_ind\": {\"type\": \"number\"},\n                        \"method_type\": {\"type\": \"string\"},\n                        \"number_of_hours\": {\"type\": \"number\"},\n                        \"number_of_minutes\": {\"type\": \"number\"},\n                        \"pesticide_exam_ind\": {\"type\": \"number\" }\n                    },\n                    \"required\": [\"exam_color\", \"exam_type_id\", \"exam_type_name\", \"group_exam_ind\", \"ita_ind\", \"method_type\", \"number_of_hours\", \"number_of_minutes\", \"pesticide_exam_ind\"]\n                },\n                \"exam_type_id\": {\"type\": \"number\"},\n                \"exam_written_ind\": {\"type\": \"number\"},\n                \"examinee_name\": {\"type\": \"string\"},\n                \"expiry_date\": {\"type\": [\"string\", \"null\"]},\n                \"notes\": {\"type\": \"string\"},\n                \"number_of_students\": {\"type\": \"number\"},\n                \"office\":{\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"appointments_enabled_ind\": {\"type\": \"number\"},\n                        \"exams_enabled_ind\": {\"type\": \"number\"},\n                        \"office_id\": {\"type\": \"number\"},\n                        \"office_name\": {\"type\": \"string\"},\n                        \"office_number\": {\"type\": \"number\" },\n                        \"timezone\": {\n                            \"type\": \"object\",\n                            \"properties\": {\n                                \"timezone_id\": {\"type\" : \"number\"},\n                                \"timezone_name\": {\"type\": \"string\"}\n                            },\n                            \"required\": [\"timezone_id\", \"timezone_name\"]\n                        },\n                    },\n                    \"required\": []\n                },\n                \"office_id\": {\"type\": \"number\"},\n                \"offsite_location\": {},\n                \"session_number\": {\"type\": [\"number\", \"null\"]},\n                \"booking\": {}\n            },\n            \"required\": [\"booking\", \"booking_id\", \"deleted_date\", \"event_id\", \"exam_id\", \"exam_method\", \"exam_name\", \"exam_received_date\", \"exam_returned_tracking_number\", \"exam_type\", \"exam_type_id\", \"exam_written_ind\", \"examinee_name\", \"expiry_date\", \"notes\", \"number_of_students\", \"office\", \"office_id\", \"offsite_location\", \"session_number\"]\n        }\n    },\n    \"required\": [\"exams\"]\n};\n\n//Test to see if response schema is valid\npm.test(\"Validate Response Exam List Schema\", function(){\n    pm.expect(tv4.validate(jsonData, examSchema)).to.be.true;\n});\n"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "Who am I",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c34723d3-c0d1-4504-97a2-373088309a5b",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e77f0ca3-62cf-49ba-8e17-67a16e8f8a5f",
								"exec": [
									"//  Run basic response tests.",
									"eval(environment.basic_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"if (jsonData.hasOwnProperty(\"csr\")) {",
									"\tcurrentOfficeId = jsonData.csr.office_id;",
									"\tcurrentOfficeNumber = jsonData.csr.office.office_number;",
									"\tcurrentCsrId = jsonData.csr.csr_id;",
									"    postman.setEnvironmentVariable(\"current_office_id\", currentOfficeId);",
									"    postman.setEnvironmentVariable(\"current_office_number\", currentOfficeNumber);",
									"    postman.setEnvironmentVariable(\"current_csr_id\", currentCsrId);",
									"};",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}csrs/me/",
							"host": [
								"{{url}}csrs"
							],
							"path": [
								"me",
								""
							]
						}
					},
					"response": []
				}
			],
			"description": "This folder performs basic authentication features.",
			"protocolProfileBehavior": {}
		},
		{
			"name": "Check app health",
			"item": [
				{
					"name": "Check healthz driver TheQ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "74adc5ce-caa5-452a-bd96-8ac90a4c11d7",
								"exec": [
									"//  Get the maximum response time allowed.",
									"max_load_time = JSON.parse(globals.max_load_time);",
									"",
									"//  Set health response time variable.",
									"health_tries = 15;",
									"counter = 1;",
									"postman.setEnvironmentVariable(\"health_tries\", JSON.stringify(health_tries));",
									"postman.setEnvironmentVariable(\"health_counter\", JSON.stringify(counter));",
									"",
									"//  Get the response.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Test the health response.",
									"pm.test(\"Health Driver: Try \" + counter.toString() + \": Response should have 'message' property\", function() {",
									"    pm.expect(jsonData).to.have.property('message');",
									"});",
									"",
									"pm.test(\"Response message should be 'api is healthy'\", function() {",
									"    pm.expect(jsonData.message).to.be.eql('api is healthy');",
									"});",
									"",
									"//  If response time is OK, proceed to the next test.",
									"if (pm.response.responseTime < max_load_time) {",
									"    postman.setNextRequest(\"Check the readyz endpoint TheQ\");",
									"}",
									"    ",
									"//  Response time is too long.  Try again, give pod a chance to spin up.",
									"else {",
									"    postman.setNextRequest(\"Check the healthz endpoint TheQ\");",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9e00b481-ef9a-440b-8e83-025fc49026c4",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{url}}healthz/",
							"host": [
								"{{url}}healthz"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Check the healthz endpoint TheQ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "74adc5ce-caa5-452a-bd96-8ac90a4c11d7",
								"exec": [
									"//  Get the maximum load time allowed.",
									"max_load_time = JSON.parse(postman.getEnvironmentVariable(\"max_load_time\"));",
									"",
									"//  Get and update variables.",
									"health_tries = JSON.parse(postman.getEnvironmentVariable(\"health_tries\"));",
									"counter = JSON.parse(postman.getEnvironmentVariable(\"health_counter\")) + 1;",
									"postman.setEnvironmentVariable(\"health_counter\", JSON.stringify(counter));",
									"",
									"//  Get the response.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Test the health response.",
									"pm.test(\"Health Driver: Try \" + counter.toString() + \": Response should have 'message' property\", function() {",
									"    pm.expect(jsonData).to.have.property('message');",
									"});",
									"",
									"pm.test(\"Response message should be 'api is healthy'\", function() {",
									"    pm.expect(jsonData.message).to.be.eql('api is healthy');",
									"});",
									"",
									"//  If response time is OK, proceed to the next test.",
									"if (pm.response.responseTime < max_load_time) {",
									"    postman.setNextRequest(\"Check the readyz endpoint TheQ\");",
									"}",
									"    ",
									"//  Response time is too long.",
									"else {",
									"    ",
									"    //  You haven't reached your maximum tries yet.  Try again.",
									"    if (counter < health_tries) {",
									"        postman.setNextRequest(\"Check the healthz endpoint\");",
									"    }",
									"    ",
									"    //   You have reached the maximum.  An error, go to next test.",
									"    else {",
									"        pm.test(\"Response should be below \" + max_load_time.toString() + ' in ' + health_tries.toString() + ' tries.', function() {",
									"            pm.expect(counter).to.be.below(health_tries);",
									"        });",
									"        postman.setNextRequest(\"Check the readyz endpoint TheQ\");",
									"    }",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9e00b481-ef9a-440b-8e83-025fc49026c4",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{url}}healthz/",
							"host": [
								"{{url}}healthz"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Check the readyz endpoint TheQ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "661c33c4-4a3d-4396-a549-9969edafbfa6",
								"exec": [
									"//  Perform the standard tests.",
									"eval(environment.basic_response_test);",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Test the health response.",
									"pm.test(\"Response should have 'message' property\", function() {",
									"    pm.expect(jsonData).to.have.property('message');",
									"});",
									"",
									"pm.test(\"Response message should be 'api is ready'\", function() {",
									"    pm.expect(jsonData.message).to.be.eql('api is ready');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9e00b481-ef9a-440b-8e83-025fc49026c4",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{url}}readyz/",
							"host": [
								"{{url}}readyz"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				}
			],
			"description": "Checks the application health by calling the healthz and readyz endpoints",
			"protocolProfileBehavior": {}
		},
		{
			"name": "Check user login",
			"item": [
				{
					"name": "Authenticate user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "43df8e47-2b93-48b0-a5ff-bb3396d12537",
								"exec": [
									"//  Do the basic checks.",
									"eval(environment.basic_response_test);",
									"",
									"//  Get the response.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Test to make sure that the access token field is not null",
									"pm.test(\"Access Token is not null\", function(){",
									"    var access_token = jsonData.access_token;",
									"    pm.expect(access_token).not.eql(null);",
									"});",
									"",
									"//Test to make sure that the refresh token response field is not null",
									"pm.test(\"Refresh Token is not null\", function(){",
									"    var refresh_token = jsonData.refresh_token;",
									"    pm.expect(refresh_token).not.eql(null);",
									"});",
									"",
									"//Test to make sure that expires in response field is not nullf",
									"pm.test(\"Expires In is not null\", function(){",
									"    var expires_in = jsonData.expires_in;",
									"    pm.expect(expires_in).not.eql(null);",
									"});",
									"",
									"//Test to make sure that refresh expires in response fiels is not null",
									"pm.test(\"Refresh Expires In is not null\", function(){",
									"    var refresh_expires_in = jsonData.refresh_expires_in;",
									"    pm.expect(refresh_expires_in).not.eql(null);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.globals.set(\"token\", jsonData.access_token);",
									"pm.globals.set(\"refresh_token\", jsonData.refresh_token);",
									"pm.globals.set(\"token_expires\", Date.now()+(jsonData.expires_in * 1000));",
									"pm.globals.set(\"refresh_token_expires\", Date.now()+(jsonData.refresh_expires_in * 1000));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "grant_type=password&client_id={{clientid}}&username={{userid}}&password={{password}}&client_secret={{client_secret}}"
						},
						"url": {
							"raw": "{{auth_url}}/auth/realms/{{realm}}/protocol/openid-connect/token?Content-Type=application/x-www-form-urlencoded",
							"host": [
								"{{auth_url}}"
							],
							"path": [
								"auth",
								"realms",
								"{{realm}}",
								"protocol",
								"openid-connect",
								"token"
							],
							"query": [
								{
									"key": "Content-Type",
									"value": "application/x-www-form-urlencoded"
								}
							]
						},
						"description": "Make sure the operator ID can log in"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Get Exam Types",
			"item": [
				{
					"name": "Exam Type List",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2df2a851-6a71-48e6-b44f-ccf096fe9d83",
								"exec": [
									"// Define the JSON Schema expected in response",
									"var examTypeSchema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"exam_color\": {\"type\": \"string\"},",
									"            \"exam_type_id\": {\"type\": \"number\"},",
									"            \"exam_type_name\": {\"type\": \"string\"},",
									"            \"ita_ind\": {\"type\": \"number\"},",
									"            \"method_type\": {\"type\": \"string\"},",
									"            \"number_of_hours\": {\"type\": \"number\"},",
									"            \"group_exam_ind\": {\"type\": \"number\"}",
									"        },",
									"        \"required\": [\"exam_color\", \"exam_type_id\", \"exam_type_name\", \"ita_ind\", \"method_type\", \"number_of_hours\", \"group_exam_ind\"]",
									"    },",
									"    \"required\": []",
									"};           ",
									"",
									"//  Get the max response time allowed.",
									"console.log(\"==> Before getting response max\");",
									"var response_max = JSON.parse(globals.max_response_time);",
									"",
									"// Check Response code for request",
									"console.log(\"==> Before checking response code\");",
									"pm.test(\"Response code for request is 200\", function(){",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"console.log(\"==> Before checking response time\");",
									"pm.test(\"Response time less than \" + response_max.toString() + \"ms\", function(){",
									"    pm.expect(pm.response.responseTime).to.be.below(response_max);",
									"});",
									"",
									"// Parse response body",
									"console.log(\"==> Before getting response body\");",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Test to see if response schema is valid",
									"console.log(\"==> Before checking schema\");",
									"pm.test(\"Validate Response Exam Type Schema\", function(){",
									"    pm.expect(tv4.validate(jsonData, examTypeSchema)).to.be.true;",
									"});",
									"",
									"//  Store all exam type IDs for future use in adding exams",
									"console.log(\"==> Before allelements\");",
									"var allExamIds = [];",
									"",
									"//  Make sure some data returned.",
									"console.log(\"==> Before checking there is an exam_types property\");",
									"pm.test(\"Response has exam_types property\", function(){",
									"    pm.expect(jsonData.hasOwnProperty(\"exam_types\")).to.be.true;",
									"});",
									"console.log(\"==> Before checking at least one exam type\");",
									"pm.test(\"Response has at least one exam_type\", function(){",
									"    pm.expect(jsonData.exam_types.length).to.be.above(0);",
									"});",
									"",
									"// Set up list of valid exam types, create random functions.",
									"console.log(\"==> setting environment variables\");",
									"eval(environment.init_exam_type_data);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}exam_types/",
							"host": [
								"{{url}}exam_types"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Exam test 5 updates",
			"item": [
				{
					"name": "Create exam",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c34723d3-c0d1-4504-97a2-373088309a5b",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									"",
									"//  Get exam type data and functions.",
									"exam_array = JSON.parse(postman.getEnvironmentVariable(\"exam_array_data\"));",
									"eval(environment.create_random_functions);",
									"",
									"//  Create an event number based on the time.",
									"var ms = (new Date().getTime()).toString() + \"00\";",
									"eventNumber = Number(ms.substring(ms.length-6, ms.len)) + 1;",
									"postman.setEnvironmentVariable(\"event_number\", eventNumber);",
									"",
									"//  Update the next event ID.",
									"var eventId = \"pm\" + eventNumber.toString();",
									"postman.setEnvironmentVariable(\"update_number\", 0);",
									"postman.setEnvironmentVariable(\"event_id\", JSON.stringify(eventId));",
									"postman.setEnvironmentVariable(\"event_delete\", eventId);",
									"",
									"//  Calculate a random exam type to use.",
									"random_index = get_random_index(exam_array);",
									"",
									"//  Store for use.",
									"random_exam_type_id = exam_array[random_index].id;",
									"postman.setEnvironmentVariable(\"random_exam_type_id\", JSON.stringify(random_exam_type_id.toString()));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e77f0ca3-62cf-49ba-8e17-67a16e8f8a5f",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.create_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"if (jsonData.hasOwnProperty(\"exam\")) {",
									"\tcurrentExamId = jsonData.exam.exam_id;",
									"    postman.setEnvironmentVariable(\"current_exam_id\", currentExamId);",
									"};",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\n\t\"event_id\" : {{event_id}},\n    \"exam_method\" : \"paper\",\n    \"exam_name\" : \"Postman Group Exam Name\",\n    \"exam_type_id\" : {{random_exam_type_id}},\n    \"exam_written_ind\" : \"0\",\n    \"examinee_name\" : \"Pm examinee name\",\n    \"notes\" : \"Pm sample notes\",\n    \"number_of_students\" : \"19\",\n    \"office_id\" : {{current_office_id}},\n    \"offsite_location\" : \"Pm test location\"\n}"
						},
						"url": {
							"raw": "{{url}}exams/",
							"host": [
								"{{url}}exams"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update exam info (1-1)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c34723d3-c0d1-4504-97a2-373088309a5b",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									"",
									"//  Update the next event ID.",
									"var eventNumber = JSON.parse(postman.getEnvironmentVariable(\"event_number\"));",
									"var updateNumber = JSON.parse(postman.getEnvironmentVariable(\"update_number\")) + 1;",
									"var updateEventId = \"pm-up\" + updateNumber.toString() + \"-\" + eventNumber.toString();",
									"postman.setEnvironmentVariable(\"update_number\", updateNumber);",
									"postman.setEnvironmentVariable(\"update_id\", JSON.stringify(updateEventId));",
									"postman.setEnvironmentVariable(\"exam_name\", JSON.stringify(\"PM exam name - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"examinee_name\", JSON.stringify(\"PM examinee - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"notes\", JSON.stringify(\"PM exam notes - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"offsite_location\", JSON.stringify(\"PM offsite location - Update \" + updateNumber.toString()));",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e77f0ca3-62cf-49ba-8e17-67a16e8f8a5f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"event_id\" : {{update_id}},\n    \"exam_method\" : \"paper\",\n    \"exam_name\" : {{exam_name}},\n    \"exam_type_id\" : {{random_exam_type_id}},\n    \"exam_written_ind\" : \"0\",\n    \"examinee_name\" : {{examinee_name}},\n    \"notes\" : {{notes}},\n    \"number_of_students\" : \"119\",\n    \"office_id\" : {{current_office_id}},\n    \"offsite_location\" : {{offsite_location}}\n}\n"
						},
						"url": {
							"raw": "{{url}}exams/{{current_exam_id}}/",
							"host": [
								"{{url}}exams"
							],
							"path": [
								"{{current_exam_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update exam info (1-2)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c34723d3-c0d1-4504-97a2-373088309a5b",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									"",
									"//  Update the next event ID.",
									"var eventNumber = JSON.parse(postman.getEnvironmentVariable(\"event_number\"));",
									"var updateNumber = JSON.parse(postman.getEnvironmentVariable(\"update_number\")) + 1;",
									"var updateEventId = \"pm-up\" + updateNumber.toString() + \"-\" + eventNumber.toString();",
									"postman.setEnvironmentVariable(\"update_number\", updateNumber);",
									"postman.setEnvironmentVariable(\"update_id\", JSON.stringify(updateEventId));",
									"postman.setEnvironmentVariable(\"exam_name\", JSON.stringify(\"PM exam name - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"examinee_name\", JSON.stringify(\"PM examinee - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"notes\", JSON.stringify(\"PM exam notes - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"offsite_location\", JSON.stringify(\"PM offsite location - Update \" + updateNumber.toString()));",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e77f0ca3-62cf-49ba-8e17-67a16e8f8a5f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"event_id\" : {{update_id}},\n    \"exam_method\" : \"paper\",\n    \"exam_name\" : {{exam_name}},\n    \"exam_type_id\" : {{random_exam_type_id}},\n    \"exam_written_ind\" : \"0\",\n    \"examinee_name\" : {{examinee_name}},\n    \"notes\" : {{notes}},\n    \"number_of_students\" : \"119\",\n    \"office_id\" : {{current_office_id}},\n    \"offsite_location\" : {{offsite_location}}\n}"
						},
						"url": {
							"raw": "{{url}}exams/{{current_exam_id}}/",
							"host": [
								"{{url}}exams"
							],
							"path": [
								"{{current_exam_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update exam info (1-3)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c34723d3-c0d1-4504-97a2-373088309a5b",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									"",
									"//  Update the next event ID.",
									"var eventNumber = JSON.parse(postman.getEnvironmentVariable(\"event_number\"));",
									"var updateNumber = JSON.parse(postman.getEnvironmentVariable(\"update_number\")) + 1;",
									"var updateEventId = \"pm-up\" + updateNumber.toString() + \"-\" + eventNumber.toString();",
									"postman.setEnvironmentVariable(\"update_number\", updateNumber);",
									"postman.setEnvironmentVariable(\"update_id\", JSON.stringify(updateEventId));",
									"postman.setEnvironmentVariable(\"exam_name\", JSON.stringify(\"PM exam name - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"examinee_name\", JSON.stringify(\"PM examinee - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"notes\", JSON.stringify(\"PM exam notes - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"offsite_location\", JSON.stringify(\"PM offsite location - Update \" + updateNumber.toString()));",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e77f0ca3-62cf-49ba-8e17-67a16e8f8a5f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"event_id\" : {{update_id}},\n    \"exam_method\" : \"paper\",\n    \"exam_name\" : {{exam_name}},\n    \"exam_type_id\" : {{random_exam_type_id}},\n    \"exam_written_ind\" : \"0\",\n    \"examinee_name\" : {{examinee_name}},\n    \"notes\" : {{notes}},\n    \"number_of_students\" : \"119\",\n    \"office_id\" : {{current_office_id}},\n    \"offsite_location\" : {{offsite_location}}\n}"
						},
						"url": {
							"raw": "{{url}}exams/{{current_exam_id}}/",
							"host": [
								"{{url}}exams"
							],
							"path": [
								"{{current_exam_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update exam info (1-4)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c34723d3-c0d1-4504-97a2-373088309a5b",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									"",
									"//  Update the next event ID.",
									"var eventNumber = JSON.parse(postman.getEnvironmentVariable(\"event_number\"));",
									"var updateNumber = JSON.parse(postman.getEnvironmentVariable(\"update_number\")) + 1;",
									"var updateEventId = \"pm-up\" + updateNumber.toString() + \"-\" + eventNumber.toString();",
									"postman.setEnvironmentVariable(\"update_number\", updateNumber);",
									"postman.setEnvironmentVariable(\"update_id\", JSON.stringify(updateEventId));",
									"postman.setEnvironmentVariable(\"exam_name\", JSON.stringify(\"PM exam name - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"examinee_name\", JSON.stringify(\"PM examinee - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"notes\", JSON.stringify(\"PM exam notes - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"offsite_location\", JSON.stringify(\"PM offsite location - Update \" + updateNumber.toString()));",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e77f0ca3-62cf-49ba-8e17-67a16e8f8a5f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"event_id\" : {{update_id}},\n    \"exam_method\" : \"paper\",\n    \"exam_name\" : {{exam_name}},\n    \"exam_type_id\" : {{random_exam_type_id}},\n    \"exam_written_ind\" : \"0\",\n    \"examinee_name\" : {{examinee_name}},\n    \"notes\" : {{notes}},\n    \"number_of_students\" : \"119\",\n    \"office_id\" : {{current_office_id}},\n    \"offsite_location\" : {{offsite_location}}\n}"
						},
						"url": {
							"raw": "{{url}}exams/{{current_exam_id}}/",
							"host": [
								"{{url}}exams"
							],
							"path": [
								"{{current_exam_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update exam info (1-5)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c34723d3-c0d1-4504-97a2-373088309a5b",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									"",
									"//  Update the next event ID.",
									"var eventNumber = JSON.parse(postman.getEnvironmentVariable(\"event_number\"));",
									"var updateNumber = JSON.parse(postman.getEnvironmentVariable(\"update_number\")) + 1;",
									"var updateEventId = \"pm-up\" + updateNumber.toString() + \"-\" + eventNumber.toString();",
									"postman.setEnvironmentVariable(\"update_number\", updateNumber);",
									"postman.setEnvironmentVariable(\"update_id\", JSON.stringify(updateEventId));",
									"postman.setEnvironmentVariable(\"exam_name\", JSON.stringify(\"PM exam name - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"examinee_name\", JSON.stringify(\"PM examinee - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"notes\", JSON.stringify(\"PM exam notes - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"offsite_location\", JSON.stringify(\"PM offsite location - Update \" + updateNumber.toString()));",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e77f0ca3-62cf-49ba-8e17-67a16e8f8a5f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"event_id\" : {{update_id}},\n    \"exam_method\" : \"paper\",\n    \"exam_name\" : {{exam_name}},\n    \"exam_type_id\" : {{random_exam_type_id}},\n    \"exam_written_ind\" : \"0\",\n    \"examinee_name\" : {{examinee_name}},\n    \"notes\" : {{notes}},\n    \"number_of_students\" : \"119\",\n    \"office_id\" : {{current_office_id}},\n    \"offsite_location\" : {{offsite_location}}\n}"
						},
						"url": {
							"raw": "{{url}}exams/{{current_exam_id}}/",
							"host": [
								"{{url}}exams"
							],
							"path": [
								"{{current_exam_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "List exams",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c34723d3-c0d1-4504-97a2-373088309a5b",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									"",
									"//  Update the next event ID.",
									"var eventNumber = JSON.parse(postman.getEnvironmentVariable(\"event_number\"));",
									"var updateNumber = JSON.parse(postman.getEnvironmentVariable(\"update_number\")) + 1;",
									"var updateEventId = \"pm-up\" + updateNumber.toString() + \"-\" + eventNumber.toString();",
									"postman.setEnvironmentVariable(\"update_number\", updateNumber);",
									"postman.setEnvironmentVariable(\"update_id\", JSON.stringify(updateEventId));",
									"postman.setEnvironmentVariable(\"exam_name\", JSON.stringify(\"PM exam name - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"examinee_name\", JSON.stringify(\"PM examinee - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"notes\", JSON.stringify(\"PM exam notes - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"offsite_location\", JSON.stringify(\"PM offsite locatoin - Update \" + updateNumber.toString()));",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e77f0ca3-62cf-49ba-8e17-67a16e8f8a5f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"event_id\" : {{update_id}},\n    \"exam_method\" : \"paper\",\n    \"exam_name\" : {{exam_name}},\n    \"exam_type_id\" : \"6\",\n    \"exam_written_ind\" : \"0\",\n    \"examinee_name\" : {{examinee_name}},\n    \"notes\" : {{notes}},\n    \"number_of_students\" : \"119\",\n    \"office_id\" : {{current_office_id}},\n    \"offsite_location\" : {{offsite_location}}\n}"
						},
						"url": {
							"raw": "{{url}}exams/?office_number={{current_office_number}}",
							"host": [
								"{{url}}exams"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "office_number",
									"value": "{{current_office_number}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete exam",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0ec5c421-a4af-4424-8201-86864e291f0e",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}exams/{{current_exam_id}}/",
							"host": [
								"{{url}}exams"
							],
							"path": [
								"{{current_exam_id}}",
								""
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Exam test 3 updates",
			"item": [
				{
					"name": "Create exam",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c34723d3-c0d1-4504-97a2-373088309a5b",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									"",
									"//  Get exam type data and functions.",
									"exam_array = JSON.parse(postman.getEnvironmentVariable(\"exam_array_data\"));",
									"eval(environment.create_random_functions);",
									"",
									"//  Create an event number based on the time.",
									"var ms = (new Date().getTime()).toString() + \"00\";",
									"eventNumber = Number(ms.substring(ms.length-6, ms.len)) + 1;",
									"postman.setEnvironmentVariable(\"event_number\", eventNumber);",
									"",
									"//  Update the next event ID.",
									"var eventId = \"pm\" + eventNumber.toString();",
									"postman.setEnvironmentVariable(\"update_number\", 0);",
									"postman.setEnvironmentVariable(\"event_id\", JSON.stringify(eventId));",
									"postman.setEnvironmentVariable(\"event_delete\", eventId);",
									"",
									"//  Calculate a random exam type to use.",
									"random_index = get_random_index(exam_array);",
									"",
									"//  Store for use.",
									"random_exam_type_id = exam_array[random_index].id;",
									"postman.setEnvironmentVariable(\"random_exam_type_id\", JSON.stringify(random_exam_type_id.toString()));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e77f0ca3-62cf-49ba-8e17-67a16e8f8a5f",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.create_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"if (jsonData.hasOwnProperty(\"exam\")) {",
									"\tcurrentExamId = jsonData.exam.exam_id;",
									"    postman.setEnvironmentVariable(\"current_exam_id\", currentExamId);",
									"};",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\n\t\"event_id\" : {{event_id}},\n    \"exam_method\" : \"paper\",\n    \"exam_name\" : \"Postman Group Exam Name\",\n    \"exam_type_id\" : {{random_exam_type_id}},\n    \"exam_written_ind\" : \"0\",\n    \"examinee_name\" : \"Pm examinee name\",\n    \"notes\" : \"Pm sample notes\",\n    \"number_of_students\" : \"19\",\n    \"office_id\" : {{current_office_id}},\n    \"offsite_location\" : \"Pm test location\"\n}"
						},
						"url": {
							"raw": "{{url}}exams/",
							"host": [
								"{{url}}exams"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update exam info (2-1)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c34723d3-c0d1-4504-97a2-373088309a5b",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									"",
									"//  Update the next event ID.",
									"var eventNumber = JSON.parse(postman.getEnvironmentVariable(\"event_number\"));",
									"var updateNumber = JSON.parse(postman.getEnvironmentVariable(\"update_number\")) + 1;",
									"var updateEventId = \"pm-up\" + updateNumber.toString() + \"-\" + eventNumber.toString();",
									"postman.setEnvironmentVariable(\"update_number\", updateNumber);",
									"postman.setEnvironmentVariable(\"update_id\", JSON.stringify(updateEventId));",
									"postman.setEnvironmentVariable(\"exam_name\", JSON.stringify(\"PM exam name - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"examinee_name\", JSON.stringify(\"PM examinee - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"notes\", JSON.stringify(\"PM exam notes - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"offsite_location\", JSON.stringify(\"PM offsite location - Update \" + updateNumber.toString()));",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e77f0ca3-62cf-49ba-8e17-67a16e8f8a5f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"event_id\" : {{update_id}},\n    \"exam_method\" : \"paper\",\n    \"exam_name\" : {{exam_name}},\n    \"exam_type_id\" : {{random_exam_type_id}},\n    \"exam_written_ind\" : \"0\",\n    \"examinee_name\" : {{examinee_name}},\n    \"notes\" : {{notes}},\n    \"number_of_students\" : \"119\",\n    \"office_id\" : {{current_office_id}},\n    \"offsite_location\" : {{offsite_location}}\n}"
						},
						"url": {
							"raw": "{{url}}exams/{{current_exam_id}}/",
							"host": [
								"{{url}}exams"
							],
							"path": [
								"{{current_exam_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update exam info (2-2)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c34723d3-c0d1-4504-97a2-373088309a5b",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									"",
									"//  Update the next event ID.",
									"var eventNumber = JSON.parse(postman.getEnvironmentVariable(\"event_number\"));",
									"var updateNumber = JSON.parse(postman.getEnvironmentVariable(\"update_number\")) + 1;",
									"var updateEventId = \"pm-up\" + updateNumber.toString() + \"-\" + eventNumber.toString();",
									"postman.setEnvironmentVariable(\"update_number\", updateNumber);",
									"postman.setEnvironmentVariable(\"update_id\", JSON.stringify(updateEventId));",
									"postman.setEnvironmentVariable(\"exam_name\", JSON.stringify(\"PM exam name - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"examinee_name\", JSON.stringify(\"PM examinee - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"notes\", JSON.stringify(\"PM exam notes - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"offsite_location\", JSON.stringify(\"PM offsite location - Update \" + updateNumber.toString()));",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e77f0ca3-62cf-49ba-8e17-67a16e8f8a5f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"event_id\" : {{update_id}},\n    \"exam_method\" : \"paper\",\n    \"exam_name\" : {{exam_name}},\n    \"exam_type_id\" : {{random_exam_type_id}},\n    \"exam_written_ind\" : \"0\",\n    \"examinee_name\" : {{examinee_name}},\n    \"notes\" : {{notes}},\n    \"number_of_students\" : \"119\",\n    \"office_id\" : {{current_office_id}},\n    \"offsite_location\" : {{offsite_location}}\n}"
						},
						"url": {
							"raw": "{{url}}exams/{{current_exam_id}}/",
							"host": [
								"{{url}}exams"
							],
							"path": [
								"{{current_exam_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update exam info (2-3)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c34723d3-c0d1-4504-97a2-373088309a5b",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									"",
									"//  Update the next event ID.",
									"var eventNumber = JSON.parse(postman.getEnvironmentVariable(\"event_number\"));",
									"var updateNumber = JSON.parse(postman.getEnvironmentVariable(\"update_number\")) + 1;",
									"var updateEventId = \"pm-up\" + updateNumber.toString() + \"-\" + eventNumber.toString();",
									"postman.setEnvironmentVariable(\"update_number\", updateNumber);",
									"postman.setEnvironmentVariable(\"update_id\", JSON.stringify(updateEventId));",
									"postman.setEnvironmentVariable(\"exam_name\", JSON.stringify(\"PM exam name - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"examinee_name\", JSON.stringify(\"PM examinee - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"notes\", JSON.stringify(\"PM exam notes - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"offsite_location\", JSON.stringify(\"PM offsite location - Update \" + updateNumber.toString()));",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e77f0ca3-62cf-49ba-8e17-67a16e8f8a5f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"event_id\" : {{update_id}},\n    \"exam_method\" : \"paper\",\n    \"exam_name\" : {{exam_name}},\n    \"exam_type_id\" : {{random_exam_type_id}},\n    \"exam_written_ind\" : \"0\",\n    \"examinee_name\" : {{examinee_name}},\n    \"notes\" : {{notes}},\n    \"number_of_students\" : \"119\",\n    \"office_id\" : {{current_office_id}},\n    \"offsite_location\" : {{offsite_location}}\n}"
						},
						"url": {
							"raw": "{{url}}exams/{{current_exam_id}}/",
							"host": [
								"{{url}}exams"
							],
							"path": [
								"{{current_exam_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "List exams",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c34723d3-c0d1-4504-97a2-373088309a5b",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									"",
									"//  Update the next event ID.",
									"var eventNumber = JSON.parse(postman.getEnvironmentVariable(\"event_number\"));",
									"var updateNumber = JSON.parse(postman.getEnvironmentVariable(\"update_number\")) + 1;",
									"var updateEventId = \"pm-up\" + updateNumber.toString() + \"-\" + eventNumber.toString();",
									"postman.setEnvironmentVariable(\"update_number\", updateNumber);",
									"postman.setEnvironmentVariable(\"update_id\", JSON.stringify(updateEventId));",
									"postman.setEnvironmentVariable(\"exam_name\", JSON.stringify(\"PM exam name - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"examinee_name\", JSON.stringify(\"PM examinee - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"notes\", JSON.stringify(\"PM exam notes - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"offsite_location\", JSON.stringify(\"PM offsite locatoin - Update \" + updateNumber.toString()));",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e77f0ca3-62cf-49ba-8e17-67a16e8f8a5f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"event_id\" : {{update_id}},\n    \"exam_method\" : \"paper\",\n    \"exam_name\" : {{exam_name}},\n    \"exam_type_id\" : \"6\",\n    \"exam_written_ind\" : \"0\",\n    \"examinee_name\" : {{examinee_name}},\n    \"notes\" : {{notes}},\n    \"number_of_students\" : \"119\",\n    \"office_id\" : {{current_office_id}},\n    \"offsite_location\" : {{offsite_location}}\n}"
						},
						"url": {
							"raw": "{{url}}exams/?office_number={{current_office_number}}",
							"host": [
								"{{url}}exams"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "office_number",
									"value": "{{current_office_number}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete exam",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0ec5c421-a4af-4424-8201-86864e291f0e",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}exams/{{current_exam_id}}/",
							"host": [
								"{{url}}exams"
							],
							"path": [
								"{{current_exam_id}}",
								""
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Exam tests 8 updates",
			"item": [
				{
					"name": "Create exam",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c34723d3-c0d1-4504-97a2-373088309a5b",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									"",
									"//  Get exam type data and functions.",
									"exam_array = JSON.parse(postman.getEnvironmentVariable(\"exam_array_data\"));",
									"eval(environment.create_random_functions);",
									"",
									"//  Create an event number based on the time.",
									"var ms = (new Date().getTime()).toString() + \"00\";",
									"eventNumber = Number(ms.substring(ms.length-6, ms.len)) + 1;",
									"postman.setEnvironmentVariable(\"event_number\", eventNumber);",
									"",
									"//  Update the next event ID.",
									"var eventId = \"pm\" + eventNumber.toString();",
									"postman.setEnvironmentVariable(\"update_number\", 0);",
									"postman.setEnvironmentVariable(\"event_id\", JSON.stringify(eventId));",
									"postman.setEnvironmentVariable(\"event_delete\", eventId);",
									"",
									"//  Calculate a random exam type to use.",
									"random_index = get_random_index(exam_array);",
									"",
									"//  Store for use.",
									"random_exam_type_id = exam_array[random_index].id;",
									"postman.setEnvironmentVariable(\"random_exam_type_id\", JSON.stringify(random_exam_type_id.toString()));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e77f0ca3-62cf-49ba-8e17-67a16e8f8a5f",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.create_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"if (jsonData.hasOwnProperty(\"exam\")) {",
									"\tcurrentExamId = jsonData.exam.exam_id;",
									"    postman.setEnvironmentVariable(\"current_exam_id\", currentExamId);",
									"};",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\n\t\"event_id\" : {{event_id}},\n    \"exam_method\" : \"paper\",\n    \"exam_name\" : \"Postman Group Exam Name\",\n    \"exam_type_id\" : {{random_exam_type_id}},\n    \"exam_written_ind\" : \"0\",\n    \"examinee_name\" : \"Pm examinee name\",\n    \"notes\" : \"Pm sample notes\",\n    \"number_of_students\" : \"19\",\n    \"office_id\" : {{current_office_id}},\n    \"offsite_location\" : \"Pm test location\"\n}"
						},
						"url": {
							"raw": "{{url}}exams/",
							"host": [
								"{{url}}exams"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update exam info (3-1)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c34723d3-c0d1-4504-97a2-373088309a5b",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									"",
									"//  Update the next event ID.",
									"var eventNumber = JSON.parse(postman.getEnvironmentVariable(\"event_number\"));",
									"var updateNumber = JSON.parse(postman.getEnvironmentVariable(\"update_number\")) + 1;",
									"var updateEventId = \"pm-up\" + updateNumber.toString() + \"-\" + eventNumber.toString();",
									"postman.setEnvironmentVariable(\"update_number\", updateNumber);",
									"postman.setEnvironmentVariable(\"update_id\", JSON.stringify(updateEventId));",
									"postman.setEnvironmentVariable(\"exam_name\", JSON.stringify(\"PM exam name - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"examinee_name\", JSON.stringify(\"PM examinee - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"notes\", JSON.stringify(\"PM exam notes - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"offsite_location\", JSON.stringify(\"PM offsite location - Update \" + updateNumber.toString()));",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e77f0ca3-62cf-49ba-8e17-67a16e8f8a5f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"event_id\" : {{update_id}},\n    \"exam_method\" : \"paper\",\n    \"exam_name\" : {{exam_name}},\n    \"exam_type_id\" : {{random_exam_type_id}},\n    \"exam_written_ind\" : \"0\",\n    \"examinee_name\" : {{examinee_name}},\n    \"notes\" : {{notes}},\n    \"number_of_students\" : \"119\",\n    \"office_id\" : {{current_office_id}},\n    \"offsite_location\" : {{offsite_location}}\n}"
						},
						"url": {
							"raw": "{{url}}exams/{{current_exam_id}}/",
							"host": [
								"{{url}}exams"
							],
							"path": [
								"{{current_exam_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update exam info (3-2)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c34723d3-c0d1-4504-97a2-373088309a5b",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									"",
									"//  Update the next event ID.",
									"var eventNumber = JSON.parse(postman.getEnvironmentVariable(\"event_number\"));",
									"var updateNumber = JSON.parse(postman.getEnvironmentVariable(\"update_number\")) + 1;",
									"var updateEventId = \"pm-up\" + updateNumber.toString() + \"-\" + eventNumber.toString();",
									"postman.setEnvironmentVariable(\"update_number\", updateNumber);",
									"postman.setEnvironmentVariable(\"update_id\", JSON.stringify(updateEventId));",
									"postman.setEnvironmentVariable(\"exam_name\", JSON.stringify(\"PM exam name - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"examinee_name\", JSON.stringify(\"PM examinee - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"notes\", JSON.stringify(\"PM exam notes - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"offsite_location\", JSON.stringify(\"PM offsite location - Update \" + updateNumber.toString()));",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e77f0ca3-62cf-49ba-8e17-67a16e8f8a5f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"event_id\" : {{update_id}},\n    \"exam_method\" : \"paper\",\n    \"exam_name\" : {{exam_name}},\n    \"exam_type_id\" : {{random_exam_type_id}},\n    \"exam_written_ind\" : \"0\",\n    \"examinee_name\" : {{examinee_name}},\n    \"notes\" : {{notes}},\n    \"number_of_students\" : \"119\",\n    \"office_id\" : {{current_office_id}},\n    \"offsite_location\" : {{offsite_location}}\n}"
						},
						"url": {
							"raw": "{{url}}exams/{{current_exam_id}}/",
							"host": [
								"{{url}}exams"
							],
							"path": [
								"{{current_exam_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update exam info (3-3)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c34723d3-c0d1-4504-97a2-373088309a5b",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									"",
									"//  Update the next event ID.",
									"var eventNumber = JSON.parse(postman.getEnvironmentVariable(\"event_number\"));",
									"var updateNumber = JSON.parse(postman.getEnvironmentVariable(\"update_number\")) + 1;",
									"var updateEventId = \"pm-up\" + updateNumber.toString() + \"-\" + eventNumber.toString();",
									"postman.setEnvironmentVariable(\"update_number\", updateNumber);",
									"postman.setEnvironmentVariable(\"update_id\", JSON.stringify(updateEventId));",
									"postman.setEnvironmentVariable(\"exam_name\", JSON.stringify(\"PM exam name - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"examinee_name\", JSON.stringify(\"PM examinee - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"notes\", JSON.stringify(\"PM exam notes - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"offsite_location\", JSON.stringify(\"PM offsite location - Update \" + updateNumber.toString()));",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e77f0ca3-62cf-49ba-8e17-67a16e8f8a5f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"event_id\" : {{update_id}},\n    \"exam_method\" : \"paper\",\n    \"exam_name\" : {{exam_name}},\n    \"exam_type_id\" : {{random_exam_type_id}},\n    \"exam_written_ind\" : \"0\",\n    \"examinee_name\" : {{examinee_name}},\n    \"notes\" : {{notes}},\n    \"number_of_students\" : \"119\",\n    \"office_id\" : {{current_office_id}},\n    \"offsite_location\" : {{offsite_location}}\n}"
						},
						"url": {
							"raw": "{{url}}exams/{{current_exam_id}}/",
							"host": [
								"{{url}}exams"
							],
							"path": [
								"{{current_exam_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update exam info (3-4)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c34723d3-c0d1-4504-97a2-373088309a5b",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									"",
									"//  Update the next event ID.",
									"var eventNumber = JSON.parse(postman.getEnvironmentVariable(\"event_number\"));",
									"var updateNumber = JSON.parse(postman.getEnvironmentVariable(\"update_number\")) + 1;",
									"var updateEventId = \"pm-up\" + updateNumber.toString() + \"-\" + eventNumber.toString();",
									"postman.setEnvironmentVariable(\"update_number\", updateNumber);",
									"postman.setEnvironmentVariable(\"update_id\", JSON.stringify(updateEventId));",
									"postman.setEnvironmentVariable(\"exam_name\", JSON.stringify(\"PM exam name - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"examinee_name\", JSON.stringify(\"PM examinee - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"notes\", JSON.stringify(\"PM exam notes - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"offsite_location\", JSON.stringify(\"PM offsite location - Update \" + updateNumber.toString()));",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e77f0ca3-62cf-49ba-8e17-67a16e8f8a5f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"event_id\" : {{update_id}},\n    \"exam_method\" : \"paper\",\n    \"exam_name\" : {{exam_name}},\n    \"exam_type_id\" : {{random_exam_type_id}},\n    \"exam_written_ind\" : \"0\",\n    \"examinee_name\" : {{examinee_name}},\n    \"notes\" : {{notes}},\n    \"number_of_students\" : \"119\",\n    \"office_id\" : {{current_office_id}},\n    \"offsite_location\" : {{offsite_location}}\n}"
						},
						"url": {
							"raw": "{{url}}exams/{{current_exam_id}}/",
							"host": [
								"{{url}}exams"
							],
							"path": [
								"{{current_exam_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update exam info (3-5)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c34723d3-c0d1-4504-97a2-373088309a5b",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									"",
									"//  Update the next event ID.",
									"var eventNumber = JSON.parse(postman.getEnvironmentVariable(\"event_number\"));",
									"var updateNumber = JSON.parse(postman.getEnvironmentVariable(\"update_number\")) + 1;",
									"var updateEventId = \"pm-up\" + updateNumber.toString() + \"-\" + eventNumber.toString();",
									"postman.setEnvironmentVariable(\"update_number\", updateNumber);",
									"postman.setEnvironmentVariable(\"update_id\", JSON.stringify(updateEventId));",
									"postman.setEnvironmentVariable(\"exam_name\", JSON.stringify(\"PM exam name - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"examinee_name\", JSON.stringify(\"PM examinee - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"notes\", JSON.stringify(\"PM exam notes - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"offsite_location\", JSON.stringify(\"PM offsite location - Update \" + updateNumber.toString()));",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e77f0ca3-62cf-49ba-8e17-67a16e8f8a5f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"event_id\" : {{update_id}},\n    \"exam_method\" : \"paper\",\n    \"exam_name\" : {{exam_name}},\n    \"exam_type_id\" : {{random_exam_type_id}},\n    \"exam_written_ind\" : \"0\",\n    \"examinee_name\" : {{examinee_name}},\n    \"notes\" : {{notes}},\n    \"number_of_students\" : \"119\",\n    \"office_id\" : {{current_office_id}},\n    \"offsite_location\" : {{offsite_location}}\n}"
						},
						"url": {
							"raw": "{{url}}exams/{{current_exam_id}}/",
							"host": [
								"{{url}}exams"
							],
							"path": [
								"{{current_exam_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update exam info (3-6)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c34723d3-c0d1-4504-97a2-373088309a5b",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									"",
									"//  Update the next event ID.",
									"var eventNumber = JSON.parse(postman.getEnvironmentVariable(\"event_number\"));",
									"var updateNumber = JSON.parse(postman.getEnvironmentVariable(\"update_number\")) + 1;",
									"var updateEventId = \"pm-up\" + updateNumber.toString() + \"-\" + eventNumber.toString();",
									"postman.setEnvironmentVariable(\"update_number\", updateNumber);",
									"postman.setEnvironmentVariable(\"update_id\", JSON.stringify(updateEventId));",
									"postman.setEnvironmentVariable(\"exam_name\", JSON.stringify(\"PM exam name - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"examinee_name\", JSON.stringify(\"PM examinee - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"notes\", JSON.stringify(\"PM exam notes - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"offsite_location\", JSON.stringify(\"PM offsite location - Update \" + updateNumber.toString()));",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e77f0ca3-62cf-49ba-8e17-67a16e8f8a5f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"event_id\" : {{update_id}},\n    \"exam_method\" : \"paper\",\n    \"exam_name\" : {{exam_name}},\n    \"exam_type_id\" : {{random_exam_type_id}},\n    \"exam_written_ind\" : \"0\",\n    \"examinee_name\" : {{examinee_name}},\n    \"notes\" : {{notes}},\n    \"number_of_students\" : \"119\",\n    \"office_id\" : {{current_office_id}},\n    \"offsite_location\" : {{offsite_location}}\n}"
						},
						"url": {
							"raw": "{{url}}exams/{{current_exam_id}}/",
							"host": [
								"{{url}}exams"
							],
							"path": [
								"{{current_exam_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update exam info (3-7)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c34723d3-c0d1-4504-97a2-373088309a5b",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									"",
									"//  Update the next event ID.",
									"var eventNumber = JSON.parse(postman.getEnvironmentVariable(\"event_number\"));",
									"var updateNumber = JSON.parse(postman.getEnvironmentVariable(\"update_number\")) + 1;",
									"var updateEventId = \"pm-up\" + updateNumber.toString() + \"-\" + eventNumber.toString();",
									"postman.setEnvironmentVariable(\"update_number\", updateNumber);",
									"postman.setEnvironmentVariable(\"update_id\", JSON.stringify(updateEventId));",
									"postman.setEnvironmentVariable(\"exam_name\", JSON.stringify(\"PM exam name - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"examinee_name\", JSON.stringify(\"PM examinee - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"notes\", JSON.stringify(\"PM exam notes - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"offsite_location\", JSON.stringify(\"PM offsite location - Update \" + updateNumber.toString()));",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e77f0ca3-62cf-49ba-8e17-67a16e8f8a5f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"event_id\" : {{update_id}},\n    \"exam_method\" : \"paper\",\n    \"exam_name\" : {{exam_name}},\n    \"exam_type_id\" : {{random_exam_type_id}},\n    \"exam_written_ind\" : \"0\",\n    \"examinee_name\" : {{examinee_name}},\n    \"notes\" : {{notes}},\n    \"number_of_students\" : \"119\",\n    \"office_id\" : {{current_office_id}},\n    \"offsite_location\" : {{offsite_location}}\n}"
						},
						"url": {
							"raw": "{{url}}exams/{{current_exam_id}}/",
							"host": [
								"{{url}}exams"
							],
							"path": [
								"{{current_exam_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update exam info (3-8)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c34723d3-c0d1-4504-97a2-373088309a5b",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									"",
									"//  Update the next event ID.",
									"var eventNumber = JSON.parse(postman.getEnvironmentVariable(\"event_number\"));",
									"var updateNumber = JSON.parse(postman.getEnvironmentVariable(\"update_number\")) + 1;",
									"var updateEventId = \"pm-up\" + updateNumber.toString() + \"-\" + eventNumber.toString();",
									"postman.setEnvironmentVariable(\"update_number\", updateNumber);",
									"postman.setEnvironmentVariable(\"update_id\", JSON.stringify(updateEventId));",
									"postman.setEnvironmentVariable(\"exam_name\", JSON.stringify(\"PM exam name - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"examinee_name\", JSON.stringify(\"PM examinee - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"notes\", JSON.stringify(\"PM exam notes - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"offsite_location\", JSON.stringify(\"PM offsite location - Update \" + updateNumber.toString()));",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e77f0ca3-62cf-49ba-8e17-67a16e8f8a5f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"event_id\" : {{update_id}},\n    \"exam_method\" : \"paper\",\n    \"exam_name\" : {{exam_name}},\n    \"exam_type_id\" : {{random_exam_type_id}},\n    \"exam_written_ind\" : \"0\",\n    \"examinee_name\" : {{examinee_name}},\n    \"notes\" : {{notes}},\n    \"number_of_students\" : \"119\",\n    \"office_id\" : {{current_office_id}},\n    \"offsite_location\" : {{offsite_location}}\n}"
						},
						"url": {
							"raw": "{{url}}exams/{{current_exam_id}}/",
							"host": [
								"{{url}}exams"
							],
							"path": [
								"{{current_exam_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "List exams",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c34723d3-c0d1-4504-97a2-373088309a5b",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									"",
									"//  Update the next event ID.",
									"var eventNumber = JSON.parse(postman.getEnvironmentVariable(\"event_number\"));",
									"var updateNumber = JSON.parse(postman.getEnvironmentVariable(\"update_number\")) + 1;",
									"var updateEventId = \"pm-up\" + updateNumber.toString() + \"-\" + eventNumber.toString();",
									"postman.setEnvironmentVariable(\"update_number\", updateNumber);",
									"postman.setEnvironmentVariable(\"update_id\", JSON.stringify(updateEventId));",
									"postman.setEnvironmentVariable(\"exam_name\", JSON.stringify(\"PM exam name - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"examinee_name\", JSON.stringify(\"PM examinee - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"notes\", JSON.stringify(\"PM exam notes - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"offsite_location\", JSON.stringify(\"PM offsite locatoin - Update \" + updateNumber.toString()));",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e77f0ca3-62cf-49ba-8e17-67a16e8f8a5f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"event_id\" : {{update_id}},\n    \"exam_method\" : \"paper\",\n    \"exam_name\" : {{exam_name}},\n    \"exam_type_id\" : \"6\",\n    \"exam_written_ind\" : \"0\",\n    \"examinee_name\" : {{examinee_name}},\n    \"notes\" : {{notes}},\n    \"number_of_students\" : \"119\",\n    \"office_id\" : {{current_office_id}},\n    \"offsite_location\" : {{offsite_location}}\n}"
						},
						"url": {
							"raw": "{{url}}exams/?office_number={{current_office_number}}",
							"host": [
								"{{url}}exams"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "office_number",
									"value": "{{current_office_number}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete exam",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0ec5c421-a4af-4424-8201-86864e291f0e",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}exams/{{current_exam_id}}/",
							"host": [
								"{{url}}exams"
							],
							"path": [
								"{{current_exam_id}}",
								""
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Exam 1 test single update",
			"item": [
				{
					"name": "Create exam",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c34723d3-c0d1-4504-97a2-373088309a5b",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									"",
									"//  Get exam type data and functions.",
									"exam_array = JSON.parse(postman.getEnvironmentVariable(\"exam_array_data\"));",
									"eval(environment.create_random_functions);",
									"",
									"//  Create an event number based on the time.",
									"var ms = (new Date().getTime()).toString() + \"00\";",
									"eventNumber = Number(ms.substring(ms.length-6, ms.len)) + 1;",
									"postman.setEnvironmentVariable(\"event_number\", eventNumber);",
									"",
									"//  Update the next event ID.",
									"var eventId = \"pm\" + eventNumber.toString();",
									"postman.setEnvironmentVariable(\"update_number\", 0);",
									"postman.setEnvironmentVariable(\"event_id\", JSON.stringify(eventId));",
									"postman.setEnvironmentVariable(\"event_delete\", eventId);",
									"",
									"//  Calculate a random exam type to use.",
									"random_index = get_random_index(exam_array);",
									"",
									"//  Store for use.",
									"random_exam_type_id = exam_array[random_index].id;",
									"postman.setEnvironmentVariable(\"random_exam_type_id\", JSON.stringify(random_exam_type_id.toString()));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e77f0ca3-62cf-49ba-8e17-67a16e8f8a5f",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.create_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"if (jsonData.hasOwnProperty(\"exam\")) {",
									"\tcurrentExamId = jsonData.exam.exam_id;",
									"    postman.setEnvironmentVariable(\"current_exam_id\", currentExamId);",
									"};",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\n\t\"event_id\" : {{event_id}},\n    \"exam_method\" : \"paper\",\n    \"exam_name\" : \"Postman Group Exam Name\",\n    \"exam_type_id\" : {{random_exam_type_id}},\n    \"exam_written_ind\" : \"0\",\n    \"examinee_name\" : \"Pm examinee name\",\n    \"notes\" : \"Pm sample notes\",\n    \"number_of_students\" : \"19\",\n    \"office_id\" : {{current_office_id}},\n    \"offsite_location\" : \"Pm test location\"\n}"
						},
						"url": {
							"raw": "{{url}}exams/",
							"host": [
								"{{url}}exams"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update exam info",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c34723d3-c0d1-4504-97a2-373088309a5b",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									"",
									"//  Update the next event ID.",
									"var eventNumber = JSON.parse(postman.getEnvironmentVariable(\"event_number\"));",
									"var updateNumber = JSON.parse(postman.getEnvironmentVariable(\"update_number\")) + 1;",
									"var updateEventId = \"pm-up\" + updateNumber.toString() + \"-\" + eventNumber.toString();",
									"postman.setEnvironmentVariable(\"update_number\", updateNumber);",
									"postman.setEnvironmentVariable(\"update_id\", JSON.stringify(updateEventId));",
									"postman.setEnvironmentVariable(\"exam_name\", JSON.stringify(\"PM exam name - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"examinee_name\", JSON.stringify(\"PM examinee - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"notes\", JSON.stringify(\"PM exam notes - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"offsite_location\", JSON.stringify(\"PM offsite location - Update \" + updateNumber.toString()));",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e77f0ca3-62cf-49ba-8e17-67a16e8f8a5f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"event_id\" : {{update_id}},\n    \"exam_method\" : \"paper\",\n    \"exam_name\" : {{exam_name}},\n    \"exam_type_id\" : {{random_exam_type_id}},\n    \"exam_written_ind\" : \"0\",\n    \"examinee_name\" : {{examinee_name}},\n    \"notes\" : {{notes}},\n    \"number_of_students\" : \"119\",\n    \"office_id\" : {{current_office_id}},\n    \"offsite_location\" : {{offsite_location}}\n}"
						},
						"url": {
							"raw": "{{url}}exams/{{current_exam_id}}/",
							"host": [
								"{{url}}exams"
							],
							"path": [
								"{{current_exam_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "List exams",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c34723d3-c0d1-4504-97a2-373088309a5b",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									"",
									"//  Update the next event ID.",
									"var eventNumber = JSON.parse(postman.getEnvironmentVariable(\"event_number\"));",
									"var updateNumber = JSON.parse(postman.getEnvironmentVariable(\"update_number\")) + 1;",
									"var updateEventId = \"pm-up\" + updateNumber.toString() + \"-\" + eventNumber.toString();",
									"postman.setEnvironmentVariable(\"update_number\", updateNumber);",
									"postman.setEnvironmentVariable(\"update_id\", JSON.stringify(updateEventId));",
									"postman.setEnvironmentVariable(\"exam_name\", JSON.stringify(\"PM exam name - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"examinee_name\", JSON.stringify(\"PM examinee - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"notes\", JSON.stringify(\"PM exam notes - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"offsite_location\", JSON.stringify(\"PM offsite location - Update \" + updateNumber.toString()));",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e77f0ca3-62cf-49ba-8e17-67a16e8f8a5f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"event_id\" : {{update_id}},\n    \"exam_method\" : \"paper\",\n    \"exam_name\" : {{exam_name}},\n    \"exam_type_id\" : \"6\",\n    \"exam_written_ind\" : \"0\",\n    \"examinee_name\" : {{examinee_name}},\n    \"notes\" : {{notes}},\n    \"number_of_students\" : \"119\",\n    \"office_id\" : {{current_office_id}},\n    \"offsite_location\" : {{offsite_location}}\n}"
						},
						"url": {
							"raw": "{{url}}exams/?office_number={{current_office_number}}",
							"host": [
								"{{url}}exams"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "office_number",
									"value": "{{current_office_number}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete exam",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0ec5c421-a4af-4424-8201-86864e291f0e",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}exams/{{current_exam_id}}/",
							"host": [
								"{{url}}exams"
							],
							"path": [
								"{{current_exam_id}}",
								""
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Exam 2 test single update",
			"item": [
				{
					"name": "Create exam",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c34723d3-c0d1-4504-97a2-373088309a5b",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									"",
									"//  Get exam type data and functions.",
									"exam_array = JSON.parse(postman.getEnvironmentVariable(\"exam_array_data\"));",
									"eval(environment.create_random_functions);",
									"",
									"//  Create an event number based on the time.",
									"var ms = (new Date().getTime()).toString() + \"00\";",
									"eventNumber = Number(ms.substring(ms.length-6, ms.len)) + 1;",
									"postman.setEnvironmentVariable(\"event_number\", eventNumber);",
									"",
									"//  Update the next event ID.",
									"var eventId = \"pm\" + eventNumber.toString();",
									"postman.setEnvironmentVariable(\"update_number\", 0);",
									"postman.setEnvironmentVariable(\"event_id\", JSON.stringify(eventId));",
									"postman.setEnvironmentVariable(\"event_delete\", eventId);",
									"",
									"//  Calculate a random exam type to use.",
									"random_index = get_random_index(exam_array);",
									"",
									"//  Store for use.",
									"random_exam_type_id = exam_array[random_index].id;",
									"postman.setEnvironmentVariable(\"random_exam_type_id\", JSON.stringify(random_exam_type_id.toString()));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e77f0ca3-62cf-49ba-8e17-67a16e8f8a5f",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.create_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"if (jsonData.hasOwnProperty(\"exam\")) {",
									"\tcurrentExamId = jsonData.exam.exam_id;",
									"    postman.setEnvironmentVariable(\"current_exam_id\", currentExamId);",
									"};",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\n\t\"event_id\" : {{event_id}},\n    \"exam_method\" : \"paper\",\n    \"exam_name\" : \"Postman Group Exam Name\",\n    \"exam_type_id\" : {{random_exam_type_id}},\n    \"exam_written_ind\" : \"0\",\n    \"examinee_name\" : \"Pm examinee name\",\n    \"notes\" : \"Pm sample notes\",\n    \"number_of_students\" : \"19\",\n    \"office_id\" : {{current_office_id}},\n    \"offsite_location\" : \"Pm test location\"\n}"
						},
						"url": {
							"raw": "{{url}}exams/",
							"host": [
								"{{url}}exams"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update exam info",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c34723d3-c0d1-4504-97a2-373088309a5b",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									"",
									"//  Update the next event ID.",
									"var eventNumber = JSON.parse(postman.getEnvironmentVariable(\"event_number\"));",
									"var updateNumber = JSON.parse(postman.getEnvironmentVariable(\"update_number\")) + 1;",
									"var updateEventId = \"pm-up\" + updateNumber.toString() + \"-\" + eventNumber.toString();",
									"postman.setEnvironmentVariable(\"update_number\", updateNumber);",
									"postman.setEnvironmentVariable(\"update_id\", JSON.stringify(updateEventId));",
									"postman.setEnvironmentVariable(\"exam_name\", JSON.stringify(\"PM exam name - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"examinee_name\", JSON.stringify(\"PM examinee - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"notes\", JSON.stringify(\"PM exam notes - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"offsite_location\", JSON.stringify(\"PM offsite location - Update \" + updateNumber.toString()));",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e77f0ca3-62cf-49ba-8e17-67a16e8f8a5f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"event_id\" : {{update_id}},\n    \"exam_method\" : \"paper\",\n    \"exam_name\" : {{exam_name}},\n    \"exam_type_id\" : {{random_exam_type_id}},\n    \"exam_written_ind\" : \"0\",\n    \"examinee_name\" : {{examinee_name}},\n    \"notes\" : {{notes}},\n    \"number_of_students\" : \"119\",\n    \"office_id\" : {{current_office_id}},\n    \"offsite_location\" : {{offsite_location}}\n}"
						},
						"url": {
							"raw": "{{url}}exams/{{current_exam_id}}/",
							"host": [
								"{{url}}exams"
							],
							"path": [
								"{{current_exam_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "List exams",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c34723d3-c0d1-4504-97a2-373088309a5b",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									"",
									"//  Update the next event ID.",
									"var eventNumber = JSON.parse(postman.getEnvironmentVariable(\"event_number\"));",
									"var updateNumber = JSON.parse(postman.getEnvironmentVariable(\"update_number\")) + 1;",
									"var updateEventId = \"pm-up\" + updateNumber.toString() + \"-\" + eventNumber.toString();",
									"postman.setEnvironmentVariable(\"update_number\", updateNumber);",
									"postman.setEnvironmentVariable(\"update_id\", JSON.stringify(updateEventId));",
									"postman.setEnvironmentVariable(\"exam_name\", JSON.stringify(\"PM exam name - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"examinee_name\", JSON.stringify(\"PM examinee - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"notes\", JSON.stringify(\"PM exam notes - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"offsite_location\", JSON.stringify(\"PM offsite location - Update \" + updateNumber.toString()));",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e77f0ca3-62cf-49ba-8e17-67a16e8f8a5f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"event_id\" : {{update_id}},\n    \"exam_method\" : \"paper\",\n    \"exam_name\" : {{exam_name}},\n    \"exam_type_id\" : \"6\",\n    \"exam_written_ind\" : \"0\",\n    \"examinee_name\" : {{examinee_name}},\n    \"notes\" : {{notes}},\n    \"number_of_students\" : \"119\",\n    \"office_id\" : {{current_office_id}},\n    \"offsite_location\" : {{offsite_location}}\n}"
						},
						"url": {
							"raw": "{{url}}exams/?office_number={{current_office_number}}",
							"host": [
								"{{url}}exams"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "office_number",
									"value": "{{current_office_number}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete exam",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0ec5c421-a4af-4424-8201-86864e291f0e",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}exams/{{current_exam_id}}/",
							"host": [
								"{{url}}exams"
							],
							"path": [
								"{{current_exam_id}}",
								""
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Exam 3 test single update",
			"item": [
				{
					"name": "Create exam",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c34723d3-c0d1-4504-97a2-373088309a5b",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									"",
									"//  Get exam type data and functions.",
									"exam_array = JSON.parse(postman.getEnvironmentVariable(\"exam_array_data\"));",
									"eval(environment.create_random_functions);",
									"",
									"//  Create an event number based on the time.",
									"var ms = (new Date().getTime()).toString() + \"00\";",
									"eventNumber = Number(ms.substring(ms.length-6, ms.len)) + 1;",
									"postman.setEnvironmentVariable(\"event_number\", eventNumber);",
									"",
									"//  Update the next event ID.",
									"var eventId = \"pm\" + eventNumber.toString();",
									"postman.setEnvironmentVariable(\"update_number\", 0);",
									"postman.setEnvironmentVariable(\"event_id\", JSON.stringify(eventId));",
									"postman.setEnvironmentVariable(\"event_delete\", eventId);",
									"",
									"//  Calculate a random exam type to use.",
									"random_index = get_random_index(exam_array);",
									"",
									"//  Store for use.",
									"random_exam_type_id = exam_array[random_index].id;",
									"postman.setEnvironmentVariable(\"random_exam_type_id\", JSON.stringify(random_exam_type_id.toString()));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e77f0ca3-62cf-49ba-8e17-67a16e8f8a5f",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.create_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"if (jsonData.hasOwnProperty(\"exam\")) {",
									"\tcurrentExamId = jsonData.exam.exam_id;",
									"    postman.setEnvironmentVariable(\"current_exam_id\", currentExamId);",
									"};",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\n\t\"event_id\" : {{event_id}},\n    \"exam_method\" : \"paper\",\n    \"exam_name\" : \"Postman Group Exam Name\",\n    \"exam_type_id\" : {{random_exam_type_id}},\n    \"exam_written_ind\" : \"0\",\n    \"examinee_name\" : \"Pm examinee name\",\n    \"notes\" : \"Pm sample notes\",\n    \"number_of_students\" : \"19\",\n    \"office_id\" : {{current_office_id}},\n    \"offsite_location\" : \"Pm test location\"\n}"
						},
						"url": {
							"raw": "{{url}}exams/",
							"host": [
								"{{url}}exams"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update exam info",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c34723d3-c0d1-4504-97a2-373088309a5b",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									"",
									"//  Update the next event ID.",
									"var eventNumber = JSON.parse(postman.getEnvironmentVariable(\"event_number\"));",
									"var updateNumber = JSON.parse(postman.getEnvironmentVariable(\"update_number\")) + 1;",
									"var updateEventId = \"pm-up\" + updateNumber.toString() + \"-\" + eventNumber.toString();",
									"postman.setEnvironmentVariable(\"update_number\", updateNumber);",
									"postman.setEnvironmentVariable(\"update_id\", JSON.stringify(updateEventId));",
									"postman.setEnvironmentVariable(\"exam_name\", JSON.stringify(\"PM exam name - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"examinee_name\", JSON.stringify(\"PM examinee - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"notes\", JSON.stringify(\"PM exam notes - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"offsite_location\", JSON.stringify(\"PM offsite location - Update \" + updateNumber.toString()));",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e77f0ca3-62cf-49ba-8e17-67a16e8f8a5f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"event_id\" : {{update_id}},\n    \"exam_method\" : \"paper\",\n    \"exam_name\" : {{exam_name}},\n    \"exam_type_id\" : {{random_exam_type_id}},\n    \"exam_written_ind\" : \"0\",\n    \"examinee_name\" : {{examinee_name}},\n    \"notes\" : {{notes}},\n    \"number_of_students\" : \"119\",\n    \"office_id\" : {{current_office_id}},\n    \"offsite_location\" : {{offsite_location}}\n}"
						},
						"url": {
							"raw": "{{url}}exams/{{current_exam_id}}/",
							"host": [
								"{{url}}exams"
							],
							"path": [
								"{{current_exam_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "List exams",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c34723d3-c0d1-4504-97a2-373088309a5b",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									"",
									"//  Update the next event ID.",
									"var eventNumber = JSON.parse(postman.getEnvironmentVariable(\"event_number\"));",
									"var updateNumber = JSON.parse(postman.getEnvironmentVariable(\"update_number\")) + 1;",
									"var updateEventId = \"pm-up\" + updateNumber.toString() + \"-\" + eventNumber.toString();",
									"postman.setEnvironmentVariable(\"update_number\", updateNumber);",
									"postman.setEnvironmentVariable(\"update_id\", JSON.stringify(updateEventId));",
									"postman.setEnvironmentVariable(\"exam_name\", JSON.stringify(\"PM exam name - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"examinee_name\", JSON.stringify(\"PM examinee - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"notes\", JSON.stringify(\"PM exam notes - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"offsite_location\", JSON.stringify(\"PM offsite location - Update \" + updateNumber.toString()));",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e77f0ca3-62cf-49ba-8e17-67a16e8f8a5f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"event_id\" : {{update_id}},\n    \"exam_method\" : \"paper\",\n    \"exam_name\" : {{exam_name}},\n    \"exam_type_id\" : \"6\",\n    \"exam_written_ind\" : \"0\",\n    \"examinee_name\" : {{examinee_name}},\n    \"notes\" : {{notes}},\n    \"number_of_students\" : \"119\",\n    \"office_id\" : {{current_office_id}},\n    \"offsite_location\" : {{offsite_location}}\n}"
						},
						"url": {
							"raw": "{{url}}exams/?office_number={{current_office_number}}",
							"host": [
								"{{url}}exams"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "office_number",
									"value": "{{current_office_number}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete exam",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0ec5c421-a4af-4424-8201-86864e291f0e",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}exams/{{current_exam_id}}/",
							"host": [
								"{{url}}exams"
							],
							"path": [
								"{{current_exam_id}}",
								""
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}