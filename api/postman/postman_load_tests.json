{
	"info": {
		"_postman_id": "e469c1db-49b0-410f-9aa2-98a26cd089e2",
		"name": "QM-API-LoadTests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Setup",
			"item": [
				{
					"name": "Install Postman BDD",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "34b6afaf-8d76-4adf-a628-2c4ccd57c881",
								"exec": [
									"// If the \"postman_bdd_path\" environment variable is set, then we'll use it.",
									"// Otherwise, we'll default to the published version",
									"if (!globals.postman_bdd_path) {",
									"    //  Original URL from Registries.  Now appears to be blocked from gov't workstations, not from Openshift, however.",
									"    //  postman.setGlobalVariable('postman_bdd_path', 'http://bigstickcarpet.com/postman-bdd/dist/postman-bdd.min.js');",
									"",
									"    //  New link, which appears to work.",
									"    postman.setGlobalVariable('postman_bdd_path', 'https://raw.githubusercontent.com/JamesMessinger/postman-bdd/master/dist/postman-bdd.min.js');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "47e65f0f-09a2-4eda-a006-edfc894218b1",
								"exec": [
									"// \"install\" Postman BDD",
									"postman.setGlobalVariable('postmanBDD', responseBody);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cache-Control",
								"value": "no-cache"
							}
						],
						"url": {
							"raw": "{{postman_bdd_path}}",
							"host": [
								"{{postman_bdd_path}}"
							]
						},
						"description": "This request downloads [Postman BDD](https://github.com/BigstickCarpet/postman-bdd) and then \"installs\" it by setting a global variable\n"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-Auth-First",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5409b66d-67a4-449b-8633-9aeca632b388",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"auth_first\", jsonData.data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "auth_url = globals.auth_url;\nrealm = globals.realm;\nclientid = globals.clientid;\nuserid = environment.userid;\npassword = globals.password;\nclient_secret = globals.client_secret;\n\nconst echoPostRequest = {\n  url: auth_url + '/auth/realms/' + realm + '/protocol/openid-connect/token',\n  method: 'POST',\n  header: 'Content-Type:application/x-www-form-urlencoded',\n  body: {\n    mode: 'raw',\n    raw: 'grant_type=password&client_id=' + clientid \n          + '&username=' + userid \n          + '&password=' + password\n          + '&client_secret=' + client_secret\n  }\n};\npm.sendRequest(echoPostRequest, function (err, res) {\n    var jsonData = res.json();\n    if (jsonData.hasOwnProperty('access_token')) {\n    \tpm.environment.set(\"token\", jsonData.access_token);\n\t    pm.environment.set(\"refresh_token\", jsonData.refresh_token);\n\t    console.log(err ? err : res.json());\n\t} else {\n\t    pm.environment.set(\"token\", 0);\n\t    pm.environment.set(\"refresh_token\", 0);\n\t    pm.environment.set(\"token_expires\", 0);\n\t    pm.environment.set(\"refresh_token_expires\", 0);\n\t}\n});"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-Auth-NonQTxn",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d4115f4c-a05c-4de1-8020-da1181a82656",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"auth_first_nonqtxn\", jsonData.data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "auth_url = globals.auth_url;\nrealm = globals.realm;\nclientid = globals.clientid;\nuserid = environment.userid_nonqtxn;\npassword = globals.password_nonqtxn;\nclient_secret = globals.client_secret;\n\nconst echoPostRequest = {\n  url: auth_url + '/auth/realms/' + realm + '/protocol/openid-connect/token',\n  method: 'POST',\n  header: 'Content-Type:application/x-www-form-urlencoded',\n  body: {\n    mode: 'raw',\n    raw: 'grant_type=password&client_id=' + clientid \n          + '&username=' + userid \n          + '&password=' + password\n          + '&client_secret=' + client_secret\n  }\n};\npm.sendRequest(echoPostRequest, function (err, res) {\n    var jsonData = res.json();\n    if (jsonData.hasOwnProperty('access_token')) {\n    \tpm.environment.set(\"token_nonqtxn\", jsonData.access_token);\n\t    pm.environment.set(\"refresh_token_nonqtxn\", jsonData.refresh_token);\n\t    console.log(err ? err : res.json());\n\t} else {\n\t    pm.environment.set(\"token_nonqtxn\", 0);\n\t    pm.environment.set(\"refresh_token_nonqtxn\", 0);\n\t    pm.environment.set(\"token_expires_nonqtxn\", 0);\n\t    pm.environment.set(\"refresh_token_expires_nonqtxn\", 0);\n\t}\n});"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-Auth-Script",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f386cf22-bb0f-47d9-9c22-cda162ed4375",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"auth_script\", jsonData.data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "auth_url = globals.auth_url;\nrealm = globals.realm;\nclientid = globals.clientid;\nuserid = environment.userid;\npassword = globals.password;\nclient_secret = globals.client_secret;\n"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-AuthToken-Script",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e1d0ab5c-fe6b-4e6d-8778-417ae879cee1",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"auth_token_script\", jsonData.data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "auth_url = globals.auth_url;\nrealm = globals.realm;\nclientid = globals.clientid;\nuserid = environment.userid;\npassword = globals.password;\nclient_secret = globals.client_secret;\n\nconst echoPostRequest = {\n  url: authurl + '/auth/realms/' + realm + '/protocol/openid-connect/token',\n  method: 'POST',\n  header: 'Content-Type:application/x-www-form-urlencoded',\n  body: {\n    mode: 'raw',\n    raw: 'grant_type=password&client_id=' + clientid \n         + '&username=' + userid \n         + '&password=' + password\n         + '&client_secret=' + client_secret\n  }\n};\n\npm.sendRequest(echoPostRequest, function (err, res) {\n    if (err) { console.log(err); }\n    else {\n      var jsonData = res.json();\n      pm.environment.set(\"token\", jsonData.access_token);\n      pm.environment.set(\"refresh_token\", jsonData.refresh_token);\n      pm.environment.set(\"token_expires\", Date.now()+(jsonData.expires_in * 1000));\n      pm.environment.set(\"refresh_token_expires\", Date.now()+(jsonData.refresh_expires_in * 1000));\n    }\n    //console.log(err ? err : res.json());\n});"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-AuthRefresh-Script",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "365727f4-696d-4e44-a379-5eba3001641a",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"auth_refresh_script\", jsonData.data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "auth_url = globals.auth_url;\nrealm = globals.realm;\nclientid = globals.clientid;\nrefresh_token = environment.refresh_token;\nclient_secret = globals.client_secret;\n\nconst echoPostRequest = {\n  url: authurl +'/auth/realms/' +realm + '/protocol/openid-connect/token',\n  method: 'POST',\n  header: 'Content-Type:application/x-www-form-urlencoded',\n  body: {\n    mode: 'raw',\n    raw: 'grant_type=refresh_token&client_id=' + clientid \n         + '&refresh_token=' + refresh_token \n         + '&client_secret=' + client_secret\n  }\n};\n\npm.sendRequest(echoPostRequest, function (err, res) {\n    var jsonData = res.json();\n    pm.environment.set(\"token\", jsonData.access_token);\n    pm.environment.set(\"refresh_token\", jsonData.refresh_token);\n    pm.environment.set(\"token_expires\", Date.now()+(jsonData.expires_in * 1000));\n    pm.environment.set(\"refresh_token_expires\", Date.now()+(jsonData.refresh_expires_in * 1000));\n\n    console.log(err ? err : res.json());\n});"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-Basic-Response-Tests",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a0d8e240-3b40-4654-a32b-bf2e676fdeb9",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"basic_response_test\", jsonData.data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//  Test the authenticate response.\ndescribe('Basic response tests', function() {\n    it('Response time should be below 1500ms', function() {\n        pm.response.responseTime.should.be.below(1500);\n    });\n    it('Response statusCode should be 200 OK', function() {\n        response.should.have.status(200);\n    });\n    it('Response header should have Content-Type of application/json', function() {\n        response.should.have.header('content-type', 'application/json');\n    });\n    it('Response body be in JSON format', function() {\n        response.should.be.json; \n    });\n});\n"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-Complex-Response-Tests",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f006b951-3205-4f21-a315-369f85591929",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"complex_response_test\", jsonData.data);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//  Test the authenticate response.\ndescribe('Complex response tests', function() {\n    it('Response time should be below 25000ms', function() {\n        pm.response.responseTime.should.be.below(25000);\n    });\n    it('Response statusCode should be 200 OK', function() {\n        response.should.have.status(200);\n    });\n    it('Response header should have Content-Type of application/json', function() {\n        response.should.have.header('content-type', 'application/json');\n    });\n    it('Response body be in JSON format', function() {\n        response.should.be.json; \n    });\n});\n"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-Create-Response-Tests",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "382b7b65-d736-4a03-a44a-3891f33b617d",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"create_response_test\", jsonData.data);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//  Test the authenticate response.\ndescribe('Create response tests', function() {\n    it('Response time should be below 20000ms', function() {\n        pm.response.responseTime.should.be.below(20000);\n    });\n    it('Response statusCode should be 201 CREATED', function() {\n        response.should.have.status(201);\n    });\n    it('Response header should have Content-Type of application/json', function() {\n        response.should.have.header('content-type', 'application/json');\n    });\n    it('Response body be in JSON format', function() {\n        response.should.be.json; \n    });\n});"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-Citizen-Response-Tests",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8cebcf78-f5a2-4694-b108-60e146791a78",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"citizen_response_test\", jsonData.data);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "var schema = {\n    \"properties\" : {\n        \"start_time\" : {\n            \"type\" : \"string\"\n        },\n        \"citizen_name\" : {\n            \"type\" : [\"string\", \"null\"]\n        },\n        \"citizen_id\" : {\n            \"type\" : [\"number\", \"object\"]\n        },\n        \"qt_xn_citizen_ind\" : {\n            \"type\" : \"number\"\n        },\n        \"ticket_number\" : {\n            \"type\" : [\"string\", \"null\"]\n        },\n        \"service_reqs\" : {\n            \"type\" : \"array\"\n        },\n        \"office_id\" : {\n            \"type\" : [\"object\", \"number\"]\n        },\n        \"cs\" : {\n            \"type\" : \"object\"\n        },\n        \"citizen_comments\" : {\n            \"type\" : [\"string\", \"null\"]\n        },\n        \n    },\n    \"required\" : [\"start_time\", \"citizen_name\", \"citizen_id\",\n                  \"qt_xn_citizen_ind\", \"ticket_number\", \"service_reqs\",\n                  \"office_id\", \"cs\", \"citizen_comments\"]\n};\n\n//  Declare, initialize variables.\nvar allElements = null;\n\nif (jsonData.hasOwnProperty(\"citizens\")) {\n\tallElements = jsonData.citizens;\n};\n\nif (jsonData.hasOwnProperty(\"citizen\")) {\n\tallElements = [];\n\tallElements.push(jsonData.citizen);\n};\n\nvar elementCount = 0;\n\n//  If there are some citizens, proceed with tests.\nif (allElements !== null) {\n\n    //  Loop to validate schema of each channel, create list of citizen ids.\n    allElements.forEach(function(element) {\n        elementCount ++;\n        var testTitle = \"Citizen (\" + elementCount + \"): \" + element.citizen_id + \" - \";\n        tests[testTitle + \"conforms to schema\"] = tv4.validate(element, schema);\n\n        //  Test the authenticate response.\n        describe(\"--> \" + testTitle + \"fields have valid values\", function() {\n            it('qt_xn_citizen_ind must be 0 or 1', function() {\n                element.qt_xn_citizen_ind.should.be.within(0,1);\n            });\n        });\n    });\n};"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-Service-Response-Tests",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0e6c4264-28b3-4a49-b6bb-1199aef2cb13",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"service_response_test\", jsonData.data);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "var schema = {\n    \"properties\" : {\n        \"sr_id\" : {\n            \"type\" : [\"object\", \"number\"]\n        },\n        \"sr_state\" : {\n            \"type\" : \"object\"\n        },\n        \"periods\" : {\n            \"type\" : \"array\"\n        },\n        \"service\" : {\n            \"type\" : \"object\"\n        },\n        \"citizen\" : {\n            \"type\" : [\"object\", \"number\"]\n        },\n        \"quantity\" : {\n            \"type\" : \"number\"\n        },\n        \"service_id\" : {\n            \"type\" : [\"object\", \"number\"]\n        },\n        \"citizen_id\" : {\n            \"type\" : [\"object\", \"number\"]\n        },\n        \"channel\" : {\n        \t\"type\" : \"object\"\n        },\n        \"channel_id\" : {\n        \t\"type\" : [\"object\", \"number\"]\n        }\n        \n    },\n    \"required\" : [\n    \t\"sr_id\", \"sr_state\", \"periods\", \"service\", \"citizen\", \"quantity\",\n    \t\"service_id\", \"citizen_id\", \"channel\", \"channel_id\"\n    ]\n};\n\n//  Declare, initialize variables.\nvar allElements = null;\n\nif (jsonData.hasOwnProperty(\"service_requests\")) {\n\tallElements = jsonData.service_requests;\n};\n\nif (jsonData.hasOwnProperty(\"service_request\")) {\n    allElements = [];\n\tallElements.push(jsonData.service_request);\n}\n\nvar elementCount = 0;\n\n//  If there are some service requests, proceed with tests.\nif (allElements !== null) {\n\n    //  Loop to validate schema of each service request.\n    allElements.forEach(function(element) {\n        elementCount ++;\n        var testTitle = \"Service Request (\" + elementCount + \"): \" + element.sr_id + \" - \";\n        tests[testTitle + \"conforms to schema\"] = tv4.validate(element, schema);\n    });\n};"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-Get-Active-Citizens-Tests",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8856712d-73ca-4172-89ba-590e8b015c6b",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"get_active_citizens_test\", jsonData.data);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//  Declare and initialize variables.\nvar elementCount = 0;\nvar srCount = 0;\nvar isFirstCitizen = true;\n\n\n//  Loop to create list of active citizen ids.\nallElements.forEach(function(element) {\n    srCount = element.service_reqs.length;\n\n    //  If citizen active, add to the list.\n    if (element.cs.cs_state_name === \"Active\") {\n        //console.log(\"Citizen (\" + elementCount + \") \" + element.citizen_id +\n        //    \" Active: SRCount = \" + srCount);\n        citizenIds.push(element.citizen_id);\n\n        //  Save the first citizen.\n        if (isFirstCitizen) {\n            currentCitizen = element;\n            isFirstCitizen = false;\n        }\n    }\n        \n    //  Increment count.\n    elementCount++;\n});"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				}
			],
			"description": "This folder performs basic authentication features."
		},
		{
			"name": "Check app health",
			"item": [
				{
					"name": "Check healthz driver",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "74adc5ce-caa5-452a-bd96-8ac90a4c11d7",
								"exec": [
									"//  Install postmanBDD",
									"eval(globals.postmanBDD);",
									"",
									"//  Set health response time variable.",
									"max_response_time = 1500;",
									"health_tries = 15;",
									"counter = 1;",
									"postman.setEnvironmentVariable(\"max_response_time\", JSON.stringify(max_response_time));",
									"postman.setEnvironmentVariable(\"health_tries\", JSON.stringify(health_tries));",
									"postman.setEnvironmentVariable(\"health_counter\", JSON.stringify(counter));",
									"",
									"//  Test the health response.",
									"describe('Testing application health Driver: Try ' + counter.toString(), function() {",
									"    it(\"Response should have 'message' property\", function() {",
									"        var jsonData = response.body;",
									"        jsonData.should.have.property('message');",
									"    });",
									"    it(\"Response message should be 'api is healthy'\", function() {",
									"        var jsonData = response.body;",
									"        jsonData.message.should.equal('api is healthy');",
									"    });",
									"});",
									"",
									"//  If response time is OK, proceed to the next test.",
									"if (pm.response.responseTime < max_response_time) {",
									"    postman.setNextRequest(\"Check the readyz endpoint\");",
									"}",
									"    ",
									"//  Response time is too long.  Try again, give pod a chance to spin up.",
									"else {",
									"    postman.setNextRequest(\"Check the healthz endpoint\");",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9e00b481-ef9a-440b-8e83-025fc49026c4",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{url}}healthz/",
							"host": [
								"{{url}}healthz"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Check the healthz endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "74adc5ce-caa5-452a-bd96-8ac90a4c11d7",
								"exec": [
									"//  Install postmanBDD",
									"eval(globals.postmanBDD);",
									"",
									"//  Get and update variables.",
									"max_response_time = JSON.parse(postman.getEnvironmentVariable(\"max_response_time\"));",
									"health_tries = JSON.parse(postman.getEnvironmentVariable(\"health_tries\"));",
									"counter = JSON.parse(postman.getEnvironmentVariable(\"health_counter\")) + 1;",
									"postman.setEnvironmentVariable(\"health_counter\", JSON.stringify(counter));",
									"",
									"//  Test the health response.",
									"describe('Testing application health Endpoint: Try ' + counter.toString(), function() {",
									"    it(\"Response should have 'message' property\", function() {",
									"        var jsonData = response.body;",
									"        jsonData.should.have.property('message');",
									"    });",
									"    it(\"Response message should be 'api is healthy'\", function() {",
									"        var jsonData = response.body;",
									"        jsonData.message.should.equal('api is healthy');",
									"    });",
									"});",
									"",
									"//  If response time is OK, proceed to the next test.",
									"if (pm.response.responseTime < max_response_time) {",
									"    postman.setNextRequest(\"Check the readyz endpoint\");",
									"}",
									"    ",
									"//  Response time is too long.",
									"else {",
									"    ",
									"    //  You haven't reached your maximum tries yet.  Try again.",
									"    if (counter < health_tries) {",
									"        postman.setNextRequest(\"Check the healthz endpoint\");",
									"    }",
									"    ",
									"    //   You have reached the maximum.  An error, go to next test.",
									"    else {",
									"        describe('Health response should be below ' + max_response_time.toString() + ' in ' + health_tries.toString() + ' tries.', function() {",
									"            it('Response time should be OK', function() {",
									"                (health_tries).should.be.below(health_tries);",
									"               response.should.equal(23); ",
									"            });",
									"        });",
									"        postman.setNextRequest(\"Check the readyz endpoint\");",
									"    }",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9e00b481-ef9a-440b-8e83-025fc49026c4",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{url}}healthz/",
							"host": [
								"{{url}}healthz"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Check the readyz endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "661c33c4-4a3d-4396-a549-9969edafbfa6",
								"exec": [
									"//  Install postmanBDD",
									"eval(globals.postmanBDD);",
									"",
									"//  Perform the standard tests.",
									"eval(environment.basic_response_test);",
									"",
									"//  Test the authenticate response.",
									"describe('Testing application readiness', function() {",
									"    it(\"Response should have 'message' property\", function() {",
									"        var jsonData = response.body;",
									"        jsonData.should.have.property('message');",
									"    });",
									"    it(\"Response message should be 'api is healthy'\", function() {",
									"        var jsonData = response.body;",
									"        jsonData.message.should.equal('api is ready');",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9e00b481-ef9a-440b-8e83-025fc49026c4",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{url}}readyz/",
							"host": [
								"{{url}}readyz"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				}
			],
			"description": "Checks the application health by calling the healthz and readyz endpoints"
		},
		{
			"name": "Check user login",
			"item": [
				{
					"name": "Authenticate user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "43df8e47-2b93-48b0-a5ff-bb3396d12537",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD",
									"eval(globals.postmanBDD);",
									"",
									"//  Test the authenticate response.",
									"describe('Testing authentication ' + pm.environment.get(\"userid\"), function() {",
									"    it('Response time should be below 5000ms', function() {",
									"        pm.response.responseTime.should.be.below(5000);",
									"    });",
									"   it('Response statusCode should be 200', function() {",
									"     response.should.have.status(200);",
									"   });",
									"   it('Response header should have Content-Type of application/json', function() {",
									"    response.should.have.header('content-type', 'application/json');",
									"   });",
									"   it('Response body be in JSON format', function() {",
									"      response.should.be.json; ",
									"   });",
									"   it(\"Response should have expected properties\", function() {",
									"       var jsonData = response.body;",
									"       jsonData.should.have.property('access_token');",
									"       jsonData.should.have.property('refresh_token');",
									"       jsonData.should.have.property('expires_in');",
									"       jsonData.should.have.property('refresh_expires_in');",
									"   });",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"token\", jsonData.access_token);",
									"pm.environment.set(\"refresh_token\", jsonData.refresh_token);",
									"pm.environment.set(\"token_expires\", Date.now()+(jsonData.expires_in * 1000));",
									"pm.environment.set(\"refresh_token_expires\", Date.now()+(jsonData.refresh_expires_in * 1000));",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "grant_type=password&client_id={{clientid}}&username={{userid}}&password={{password}}&client_secret={{client_secret}}"
						},
						"url": {
							"raw": "{{auth_url}}/auth/realms/{{realm}}/protocol/openid-connect/token?Content-Type=application/x-www-form-urlencoded",
							"host": [
								"{{auth_url}}"
							],
							"path": [
								"auth",
								"realms",
								"{{realm}}",
								"protocol",
								"openid-connect",
								"token"
							],
							"query": [
								{
									"key": "Content-Type",
									"value": "application/x-www-form-urlencoded"
								}
							]
						},
						"description": "Make sure the operator ID can log in"
					},
					"response": []
				}
			]
		},
		{
			"name": "Check channels",
			"item": [
				{
					"name": "Get channels",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2b71673c-4aa2-47b3-8594-15f02b390ee0",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "42742c4c-505d-472d-857b-fdba74cc49ac",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run basic tests.",
									"eval(environment.basic_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"properties\" : {",
									"        \"channel_name\" : {",
									"            \"type\" : \"string\"",
									"        },",
									"        \"channel_id\" : {",
									"            \"type\" : [\"number\", \"object\"]",
									"        }",
									"    },",
									"    \"required\" : [\"channel_name\", \"channel_id\"]",
									"};",
									"",
									"//  Loop to validate schema of each channel.",
									"var allChannels = jsonData.channels;",
									"var channelCount = 0;",
									"var phoneId = 0;",
									"var emailId = 0;",
									"var phoneText = \"Phone\";",
									"var emailText = \"Email/Fax/Mail\"",
									"allChannels.forEach(function(channel) {",
									"    channelCount ++;",
									"    var testTitle = \"Channel (\" + channelCount + \"): ID \" + channel.channel_id + \" Name \" + channel.channel_name + \" conforms to schema\";",
									"    tests[testTitle] = tv4.validate(channel, schema);",
									"    if (channel.channel_name === phoneText) {",
									"        phoneId = channel.channel_id;",
									"    }",
									"    if (channel.channel_name === emailText) {",
									"        emailId = channel.channel_id;",
									"    }",
									"});",
									"",
									"//  Check that you found the phone ID.",
									"describe(\"Found the two channel IDs\", function() {",
									"    it(phoneText + ' id was ' + phoneId + ' (should not equal to 0)', function() {",
									"        phoneId.should.not.be.eql(0);",
									"    });",
									"    it(emailText + ' id was ' + emailId + ' (should not equal to 0)', function() {",
									"        emailId.should.not.be.eql(0);",
									"    });",
									"});",
									"",
									"//  Store this ID for future use.",
									"postman.setEnvironmentVariable(\"channel_telephone_id\", JSON.stringify(phoneId));",
									"postman.setEnvironmentVariable(\"channel_email_id\", JSON.stringify(emailId));"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{url}}channels/",
							"host": [
								"{{url}}channels"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				}
			]
		},
		{
			"name": "Check categories",
			"item": [
				{
					"name": "Get categories",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e99f23ee-5a03-43d9-9075-75dbf06aadcc",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1a9c9ff5-8475-4dd2-a6c7-ffb5d4689145",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run basic tests.",
									"eval(environment.basic_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"properties\" : {",
									"        \"display_dashboard_ind\" : {",
									"            \"type\" : \"number\"",
									"        },",
									"        \"deleted\" : {",
									"            \"type\" : [\"object\", \"null\"]",
									"        },",
									"        \"actual_service_ind\" : {",
									"            \"type\" : \"number\"",
									"        },",
									"        \"service_id\" : {",
									"            \"type\" : [\"number\", \"object\"]",
									"        },",
									"        \"service_code\" : {",
									"            \"type\" : \"string\"",
									"        },",
									"        \"prefix\" : {",
									"            \"type\" : \"string\"",
									"        },",
									"        \"service_name\" : {",
									"            \"type\" : \"string\"",
									"        },",
									"        \"parent_id\" : {",
									"            \"type\" : [\"object\", \"null\" ]",
									"        },",
									"        \"service_desc\" : {",
									"            \"type\" : \"string\"",
									"        }",
									"    },",
									"    \"required\" : [\"display_dashboard_ind\", \"deleted\", \"actual_service_ind\", \"service_id\", \"service_code\",",
									"                  \"prefix\", \"service_name\", \"parent_id\", \"service_desc\"]",
									"};",
									"",
									"//  Loop to validate schema of each channel.",
									"var allCategories = jsonData.categories;",
									"var categoryCount = 0;",
									"allCategories.forEach(function(category) {",
									"    categoryCount ++;",
									"    var testTitle = \"Category (\" + categoryCount + \"): \" + category.service_name + \" - \";",
									"    tests[testTitle + \"conforms to schema\"] = tv4.validate(category, schema);",
									"    ",
									"    //  Test the authenticate response.",
									"    describe(\"--> \" + testTitle + \"fields have valid values\", function() {",
									"        it('display_dashboard_ind must be 0', function() {",
									"            category.display_dashboard_ind.should.be.eql(0);",
									"        });",
									"        it('actual_service_ind for categories must be 0', function() {",
									"            category.actual_service_ind.should.be.eql(0);",
									"        });",
									"        it('parent_id for categories must be null', function() {",
									"            (category.parent_id === null).should.be.eql(true);",
									"        });",
									"    });",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{url}}categories/",
							"host": [
								"{{url}}categories"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				}
			]
		},
		{
			"name": "Check services",
			"item": [
				{
					"name": "Get services",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d01c3826-dc28-4cce-957b-ec70d0393e7e",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3b11031e-4031-4569-91f2-49e23517ffee",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run basic tests.",
									"eval(environment.basic_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"properties\" : {",
									"        \"display_dashboard_ind\" : {",
									"            \"type\" : \"number\"",
									"        },",
									"        \"deleted\" : {",
									"            \"type\" : [\"object\", \"null\"]",
									"        },",
									"        \"actual_service_ind\" : {",
									"            \"type\" : \"number\"",
									"        },",
									"        \"service_id\" : {",
									"            \"type\" : [\"number\", \"object\"]",
									"        },",
									"        \"service_code\" : {",
									"            \"type\" : \"string\"",
									"        },",
									"        \"prefix\" : {",
									"            \"type\" : \"string\"",
									"        },",
									"        \"service_name\" : {",
									"            \"type\" : \"string\"",
									"        },",
									"        \"parent_id\" : {",
									"            \"type\" : [\"object\", \"number\", \"null\" ]",
									"        },",
									"        \"service_desc\" : {",
									"            \"type\" : \"string\"",
									"        }",
									"    },",
									"    \"required\" : [\"display_dashboard_ind\", \"deleted\", \"actual_service_ind\", \"service_id\", \"service_code\",",
									"                  \"prefix\", \"service_name\", \"parent_id\", \"service_desc\"]",
									"};",
									"",
									"//  Loop to validate schema of each channel.",
									"var allElements = jsonData.services;",
									"var elementCount = 0;",
									"var elementMax = Math.min(10, allElements.length);",
									"//allElements.forEach(function(element) {",
									"for (var currentElement = 0; currentElement < elementMax; currentElement++) {",
									"    element = allElements[currentElement];",
									"    elementCount ++;",
									"    var testTitle = \"Service (\" + elementCount + \"): \" + element.service_name + \" - \";",
									"    tests[testTitle + \"conforms to schema\"] = tv4.validate(element, schema);",
									"    ",
									"    //  Test the authenticate response.",
									"    describe(\"--> \" + testTitle + \"fields have valid values\", function() {",
									"        it('display_dashboard_ind must be 0 or 1', function() {",
									"            element.display_dashboard_ind.should.be.within(0,1);",
									"        });",
									"        it('actual_service_ind for services must be 1', function() {",
									"            //  Test for only returning services.",
									"            element.actual_service_ind.should.be.eql(1);",
									"            //  Test for returning services and categories.",
									"            // element.actual_service_ind.should.be.within(0,1);",
									"        });",
									"        //  Test for only returning services",
									"        it('parent_id for categories must not be null', function() {",
									"            (element.parent_id === null).should.be.eql(false);",
									"        });",
									"    });",
									"//});",
									"}",
									"",
									"//  Declare and initialize variables.",
									"var mspId = 0;",
									"var taxId = 0;",
									"var mspText = \"Payment - MSP\";",
									"var propTaxText = \"Other - PTAX\";",
									"",
									"//  Look for the MSP and Property Tax IDs.",
									"allElements.forEach(function(element) {",
									"    if (element.service_name === mspText) {",
									"        mspId = element.service_id;",
									"    }",
									"    if (element.service_name === propTaxText) {",
									"        taxId = element.service_id;",
									"    }",
									"});",
									"",
									"//  Check that you found these IDs.",
									"describe(\"Found the MSP and Property Tax IDs\", function() {",
									"    ",
									"    it(mspText + ' id was found (was ' + mspId + ', should not equal to 0)', function() {",
									"        mspId.should.not.be.eql(0);",
									"    });",
									"    it(propTaxText + ' id was found (was ' + taxId + ', should not equal to 0)', function() {",
									"        taxId.should.not.be.eql(0);",
									"    });",
									"});",
									"",
									"//  Store these IDs for future use.",
									"postman.setEnvironmentVariable(\"service_MSP_id\", JSON.stringify(mspId));",
									"postman.setEnvironmentVariable(\"service_PropTax_id\", JSON.stringify(taxId));"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{url}}services/",
							"host": [
								"{{url}}services"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				}
			]
		},
		{
			"name": "Check citizen through queue",
			"item": [
				{
					"name": "Create citizen",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7896261d-7d88-4eba-860b-98472655c4a7",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.create_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for one added citizen, correct initial values\", function() {",
									"        it('citizen_name must be null', function() {",
									"            (!currentCitizen.citizen_name).should.be.eql(true);",
									"        });",
									"        it('citizen_comments must be null', function() {",
									"            (!currentCitizen.citizen_comments).should.be.eql(true);",
									"        });",
									"        it('service_reqs must empty (no service requests)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(0);",
									"        });",
									"    });",
									"",
									"    //  Store the ID of the citizen just created.",
									"    postman.setEnvironmentVariable(\"current_client\", JSON.stringify(citizenIds.shift()));",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}citizens/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Edit specific citizen",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b72e7756-5de1-4a13-9609-8917ea63dee7",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									"",
									"// //  Get data, create JSON body.",
									"// var citizenName = postman.getEnvironmentVariable(\"citizen_name\");",
									"// var citizenComments = postman.getEnvironmentVariable(\"citizen_comment\");",
									"// var bodyData = {",
									"//     \"citizen_name\" : citizenName,",
									"//     \"citizen_comments\" : citizenComments",
									"// }",
									"",
									"// //  Store the data in an environment variable.",
									"// postman.setEnvironmentVariable(\"putBody\", JSON.stringify(bodyData));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "73110fdd-6476-403d-b6c9-c108032fbd66",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for correct citizen updates\", function() {",
									"        it('citizen_id must equal \"' + currentCitizenId + '\"', function() {",
									"            (currentCitizen.citizen_id).should.be.eql(currentCitizenId);",
									"        });",
									"        it('citizen_name must equal \"' + citizenName + '\"', function() {",
									"            (currentCitizen.citizen_name).should.be.eql(citizenName);",
									"        });",
									"        it('citizen_comment must equal \"' + citizenComment + '\"', function() {",
									"            (currentCitizen.citizen_comments).should.be.eql(citizenComment);",
									"        });",
									"        it('service_reqs must empty (no service requests)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(0);",
									"        });",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"citizen_name\" : {{citizen_name}},\n    \"citizen_comments\" : {{citizen_comment}}\n}"
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Add property tax via phone service request",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fa6f6a3b-e4e7-42b6-a8d3-ecda3840418a",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.create_response_test);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"service_request\" : {\n\t\t\"service_id\" : {{service_PropTax_id}},\n\t\t\"citizen_id\" : {{current_client}},\n\t\t\"quantity\" : {{citizen_quantity}},\n\t\t\"channel_id\" : {{channel_telephone_id}}\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}service_requests/",
							"host": [
								"{{url}}service_requests"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "List specific citizen",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "66ca9683-be00-478b-92c0-6ac698d9088b",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for correct service updates\", function() {",
									"        it('Must be one active citizen in the office', function() {",
									"            citizenIds.length.should.be.eql(1);",
									"        });",
									"        it('citizen_id must equal \"' + currentCitizenId + '\"', function() {",
									"            (currentCitizen.citizen_id).should.be.eql(currentCitizenId);",
									"        });",
									"        it('citizen_name must equal \"' + citizenName + '\"', function() {",
									"            (currentCitizen.citizen_name).should.be.eql(citizenName);",
									"        });",
									"        it('citizen_comment must equal \"' + citizenComment + '\"', function() {",
									"            (currentCitizen.citizen_comments).should.be.eql(citizenComment);",
									"        });",
									"        it('service_reqs length must be 1 (single service request)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(1);",
									"        });",
									"        it('service_reqs state must be \"Active\"', function() {",
									"            (currentCitizen.service_reqs[0].sr_state.sr_code).should.be.eql(\"Active\");",
									"        });",
									"        it('service_reqs service must be ' + citizenService, function() {",
									"            (currentCitizen.service_reqs[0].service_id).should.be.eql(citizenService);",
									"        });",
									"        it('service_reqs quantity must be ' + citizenQuantity, function() {",
									"            (currentCitizen.service_reqs[0].quantity).should.be.eql(citizenQuantity);",
									"        });",
									"        it('service_reqs periods length must be 1 (single period)', function() {",
									"            (currentCitizen.service_reqs[0].periods.length).should.be.eql(1);",
									"        });",
									"        it('service_reqs periods channel must be ' + citizenChannel, function() {",
									"            (currentCitizen.service_reqs[0].channel_id).should.be.eql(citizenChannel);",
									"        });",
									"        it('service_reqs periods state must be \"Ticket Creation\"', function() {",
									"            (currentCitizen.service_reqs[0].periods[0].ps.ps_name).should.be.eql(\"Ticket Creation\");",
									"        });",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Add citizen to queue",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8a294876-edfa-4d5b-ada4-399f5339cd8f",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for correct service updates\", function() {",
									"        it('Must be one active citizen in the office', function() {",
									"            citizenIds.length.should.be.eql(1);",
									"        });",
									"        it('citizen_id must equal \"' + currentCitizenId + '\"', function() {",
									"            (currentCitizen.citizen_id).should.be.eql(currentCitizenId);",
									"        });",
									"        it('citizen_name must equal \"' + citizenName + '\"', function() {",
									"            (currentCitizen.citizen_name).should.be.eql(citizenName);",
									"        });",
									"        it('citizen_comment must equal \"' + citizenComment + '\"', function() {",
									"            (currentCitizen.citizen_comments).should.be.eql(citizenComment);",
									"        });",
									"        it('service_reqs length must be 1 (single service request)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(1);",
									"        });",
									"        it('service_reqs state must be \"Pending\"', function() {",
									"            (currentCitizen.service_reqs[0].sr_state.sr_code).should.be.eql(\"Pending\");",
									"        });",
									"        it('service_reqs service must be ' + citizenService, function() {",
									"            (currentCitizen.service_reqs[0].service_id).should.be.eql(citizenService);",
									"        });",
									"        it('service_reqs quantity must be ' + citizenQuantity, function() {",
									"            (currentCitizen.service_reqs[0].quantity).should.be.eql(citizenQuantity);",
									"        });",
									"        it('service_reqs periods length must be 2 (now two periods)', function() {",
									"            (allPeriods.length).should.be.eql(2);",
									"        });",
									"        it('must only be one open period', function() {",
									"            openPeriodCount.should.be.eql(1);",
									"        });",
									"        it('open period state must be \"Waiting\"', function() {",
									"            openPeriod.ps.ps_name.should.be.eql(\"Waiting\");",
									"        });",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/add_to_queue/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"add_to_queue",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Invite specific citizen",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8e9cd1ef-a5d9-4f81-b061-f818d4fc5603",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for correct service updates\", function() {",
									"        it('Must be one active citizen in the office', function() {",
									"            citizenIds.length.should.be.eql(1);",
									"        });",
									"        it('citizen_id must equal \"' + currentCitizenId + '\"', function() {",
									"            (currentCitizen.citizen_id).should.be.eql(currentCitizenId);",
									"        });",
									"        it('citizen_name must equal \"' + citizenName + '\"', function() {",
									"            (currentCitizen.citizen_name).should.be.eql(citizenName);",
									"        });",
									"        it('citizen_comment must equal \"' + citizenComment + '\"', function() {",
									"            (currentCitizen.citizen_comments).should.be.eql(citizenComment);",
									"        });",
									"        it('service_reqs length must be 1 (single service request)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(1);",
									"        });",
									"        it('service_reqs state must be \"Active\"', function() {",
									"            (currentCitizen.service_reqs[0].sr_state.sr_code).should.be.eql(\"Active\");",
									"        });",
									"        it('service_reqs service must be ' + citizenService, function() {",
									"            (currentCitizen.service_reqs[0].service_id).should.be.eql(citizenService);",
									"        });",
									"        it('service_reqs quantity must be ' + citizenQuantity, function() {",
									"            (currentCitizen.service_reqs[0].quantity).should.be.eql(citizenQuantity);",
									"        });",
									"        it('service_reqs periods length must be 3 (now three periods)', function() {",
									"            (allPeriods.length).should.be.eql(3);",
									"        });",
									"        it('must only be one open period', function() {",
									"            openPeriodCount.should.be.eql(1);",
									"        });",
									"        it('open period state must be \"Invited\"', function() {",
									"            openPeriod.ps.ps_name.should.be.eql(\"Invited\");",
									"        });",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/invite/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"invite",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Begin serving citizen",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1b1f7f66-04cd-4f10-bfa2-c4f3fffe8715",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for correct service updates\", function() {",
									"        it('Must be one active citizen in the office', function() {",
									"            citizenIds.length.should.be.eql(1);",
									"        });",
									"        it('citizen_id must equal \"' + currentCitizenId + '\"', function() {",
									"            (currentCitizen.citizen_id).should.be.eql(currentCitizenId);",
									"        });",
									"        it('citizen_name must equal \"' + citizenName + '\"', function() {",
									"            (currentCitizen.citizen_name).should.be.eql(citizenName);",
									"        });",
									"        it('citizen_comment must equal \"' + citizenComment + '\"', function() {",
									"            (currentCitizen.citizen_comments).should.be.eql(citizenComment);",
									"        });",
									"        it('service_reqs length must be 1 (single service request)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(1);",
									"        });",
									"        it('service_reqs state must be \"Active\"', function() {",
									"            (currentCitizen.service_reqs[0].sr_state.sr_code).should.be.eql(\"Active\");",
									"        });",
									"        it('service_reqs service must be ' + citizenService, function() {",
									"            (currentCitizen.service_reqs[0].service_id).should.be.eql(citizenService);",
									"        });",
									"        it('service_reqs quantity must be ' + citizenQuantity, function() {",
									"            (currentCitizen.service_reqs[0].quantity).should.be.eql(citizenQuantity);",
									"        });",
									"        it('service_reqs periods length must be 4 (now four periods)', function() {",
									"            (allPeriods.length).should.be.eql(4);",
									"        });",
									"        it('must only be one open period', function() {",
									"            openPeriodCount.should.be.eql(1);",
									"        });",
									"        it('open period state must be \"Being Served\"', function() {",
									"            openPeriod.ps.ps_name.should.be.eql(\"Being Served\");",
									"        });",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/begin_service/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"begin_service",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Finish serving citizen",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "818713b9-18a0-4fef-9c16-f71b43dd2ad0",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = jsonData.citizen;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for correct service updates\", function() {",
									"        it('Must be no active citizens in the office', function() {",
									"            citizenIds.length.should.be.eql(0);",
									"        });",
									"        it('citizen_id must equal \"' + currentCitizenId + '\"', function() {",
									"            (currentCitizen.citizen_id).should.be.eql(currentCitizenId);",
									"        });",
									"        it('citizen_name must equal \"' + citizenName + '\"', function() {",
									"            (currentCitizen.citizen_name).should.be.eql(citizenName);",
									"        });",
									"        it('citizen_comment must be null on service completion ', function() {",
									"            var newshould = chai.should();",
									"            newshould.equal(currentCitizen.citizen_comments, null);",
									"        });",
									"        it('service_reqs length must be 1 (single service request)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(1);",
									"        });",
									"        it('service_reqs state must be \"Complete\"', function() {",
									"            (currentCitizen.service_reqs[0].sr_state.sr_code).should.be.eql(\"Complete\");",
									"        });",
									"        it('service_reqs service must be ' + citizenService, function() {",
									"            (currentCitizen.service_reqs[0].service_id).should.be.eql(citizenService);",
									"        });",
									"        it('service_reqs quantity must be ' + citizenQuantity, function() {",
									"            (currentCitizen.service_reqs[0].quantity).should.be.eql(citizenQuantity);",
									"        });",
									"        it('service_reqs periods length must be 4 (still four periods)', function() {",
									"            (allPeriods.length).should.be.eql(4);",
									"        });",
									"        it('must be no open periods (service is complete', function() {",
									"            openPeriodCount.should.be.eql(0);",
									"        });",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/finish_service/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"finish_service",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				}
			]
		},
		{
			"name": "Check citizen begin-hold-finish",
			"item": [
				{
					"name": "Create citizen",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e77d15de-91e2-4528-87bd-5734405b4def",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.create_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for one added citizen, correct initial values\", function() {",
									"        it('Only one citizen should be created', function() {",
									"            citizenIds.length.should.be.eql(1);",
									"        });",
									"        it('citizen_name must be null', function() {",
									"            (!currentCitizen.citizen_name).should.be.eql(true);",
									"        });",
									"        it('citizen_comments must be null', function() {",
									"            (!currentCitizen.citizen_comments).should.be.eql(true);",
									"        });",
									"        it('service_reqs must empty (no service requests)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(0);",
									"        });",
									"    });",
									"",
									"    //  Store the ID of the citizen just created.",
									"    postman.setEnvironmentVariable(\"current_client\", JSON.stringify(citizenIds.shift()));",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}citizens/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Edit specific citizen",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ce732be5-38a3-4825-90d1-4d52babf8917",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									"",
									"// //  Get data, create JSON body.",
									"// var citizenName = postman.getEnvironmentVariable(\"citizen_name\");",
									"// var citizenComments = postman.getEnvironmentVariable(\"citizen_comment\");",
									"// var bodyData = {",
									"//     \"citizen_name\" : citizenName,",
									"//     \"citizen_comments\" : citizenComments",
									"// }",
									"",
									"// //  Store the data in an environment variable.",
									"// postman.setEnvironmentVariable(\"putBody\", JSON.stringify(bodyData));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "13828662-748d-4b3f-9ead-454e795f1f01",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for correct citizen information applied\", function() {",
									"        it('citizen_id must equal \"' + currentCitizenId + '\"', function() {",
									"            (currentCitizen.citizen_id).should.be.eql(currentCitizenId);",
									"        });",
									"        it('citizen_name must equal \"' + citizenName + '\"', function() {",
									"            (currentCitizen.citizen_name).should.be.eql(citizenName);",
									"        });",
									"        it('citizen_comment must equal \"' + citizenComment + '\"', function() {",
									"            (currentCitizen.citizen_comments).should.be.eql(citizenComment);",
									"        });",
									"        it('service_reqs must empty (no service requests)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(0);",
									"        });",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"citizen_name\" : {{citizen_name}},\n    \"citizen_comments\" : {{citizen_comment}}\n}"
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Add property tax via phone service request",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fa6f6a3b-e4e7-42b6-a8d3-ecda3840418a",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.create_response_test);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"service_request\" : {\n\t\t\"service_id\" : {{service_PropTax_id}},\n\t\t\"citizen_id\" : {{current_client}},\n\t\t\"quantity\" : {{citizen_quantity}},\n\t\t\"channel_id\" : {{channel_telephone_id}}\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}service_requests/",
							"host": [
								"{{url}}service_requests"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "List specific citizen",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2a57d1b2-9d0c-4e07-ad20-d4dde457f9d1",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for correct service applied\", function() {",
									"        it('citizen_id must equal \"' + currentCitizenId + '\"', function() {",
									"            (currentCitizen.citizen_id).should.be.eql(currentCitizenId);",
									"        });",
									"        it('citizen_name must equal \"' + citizenName + '\"', function() {",
									"            (currentCitizen.citizen_name).should.be.eql(citizenName);",
									"        });",
									"        it('citizen_comment must equal \"' + citizenComment + '\"', function() {",
									"            (currentCitizen.citizen_comments).should.be.eql(citizenComment);",
									"        });",
									"        it('service_reqs length must be 1 (single service request)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(1);",
									"        });",
									"        it('service_reqs state must be \"Active\"', function() {",
									"            (currentCitizen.service_reqs[0].sr_state.sr_code).should.be.eql(\"Active\");",
									"        });",
									"        it('service_reqs service must be ' + citizenService, function() {",
									"            (currentCitizen.service_reqs[0].service_id).should.be.eql(citizenService);",
									"        });",
									"        it('service_reqs quantity must be ' + citizenQuantity, function() {",
									"            (currentCitizen.service_reqs[0].quantity).should.be.eql(citizenQuantity);",
									"        });",
									"        it('service_reqs periods length must be 1 (single period)', function() {",
									"            (currentCitizen.service_reqs[0].periods.length).should.be.eql(1);",
									"        });",
									"        it('service_reqs periods channel must be ' + citizenChannel, function() {",
									"            (currentCitizen.service_reqs[0].channel_id).should.be.eql(citizenChannel);",
									"        });",
									"        it('service_reqs periods state must be \"Ticket Creation\"', function() {",
									"            (currentCitizen.service_reqs[0].periods[0].ps.ps_name).should.be.eql(\"Ticket Creation\");",
									"        });",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Begin serving citizen",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4550a6b7-560d-48bf-bfc9-41453a8defec",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for begin serving citizen\", function() {",
									"        it('Must be one active citizen in the office', function() {",
									"            citizenIds.length.should.be.eql(1);",
									"        });",
									"        it('citizen_id must equal \"' + currentCitizenId + '\"', function() {",
									"            (currentCitizen.citizen_id).should.be.eql(currentCitizenId);",
									"        });",
									"        it('citizen_name must equal \"' + citizenName + '\"', function() {",
									"            (currentCitizen.citizen_name).should.be.eql(citizenName);",
									"        });",
									"        it('citizen_comment must equal \"' + citizenComment + '\"', function() {",
									"            (currentCitizen.citizen_comments).should.be.eql(citizenComment);",
									"        });",
									"        it('service_reqs length must be 1 (single service request)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(1);",
									"        });",
									"        it('service_reqs state must be \"Active\"', function() {",
									"            (currentCitizen.service_reqs[0].sr_state.sr_code).should.be.eql(\"Active\");",
									"        });",
									"        it('service_reqs service must be ' + citizenService, function() {",
									"            (currentCitizen.service_reqs[0].service_id).should.be.eql(citizenService);",
									"        });",
									"        it('service_reqs quantity must be ' + citizenQuantity, function() {",
									"            (currentCitizen.service_reqs[0].quantity).should.be.eql(citizenQuantity);",
									"        });",
									"        it('service_reqs periods length must be 2 (now two periods)', function() {",
									"            (allPeriods.length).should.be.eql(2);",
									"        });",
									"        it('must only be one open period', function() {",
									"            openPeriodCount.should.be.eql(1);",
									"        });",
									"        it('open period state must be \"Being Served\"', function() {",
									"            openPeriod.ps.ps_name.should.be.eql(\"Being Served\");",
									"        });",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/begin_service/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"begin_service",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Place citizen on hold",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "dd51a48d-2e1e-47fd-978f-507b77a7901f",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for citizen on hold\", function() {",
									"        it('Must be one active citizen in the office', function() {",
									"            citizenIds.length.should.be.eql(1);",
									"        });",
									"        it('citizen_id must equal \"' + currentCitizenId + '\"', function() {",
									"            (currentCitizen.citizen_id).should.be.eql(currentCitizenId);",
									"        });",
									"        it('citizen_name must equal \"' + citizenName + '\"', function() {",
									"            (currentCitizen.citizen_name).should.be.eql(citizenName);",
									"        });",
									"        it('citizen_comment must equal \"' + citizenComment + '\"', function() {",
									"            (currentCitizen.citizen_comments).should.be.eql(citizenComment);",
									"        });",
									"        it('service_reqs length must be 1 (single service request)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(1);",
									"        });",
									"        it('service_reqs state must be \"Active\"', function() {",
									"            (currentCitizen.service_reqs[0].sr_state.sr_code).should.be.eql(\"Active\");",
									"        });",
									"        it('service_reqs service must be ' + citizenService, function() {",
									"            (currentCitizen.service_reqs[0].service_id).should.be.eql(citizenService);",
									"        });",
									"        it('service_reqs quantity must be ' + citizenQuantity, function() {",
									"            (currentCitizen.service_reqs[0].quantity).should.be.eql(citizenQuantity);",
									"        });",
									"        it('service_reqs periods length must be 3 (now three periods)', function() {",
									"            (allPeriods.length).should.be.eql(3);",
									"        });",
									"        it('must only be one open period', function() {",
									"            openPeriodCount.should.be.eql(1);",
									"        });",
									"        it('open period state must be \"On hold\"', function() {",
									"            openPeriod.ps.ps_name.should.be.eql(\"On hold\");",
									"        });",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/place_on_hold/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"place_on_hold",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Get service requests",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f4809d17-b59d-47fc-861e-5edaf421bddc",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.service_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Get periods for the first service request.",
									"    var allPeriods = allElements[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    var allPeriodCount = 0;",
									"",
									"    //  Find how many periods there are with null end time.",
									"    //  Also, check schema.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        ",
									"        //  Find the open period.",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"        ",
									"        //  Check the schema.  Not working for now.",
									"        //allPeriodCount++;",
									"        //var testTitle = \"Period (\" + allPeriodCount + \"): \" + onePeriod.ps.ps_number + \" - \";",
									"        // tests[testTitle + \"conforms to schema\"] = tv4.validate(onePeriod, schema);",
									"        //tests[testTitle + \"conforms to schema\"] = onePeriod.hasOwnProperty(\"accurate_time_ind\");",
									"    });",
									"}    ",
									"",
									"//  If there are some service requests, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for correct service updates\", function() {",
									"        it('service_reqs length must be 1 (single service request)', function() {",
									"            (allElements.length).should.be.eql(1);",
									"        });",
									"        it('service_reqs state must be \"Active\"', function() {",
									"            (allElements[0].sr_state.sr_code).should.be.eql(\"Active\");",
									"        });",
									"        it('service_reqs service must be ' + citizenService, function() {",
									"            (allElements[0].service_id).should.be.eql(citizenService);",
									"        });",
									"        it('service_reqs quantity must be ' + citizenQuantity, function() {",
									"            (allElements[0].quantity).should.be.eql(citizenQuantity);",
									"        });",
									"        it('service_reqs periods length must be 3 (now three periods)', function() {",
									"            (allPeriods.length).should.be.eql(3);",
									"        });",
									"        it('must only be one open period', function() {",
									"            openPeriodCount.should.be.eql(1);",
									"        });",
									"        it('open period state must be \"On hold\"', function() {",
									"            openPeriod.ps.ps_name.should.be.eql(\"On hold\");",
									"        });",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/service_requests/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"service_requests",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Call citizen from hold",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "66563797-2a92-4dbd-946e-7232dcac8260",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for call citizen from hold\", function() {",
									"        it('Must be one active citizen in the office', function() {",
									"            citizenIds.length.should.be.eql(1);",
									"        });",
									"        it('citizen_id must equal \"' + currentCitizenId + '\"', function() {",
									"            (currentCitizen.citizen_id).should.be.eql(currentCitizenId);",
									"        });",
									"        it('citizen_name must equal \"' + citizenName + '\"', function() {",
									"            (currentCitizen.citizen_name).should.be.eql(citizenName);",
									"        });",
									"        it('citizen_comment must equal \"' + citizenComment + '\"', function() {",
									"            (currentCitizen.citizen_comments).should.be.eql(citizenComment);",
									"        });",
									"        it('service_reqs length must be 1 (single service request)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(1);",
									"        });",
									"        it('service_reqs state must be \"Active\"', function() {",
									"            (currentCitizen.service_reqs[0].sr_state.sr_code).should.be.eql(\"Active\");",
									"        });",
									"        it('service_reqs service must be ' + citizenService, function() {",
									"            (currentCitizen.service_reqs[0].service_id).should.be.eql(citizenService);",
									"        });",
									"        it('service_reqs quantity must be ' + citizenQuantity, function() {",
									"            (currentCitizen.service_reqs[0].quantity).should.be.eql(citizenQuantity);",
									"        });",
									"        it('service_reqs periods length must be 4 (now four periods)', function() {",
									"            (allPeriods.length).should.be.eql(4);",
									"        });",
									"        it('must only be one open period', function() {",
									"            openPeriodCount.should.be.eql(1);",
									"        });",
									"        it('open period state must be \"Being Served\"', function() {",
									"            openPeriod.ps.ps_name.should.be.eql(\"Being Served\");",
									"        });",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/begin_service/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"begin_service",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Finish serving citizen",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ec865f9c-a4b6-421f-956e-783972df2ad3",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"    ",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"    var allPeriods = allElements[0].service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for citizen finished correctly\", function() {",
									"        it('Must be no active citizens in the office', function() {",
									"            citizenIds.length.should.be.eql(0);",
									"        });",
									"        it('service_reqs length must be 1 (single service request)', function() {",
									"            (allElements[0].service_reqs.length).should.be.eql(1);",
									"        });",
									"        it('service_reqs state must be \"Complete\"', function() {",
									"            (allElements[0].service_reqs[0].sr_state.sr_code).should.be.eql(\"Complete\");",
									"        });",
									"        it('service_reqs service must be ' + citizenService, function() {",
									"            (allElements[0].service_reqs[0].service_id).should.be.eql(citizenService);",
									"        });",
									"        it('service_reqs quantity must be ' + citizenQuantity, function() {",
									"            (allElements[0].service_reqs[0].quantity).should.be.eql(citizenQuantity);",
									"        });",
									"        it('service_reqs periods length must be 4 (still four periods)', function() {",
									"            (allPeriods.length).should.be.eql(4);",
									"        });",
									"        it('must be no open periods', function() {",
									"            openPeriodCount.should.be.eql(0);",
									"        });",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/finish_service/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"finish_service",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				}
			]
		},
		{
			"name": "Check citizen leave after create",
			"item": [
				{
					"name": "Create citizen",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "061a479c-37b4-4707-b8c6-c31cacadecec",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.create_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for one added citizen, correct initial values\", function() {",
									"        it('citizen_name must be null', function() {",
									"            (!currentCitizen.citizen_name).should.be.eql(true);",
									"        });",
									"        it('citizen_comments must be null', function() {",
									"            (!currentCitizen.citizen_comments).should.be.eql(true);",
									"        });",
									"        it('service_reqs must empty (no service requests)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(0);",
									"        });",
									"    });",
									"",
									"    //  Store the ID of the citizen just created.",
									"    postman.setEnvironmentVariable(\"current_client\", JSON.stringify(citizenIds.shift()));",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}citizens/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Citizen left",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "16eaefc2-0d16-405e-9e70-e85314da841b",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = jsonData.citizen;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Get environment variables.",
									"    var citizenName = postman.getEnvironmentVariable(\"citizen_name\");",
									"    var citizenComment = postman.getEnvironmentVariable(\"citizen_comment\");",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"    var allPeriods = null;",
									"    if (currentCitizen.service_reqs.length !== 0) {",
									"        var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    }",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    if (allPeriods !== null) {",
									"        allPeriods.forEach(function(onePeriod) {",
									"            if (!onePeriod.time_end) {",
									"                openPeriod = onePeriod;",
									"                openPeriodCount++;",
									"            }",
									"        });",
									"    }",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for correct service updates\", function() {",
									"        it('Must be no active citizens in the office', function() {",
									"            citizenIds.length.should.be.eql(0);",
									"        });",
									"        it('citizen_id must equal \"' + currentCitizenId + '\"', function() {",
									"            (currentCitizen.citizen_id).should.be.eql(currentCitizenId);",
									"        });",
									"        it('service_reqs length must be 0 (no service request)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(0);",
									"        });",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/citizen_left/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"citizen_left",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				}
			]
		},
		{
			"name": "Check citizen leave after waiting",
			"item": [
				{
					"name": "Create citizen",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fcc1415c-0861-4516-8843-bfc3717a76d9",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.create_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for one added citizen, correct initial values\", function() {",
									"        it('citizen_name must be null', function() {",
									"            (!currentCitizen.citizen_name).should.be.eql(true);",
									"        });",
									"        it('citizen_comments must be null', function() {",
									"            (!currentCitizen.citizen_comments).should.be.eql(true);",
									"        });",
									"        it('service_reqs must empty (no service requests)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(0);",
									"        });",
									"    });",
									"",
									"    //  Store the ID of the citizen just created.",
									"    postman.setEnvironmentVariable(\"current_client\", JSON.stringify(citizenIds.shift()));",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}citizens/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Edit specific citizen",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f26eaedb-5d41-4dcc-b856-aec599440601",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									"",
									"// //  Get data, create JSON body.",
									"// var citizenName = postman.getEnvironmentVariable(\"citizen_name\");",
									"// var citizenComments = postman.getEnvironmentVariable(\"citizen_comment\");",
									"// var bodyData = {",
									"//     \"citizen_name\" : citizenName,",
									"//     \"citizen_comments\" : citizenComments",
									"// }",
									"",
									"// //  Store the data in an environment variable.",
									"// postman.setEnvironmentVariable(\"putBody\", JSON.stringify(bodyData));"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e0b48324-0ca2-4b2e-88ef-cbfbe10b5fb7",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for correct citizen updates\", function() {",
									"        it('Must be one active citizen in the office', function() {",
									"            citizenIds.length.should.be.eql(1);",
									"        });",
									"        it('citizen_id must equal \"' + currentCitizenId + '\"', function() {",
									"            (currentCitizen.citizen_id).should.be.eql(currentCitizenId);",
									"        });",
									"        it('citizen_name must equal \"' + citizenName + '\"', function() {",
									"            (currentCitizen.citizen_name).should.be.eql(citizenName);",
									"        });",
									"        it('citizen_comment must equal \"' + citizenComment + '\"', function() {",
									"            (currentCitizen.citizen_comments).should.be.eql(citizenComment);",
									"        });",
									"        it('service_reqs must empty (no service requests)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(0);",
									"        });",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"citizen_name\" : {{citizen_name}},\n    \"citizen_comments\" : {{citizen_comment}}\n}"
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Add property tax via phone service request",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fa6f6a3b-e4e7-42b6-a8d3-ecda3840418a",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.create_response_test);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"service_request\" : {\n\t\t\"service_id\" : {{service_PropTax_id}},\n\t\t\"citizen_id\" : {{current_client}},\n\t\t\"quantity\" : {{citizen_quantity}},\n\t\t\"channel_id\" : {{channel_telephone_id}}\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}service_requests/",
							"host": [
								"{{url}}service_requests"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "List specific citizen",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1176fcca-52ff-4e13-b4a4-775ad324a4c6",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for correct service updates\", function() {",
									"        it('Must be one active citizen in the office', function() {",
									"            citizenIds.length.should.be.eql(1);",
									"        });",
									"        it('citizen_id must equal \"' + currentCitizenId + '\"', function() {",
									"            (currentCitizen.citizen_id).should.be.eql(currentCitizenId);",
									"        });",
									"        it('citizen_name must equal \"' + citizenName + '\"', function() {",
									"            (currentCitizen.citizen_name).should.be.eql(citizenName);",
									"        });",
									"        it('citizen_comment must equal \"' + citizenComment + '\"', function() {",
									"            (currentCitizen.citizen_comments).should.be.eql(citizenComment);",
									"        });",
									"        it('service_reqs length must be 1 (single service request)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(1);",
									"        });",
									"        it('service_reqs state must be \"Active\"', function() {",
									"            (currentCitizen.service_reqs[0].sr_state.sr_code).should.be.eql(\"Active\");",
									"        });",
									"        it('service_reqs service must be ' + citizenService, function() {",
									"            (currentCitizen.service_reqs[0].service_id).should.be.eql(citizenService);",
									"        });",
									"        it('service_reqs quantity must be ' + citizenQuantity, function() {",
									"            (currentCitizen.service_reqs[0].quantity).should.be.eql(citizenQuantity);",
									"        });",
									"        it('service_reqs periods length must be 1 (single period)', function() {",
									"            (currentCitizen.service_reqs[0].periods.length).should.be.eql(1);",
									"        });",
									"        it('service_reqs periods channel must be ' + citizenChannel, function() {",
									"            (currentCitizen.service_reqs[0].channel_id).should.be.eql(citizenChannel);",
									"        });",
									"        it('service_reqs periods state must be \"Ticket Creation\"', function() {",
									"            (currentCitizen.service_reqs[0].periods[0].ps.ps_name).should.be.eql(\"Ticket Creation\");",
									"        });",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Add citizen to queue",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f0aacc69-ff0e-4ed3-9ef7-f131bbf3a5bd",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for correct service updates\", function() {",
									"        it('Must be one active citizen in the office', function() {",
									"            citizenIds.length.should.be.eql(1);",
									"        });",
									"        it('citizen_id must equal \"' + currentCitizenId + '\"', function() {",
									"            (currentCitizen.citizen_id).should.be.eql(currentCitizenId);",
									"        });",
									"        it('citizen_name must equal \"' + citizenName + '\"', function() {",
									"            (currentCitizen.citizen_name).should.be.eql(citizenName);",
									"        });",
									"        it('citizen_comment must equal \"' + citizenComment + '\"', function() {",
									"            (currentCitizen.citizen_comments).should.be.eql(citizenComment);",
									"        });",
									"        it('service_reqs length must be 1 (single service request)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(1);",
									"        });",
									"        it('service_reqs state must be \"Pending\"', function() {",
									"            (currentCitizen.service_reqs[0].sr_state.sr_code).should.be.eql(\"Pending\");",
									"        });",
									"        it('service_reqs service must be ' + citizenService, function() {",
									"            (currentCitizen.service_reqs[0].service_id).should.be.eql(citizenService);",
									"        });",
									"        it('service_reqs quantity must be ' + citizenQuantity, function() {",
									"            (currentCitizen.service_reqs[0].quantity).should.be.eql(citizenQuantity);",
									"        });",
									"        it('service_reqs periods length must be 2 (now two periods)', function() {",
									"            (allPeriods.length).should.be.eql(2);",
									"        });",
									"        it('must only be one open period', function() {",
									"            openPeriodCount.should.be.eql(1);",
									"        });",
									"        it('open period state must be 1', function() {",
									"            openPeriod.ps.ps_name.should.be.eql(\"Waiting\");",
									"        });",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/add_to_queue/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"add_to_queue",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Citizen left",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4ee90115-54c2-4b44-b6f1-d739e8a385b1",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = jsonData.citizen;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for correct service updates\", function() {",
									"        it('Must be no active citizens in the office', function() {",
									"            citizenIds.length.should.be.eql(0);",
									"        });",
									"        it('citizen_id must equal \"' + currentCitizenId + '\"', function() {",
									"            (currentCitizen.citizen_id).should.be.eql(currentCitizenId);",
									"        });",
									"        it('citizen_name must equal \"' + citizenName + '\"', function() {",
									"            (currentCitizen.citizen_name).should.be.eql(citizenName);",
									"        });",
									"        it('citizen_comment must be null on service completion ', function() {",
									"            var newshould = chai.should();",
									"            newshould.equal(currentCitizen.citizen_comments, null);",
									"        });",
									"        it('service_reqs length must be 1 (single service request)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(1);",
									"        });",
									"        it('service_reqs state must be \"Complete\"', function() {",
									"            (currentCitizen.service_reqs[0].sr_state.sr_code).should.be.eql(\"Complete\");",
									"        });",
									"        it('service_reqs service must be ' + citizenService, function() {",
									"            (currentCitizen.service_reqs[0].service_id).should.be.eql(citizenService);",
									"        });",
									"        it('service_reqs quantity must be ' + citizenQuantity, function() {",
									"            (currentCitizen.service_reqs[0].quantity).should.be.eql(citizenQuantity);",
									"        });",
									"        it('service_reqs periods length must be 2 (two periods)', function() {",
									"            (allPeriods.length).should.be.eql(2);",
									"        });",
									"        it('must be no open periods (service is complete', function() {",
									"            openPeriodCount.should.be.eql(0);",
									"        });",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/citizen_left/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"citizen_left",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				}
			]
		},
		{
			"name": "Check update service information",
			"item": [
				{
					"name": "Create citizen",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d3bbd88a-25fd-4fe6-ae7e-359373df02ac",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.create_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for one added citizen, correct initial values\", function() {",
									"        it('citizen_name must be null', function() {",
									"            (!currentCitizen.citizen_name).should.be.eql(true);",
									"        });",
									"        it('citizen_comments must be null', function() {",
									"            (!currentCitizen.citizen_comments).should.be.eql(true);",
									"        });",
									"        it('service_reqs must empty (no service requests)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(0);",
									"        });",
									"    });",
									"",
									"    //  Store the ID of the citizen just created.",
									"    postman.setEnvironmentVariable(\"current_client\", JSON.stringify(citizenIds.shift()));",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}citizens/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Edit specific citizen",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2be395b2-e14c-4ff8-8753-42ea1fe2010d",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									"",
									"// //  Get data, create JSON body.",
									"// var citizenName = postman.getEnvironmentVariable(\"citizen_name\");",
									"// var citizenComments = postman.getEnvironmentVariable(\"citizen_comment\");",
									"// var bodyData = {",
									"//     \"citizen_name\" : citizenName,",
									"//     \"citizen_comments\" : citizenComments",
									"// };",
									"",
									"// //  Store the data in an environment variable.",
									"// postman.setEnvironmentVariable(\"putBody\", JSON.stringify(bodyData));"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2e7878d3-653e-479e-850f-c454b378217e",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"    ",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for correct citizen updates\", function() {",
									"        it('Must be one active citizen in the office', function() {",
									"            citizenIds.length.should.be.eql(1);",
									"        });",
									"        it('citizen_id must equal \"' + currentCitizenId + '\"', function() {",
									"            (currentCitizen.citizen_id).should.be.eql(currentCitizenId);",
									"        });",
									"        it('citizen_name must equal \"' + citizenName + '\"', function() {",
									"            (currentCitizen.citizen_name).should.be.eql(citizenName);",
									"        });",
									"        it('citizen_comment must equal \"' + citizenComment + '\"', function() {",
									"            (currentCitizen.citizen_comments).should.be.eql(citizenComment);",
									"        });",
									"        it('service_reqs must empty (no service requests)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(0);",
									"        });",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"citizen_name\" : {{citizen_name}},\n    \"citizen_comments\" : {{citizen_comment}}\n}"
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Add property tax via phone service request",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fa6f6a3b-e4e7-42b6-a8d3-ecda3840418a",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.create_response_test);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"service_request\" : {\n\t\t\"service_id\" : {{service_PropTax_id}},\n\t\t\"citizen_id\" : {{current_client}},\n\t\t\"quantity\" : {{citizen_quantity}},\n\t\t\"channel_id\" : {{channel_telephone_id}}\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}service_requests/",
							"host": [
								"{{url}}service_requests"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "List specific citizen",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3d906a10-51fe-4329-bac0-e69e6847e852",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"    ",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for correct service updates\", function() {",
									"        it('Must be one active citizen in the office', function() {",
									"            citizenIds.length.should.be.eql(1);",
									"        });",
									"        it('citizen_id must equal \"' + currentCitizenId + '\"', function() {",
									"            (currentCitizen.citizen_id).should.be.eql(currentCitizenId);",
									"        });",
									"        it('citizen_name must equal \"' + citizenName + '\"', function() {",
									"            (currentCitizen.citizen_name).should.be.eql(citizenName);",
									"        });",
									"        it('citizen_comment must equal \"' + citizenComment + '\"', function() {",
									"            (currentCitizen.citizen_comments).should.be.eql(citizenComment);",
									"        });",
									"        it('service_reqs length must be 1 (single service request)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(1);",
									"        });",
									"        it('service_reqs state must be \"Active\"', function() {",
									"            (currentCitizen.service_reqs[0].sr_state.sr_code).should.be.eql(\"Active\");",
									"        });",
									"        it('service_reqs service must be ' + citizenService, function() {",
									"            (currentCitizen.service_reqs[0].service_id).should.be.eql(citizenService);",
									"        });",
									"        it('service_reqs quantity must be ' + citizenQuantity, function() {",
									"            (currentCitizen.service_reqs[0].quantity).should.be.eql(citizenQuantity);",
									"        });",
									"        it('service_reqs periods length must be 1 (single period)', function() {",
									"            (currentCitizen.service_reqs[0].periods.length).should.be.eql(1);",
									"        });",
									"        it('service_reqs periods channel must be ' + citizenChannel, function() {",
									"            (currentCitizen.service_reqs[0].channel_id).should.be.eql(citizenChannel);",
									"        });",
									"        it('service_reqs periods state must be \"Ticket Creation\"', function() {",
									"            (currentCitizen.service_reqs[0].periods[0].ps.ps_name).should.be.eql(\"Ticket Creation\");",
									"        });",
									"    });",
									"    ",
									"    //  Save the service request ID for later.",
									"    var mySRId = allElements[0].service_reqs[0].sr_id;",
									"    postman.setEnvironmentVariable(\"current_sr_id\", JSON.stringify(mySRId));",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Begin serving citizen",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ff3a25ca-0df2-40f2-b7a1-9e9b4bde2aab",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for correct service updates\", function() {",
									"        it('Must be one active citizen in the office', function() {",
									"            citizenIds.length.should.be.eql(1);",
									"        });",
									"        it('citizen_id must equal \"' + currentCitizenId + '\"', function() {",
									"            (currentCitizen.citizen_id).should.be.eql(currentCitizenId);",
									"        });",
									"        it('citizen_name must equal \"' + citizenName + '\"', function() {",
									"            (currentCitizen.citizen_name).should.be.eql(citizenName);",
									"        });",
									"        it('citizen_comment must equal \"' + citizenComment + '\"', function() {",
									"            (currentCitizen.citizen_comments).should.be.eql(citizenComment);",
									"        });",
									"        it('service_reqs length must be 1 (single service request)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(1);",
									"        });",
									"        it('service_reqs state must be \"Active\"', function() {",
									"            (currentCitizen.service_reqs[0].sr_state.sr_code).should.be.eql(\"Active\");",
									"        });",
									"        it('service_reqs service must be ' + citizenService, function() {",
									"            (currentCitizen.service_reqs[0].service_id).should.be.eql(citizenService);",
									"        });",
									"        it('service_reqs quantity must be ' + citizenQuantity, function() {",
									"            (currentCitizen.service_reqs[0].quantity).should.be.eql(citizenQuantity);",
									"        });",
									"        it('service_reqs periods length must be 2 (now twor periods)', function() {",
									"            (allPeriods.length).should.be.eql(2);",
									"        });",
									"        it('must only be one open period', function() {",
									"            openPeriodCount.should.be.eql(1);",
									"        });",
									"        it('open period state must be \"Being Served\"', function() {",
									"            openPeriod.ps.ps_name.should.be.eql(\"Being Served\");",
									"        });",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/begin_service/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"begin_service",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Update quantity from 3 to 5",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "153a139d-0daa-4031-ba0a-e7204ade2648",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.basic_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.service_response_test);",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Only check for an updated quantity.  Get environment variables.",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity_update\"));",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for correct quantity update\", function() {",
									"        it('service_reqs quantity must be ' + citizenQuantity, function() {",
									"            (allElements[0].quantity).should.be.eql(citizenQuantity);",
									"        });",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"quantity\" : {{citizen_quantity_update}}\n}"
						},
						"url": {
							"raw": "{{url}}service_requests/{{current_sr_id}}/",
							"host": [
								"{{url}}service_requests"
							],
							"path": [
								"{{current_sr_id}}",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Update service from PropTax to MSP",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8faaa693-a7a4-45ed-9318-325a498a98af",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.basic_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.service_response_test);",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Only check for an updated quantity.  Get environment variables.",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_MSP_id\"));",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for correct service update\", function() {",
									"        it('service_reqs service must be ' + citizenService, function() {",
									"            (allElements[0].service_id).should.be.eql(citizenService);",
									"        });",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"service_id\" : {{service_MSP_id}}\n}"
						},
						"url": {
							"raw": "{{url}}service_requests/{{current_sr_id}}/",
							"host": [
								"{{url}}service_requests"
							],
							"path": [
								"{{current_sr_id}}",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Finish serving citizen",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7a831dcf-ff2c-4907-95c5-bf042cdd967a",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = jsonData.citizen;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_MSP_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity_update\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for citizen finished\", function() {",
									"        it('Must be no active citizens in the office', function() {",
									"            citizenIds.length.should.be.eql(0);",
									"        });",
									"        it('citizen_id must equal \"' + currentCitizenId + '\"', function() {",
									"            (currentCitizen.citizen_id).should.be.eql(currentCitizenId);",
									"        });",
									"        it('citizen_name must equal \"' + citizenName + '\"', function() {",
									"            (currentCitizen.citizen_name).should.be.eql(citizenName);",
									"        });",
									"        it('citizen_comment must be null on service completion ', function() {",
									"            var newshould = chai.should();",
									"            newshould.equal(currentCitizen.citizen_comments, null);",
									"        });",
									"        it('service_reqs length must be 1 (single service request)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(1);",
									"        });",
									"        it('service_reqs state must be \"Complete\"', function() {",
									"            (currentCitizen.service_reqs[0].sr_state.sr_code).should.be.eql(\"Complete\");",
									"        });",
									"        it('service_reqs service must be ' + citizenService, function() {",
									"            (currentCitizen.service_reqs[0].service_id).should.be.eql(citizenService);",
									"        });",
									"        it('service_reqs quantity must be ' + citizenQuantity, function() {",
									"            (currentCitizen.service_reqs[0].quantity).should.be.eql(citizenQuantity);",
									"        });",
									"        it('service_reqs periods length must be 2 (still four periods)', function() {",
									"            (allPeriods.length).should.be.eql(2);",
									"        });",
									"        it('must be no open periods (service is complete', function() {",
									"            openPeriodCount.should.be.eql(0);",
									"        });",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/finish_service/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"finish_service",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				}
			]
		}
	]
}