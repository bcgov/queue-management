{
	"info": {
		"_postman_id": "14af7cc7-efdb-425c-96da-5d6280190e1c",
		"name": "API_Test_TheQ_Booking",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Setup TheQ",
			"item": [
				{
					"name": "Setup-Variables",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "694b0931-e8fd-444f-b469-5ff9d37493ff",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e6a03447-85ae-4827-8aae-fd649c8f78eb",
								"exec": [
									"//  See if the use-prefix global has been set.  Use default if not.",
									"let usePrefix = '';",
									"if (pm.globals.get('use-prefix')) {",
									"    console.log(\"==> use-prefix exists\");",
									"    usePrefix = pm.globals.get('use-prefix');",
									"    console.log(\"    --> Prefix is: \" + usePrefix);",
									"    ",
									"    //  Set up all globals, using the correct prefix.",
									"    pm.globals.set('auth_url', pm.globals.get(usePrefix + 'auth_url'));",
									"    pm.globals.set('realm', pm.globals.get(usePrefix + 'realm'));",
									"    pm.globals.set('clientid', pm.globals.get(usePrefix + 'clientid'));",
									"    pm.globals.set('client_secret', pm.globals.get(usePrefix + 'client_secret'));",
									"    pm.globals.set('url', pm.globals.get(usePrefix + 'url'));",
									"}",
									"else {",
									"    console.log(\"==> use-prefix does not exist\");",
									"    console.log(\"    --> No default globals set.\");",
									"}",
									"",
									"//  If no maximum load time defined, set a default.",
									"if (!pm.globals.get('max_load_time')) {",
									"    console.log(\"==> max_load_time not present, default set.\");",
									"    pm.globals.set(\"max_load_time\", JSON.stringify(1503));",
									"}",
									"",
									"//  If no maximum response defined, set a default.",
									"if (!pm.globals.get('max_response_time')) {",
									"    console.log(\"==> max_response_time not present, default set.\");",
									"    pm.globals.set(\"max_response_time\", JSON.stringify(15005));",
									"}",
									"",
									"//  Display the values of all globals.",
									"console.log(\"\");",
									"console.log(\"==> Globals are:\");",
									"console.log(\"    --> auth_url:          \" + pm.globals.get(\"auth_url\"));",
									"console.log(\"    --> realm:             \" + pm.globals.get(\"realm\"));",
									"console.log(\"    --> clientid:          \" + pm.globals.get(\"clientid\"));",
									"console.log(\"    --> client_secret:     \" + pm.globals.get(\"client_secret\"));",
									"console.log(\"    --> url:               \" + pm.globals.get(\"url\"));",
									"console.log(\"    --> max_load_time:     \" + pm.globals.get(\"max_load_time\"));",
									"console.log(\"    --> max_response_time: \" + pm.globals.get(\"max_response_time\"));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "// Dummy data."
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-Auth-First",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "49afd2c6-3884-4c39-afa1-75b1003e5ee6",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"auth_first\", jsonData.data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "auth_url = globals.auth_url;\nrealm = globals.realm;\nclientid = globals.clientid;\nuserid = globals.userid;\npassword = globals.password;\nclient_secret = globals.client_secret;\n\nconst echoPostRequest = {\n  url: auth_url + '/auth/realms/' + realm + '/protocol/openid-connect/token',\n  method: 'POST',\n  header: 'Content-Type:application/x-www-form-urlencoded',\n  body: {\n    mode: 'raw',\n    raw: 'grant_type=password&client_id=' + clientid \n          + '&username=' + userid \n          + '&password=' + password\n          + '&client_secret=' + client_secret\n  }\n};\npm.sendRequest(echoPostRequest, function (err, res) {\n    var jsonData = res.json();\n    if (jsonData.hasOwnProperty('access_token')) {\n    \tpm.globals.set(\"token\", jsonData.access_token);\n\t    pm.globals.set(\"refresh_token\", jsonData.refresh_token);\n\t    if (err) {\n\t        console.log(err);\n\t    }\n\t    // console.log(err ? err : res.json());\n\t} else {\n\t    pm.globals.set(\"token\", 0);\n\t    pm.globals.set(\"refresh_token\", 0);\n\t    pm.globals.set(\"token_expires\", 0);\n\t    pm.globals.set(\"refresh_token_expires\", 0);\n\t}\n});"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-Auth-Script",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a9664023-0946-46e0-9bc1-f0ac0901d989",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"auth_script\", jsonData.data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "auth_url = globals.auth_url;\nrealm = globals.realm;\nclientid = globals.clientid;\nuserid = globals.userid;\npassword = globals.password;\nclient_secret = globals.client_secret;\n"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-AuthToken-Script",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "22d48e4c-1e87-435a-acf0-20b7583193c9",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"auth_token_script\", jsonData.data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "auth_url = globals.auth_url;\nrealm = globals.realm;\nclientid = globals.clientid;\nuserid = globals.userid;\npassword = globals.password;\nclient_secret = globals.client_secret;\n\nconst echoPostRequest = {\n  url: authurl + '/auth/realms/' + realm + '/protocol/openid-connect/token',\n  method: 'POST',\n  header: 'Content-Type:application/x-www-form-urlencoded',\n  body: {\n    mode: 'raw',\n    raw: 'grant_type=password&client_id=' + clientid \n         + '&username=' + userid \n         + '&password=' + password\n         + '&client_secret=' + client_secret\n  }\n};\n\npm.sendRequest(echoPostRequest, function (err, res) {\n    if (err) { console.log(err); }\n    else {\n      var jsonData = res.json();\n      pm.globals.set(\"token\", jsonData.access_token);\n      pm.globals.set(\"refresh_token\", jsonData.refresh_token);\n      pm.globals.set(\"token_expires\", Date.now()+(jsonData.expires_in * 1000));\n      pm.globals.set(\"refresh_token_expires\", Date.now()+(jsonData.refresh_expires_in * 1000));\n    }\n    //console.log(err ? err : res.json());\n});"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-AuthRefresh-Script",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73aedb6e-ac38-445f-a598-02b561939a0e",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"auth_refresh_script\", jsonData.data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "auth_url = globals.auth_url;\nrealm = globals.realm;\nclientid = globals.clientid;\nrefresh_token = environment.refresh_token;\nclient_secret = globals.client_secret;\n\nconst echoPostRequest = {\n  url: authurl +'/auth/realms/' +realm + '/protocol/openid-connect/token',\n  method: 'POST',\n  header: 'Content-Type:application/x-www-form-urlencoded',\n  body: {\n    mode: 'raw',\n    raw: 'grant_type=refresh_token&client_id=' + clientid \n         + '&refresh_token=' + refresh_token \n         + '&client_secret=' + client_secret\n  }\n};\n\npm.sendRequest(echoPostRequest, function (err, res) {\n    var jsonData = res.json();\n    pm.globals.set(\"token\", jsonData.access_token);\n    pm.globals.set(\"refresh_token\", jsonData.refresh_token);\n    pm.globals.set(\"token_expires\", Date.now()+(jsonData.expires_in * 1000));\n    pm.globals.set(\"refresh_token_expires\", Date.now()+(jsonData.refresh_expires_in * 1000));\n\n    console.log(err ? err : res.json());\n});"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-Basic-Response-Tests",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "76287440-d50d-4bf2-aa6a-c935efe3d50d",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"basic_response_test\", jsonData.data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//  Get the maximum response time allowed.\r\nmax_response_time = JSON.parse(globals.max_response_time);\r\n\r\n//  Check to make sure the response time was within the maximum allowed.\r\npm.test('Response time less than ' + max_response_time.toString() + 'ms', function(){\r\n    pm.expect(pm.response.responseTime).to.be.below(max_response_time);\r\n});\r\n\r\n//  Other tests.\r\npm.test(\"Response code for request is 200\", function(){\r\n    pm.response.to.have.status(200);\r\n});\r\npm.test('Response header should have Content-Type of application/json', function() {\r\n    pm.response.to.have.header('content-type', 'application/json');\r\n});\r\npm.test('Response body be in JSON format', function() {\r\n    pm.response.to.be.json; \r\n});"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-Complex-Response-Tests",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ee62392a-718b-496a-857b-fc339a368c01",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"complex_response_test\", jsonData.data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//  Get the maximum response time allowed.\nmax_response_time = JSON.parse(globals.max_response_time);\n\n//  Check to make sure the response time was within the maximum allowed.\npm.test('Response time less than ' + max_response_time.toString() + 'ms', function(){\n    pm.expect(pm.response.responseTime).to.be.below(max_response_time);\n});\n\n//  Other tests.\npm.test(\"Response code for request is 200\", function(){\n    pm.response.to.have.status(200);\n});\npm.test('Response header should have Content-Type of application/json', function() {\n    pm.response.to.have.header('content-type', 'application/json');\n});\npm.test('Response body be in JSON format', function() {\n    pm.response.to.be.json; \n});\n"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-Create-Response-Tests",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "03bb64ec-ee7a-40b5-9849-f7c89bb5e1f3",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"create_response_test\", jsonData.data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//  Get the maximum response time allowed.\nmax_response_time = JSON.parse(globals.max_response_time);\n\n//  Check to make sure the response time was within the maximum allowed.\npm.test('Response time less than ' + max_response_time.toString() + 'ms', function(){\n    pm.expect(pm.response.responseTime).to.be.below(max_response_time);\n});\n\n//  Other tests.\npm.test(\"Response status code should be 201 CREATED\", function(){\n    pm.response.to.have.status(201);\n});\npm.test('Response header should have Content-Type of application/json', function() {\n    pm.response.to.have.header('content-type', 'application/json');\n});\npm.test('Response body be in JSON format', function() {\n    pm.response.to.be.json; \n});\n"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-Citizen-Response-Tests",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "945b4b7c-1640-4f89-bec5-02ceec723285",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"citizen_response_test\", jsonData.data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "var schema = {\n    \"properties\" : {\n        \"start_time\" : {\n            \"type\" : \"string\"\n        },\n        \"citizen_name\" : {\n            \"type\" : [\"string\", \"null\"]\n        },\n        \"citizen_id\" : {\n            \"type\" : [\"number\", \"object\"]\n        },\n        \"qt_xn_citizen_ind\" : {\n            \"type\" : \"number\"\n        },\n        \"ticket_number\" : {\n            \"type\" : [\"string\", \"null\"]\n        },\n        \"service_reqs\" : {\n            \"type\" : \"array\"\n        },\n        \"office_id\" : {\n            \"type\" : [\"object\", \"number\"]\n        },\n        \"cs\" : {\n            \"type\" : \"object\"\n        },\n        \"citizen_comments\" : {\n            \"type\" : [\"string\", \"null\"]\n        },\n        \n    },\n    \"required\" : [\"start_time\", \"citizen_name\", \"citizen_id\",\n                  \"qt_xn_citizen_ind\", \"ticket_number\", \"service_reqs\",\n                  \"office_id\", \"cs\", \"citizen_comments\"]\n};\n\n//  Declare, initialize variables.\nvar allElements = null;\n\nif (jsonData.hasOwnProperty(\"citizens\")) {\n\tallElements = jsonData.citizens;\n};\n\nif (jsonData.hasOwnProperty(\"citizen\")) {\n\tallElements = [];\n\tallElements.push(jsonData.citizen);\n};\n\nvar elementCount = 0;\n\n//  If there are some citizens, proceed with tests.\nif (allElements !== null) {\n\n    //  Loop to validate schema of each channel, create list of citizen ids.\n    allElements.forEach(function(element) {\n        elementCount ++;\n        var testTitle = \"Citizen (\" + elementCount + \"): \" + element.citizen_id + \" - \";\n        tests[testTitle + \"conforms to schema\"] = tv4.validate(element, schema);\n        \n        //  Test the authenticate response.\n        pm.test(testTitle + \"qt_xn_citizen_ind must be 0 or 1\", function() {\n            pm.expect(element.qt_xn_citizen_ind).to.be.within(0,1);\n        });\n    });\n};"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-Service-Response-Tests",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3ebfb518-6652-44fb-af47-6ffd3e83c853",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"service_response_test\", jsonData.data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "var schema = {\n    \"properties\" : {\n        \"sr_id\" : {\n            \"type\" : [\"object\", \"number\"]\n        },\n        \"sr_state\" : {\n            \"type\" : \"object\"\n        },\n        \"periods\" : {\n            \"type\" : \"array\"\n        },\n        \"service\" : {\n            \"type\" : \"object\"\n        },\n        \"citizen\" : {\n            \"type\" : [\"object\", \"number\"]\n        },\n        \"quantity\" : {\n            \"type\" : \"number\"\n        },\n        \"service_id\" : {\n            \"type\" : [\"object\", \"number\"]\n        },\n        \"citizen_id\" : {\n            \"type\" : [\"object\", \"number\"]\n        },\n        \"channel\" : {\n        \t\"type\" : \"object\"\n        },\n        \"channel_id\" : {\n        \t\"type\" : [\"object\", \"number\"]\n        }\n        \n    },\n    \"required\" : [\n    \t\"sr_id\", \"sr_state\", \"periods\", \"service\", \"citizen\", \"quantity\",\n    \t\"service_id\", \"citizen_id\", \"channel\", \"channel_id\"\n    ]\n};\n\n//  Declare, initialize variables.\nvar allElements = null;\n\nif (jsonData.hasOwnProperty(\"service_requests\")) {\n\tallElements = jsonData.service_requests;\n};\n\nif (jsonData.hasOwnProperty(\"service_request\")) {\n    allElements = [];\n\tallElements.push(jsonData.service_request);\n}\n\nvar elementCount = 0;\n\n//  If there are some service requests, proceed with tests.\nif (allElements !== null) {\n\n    //  Loop to validate schema of each service request.\n    allElements.forEach(function(element) {\n        elementCount ++;\n        var testTitle = \"Service Request (\" + elementCount + \"): \" + element.sr_id + \" - \";\n        tests[testTitle + \"conforms to schema\"] = tv4.validate(element, schema);\n    });\n};"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-Get-Active-Citizens-Tests",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "21d84e16-63c0-40e5-b309-3a6db8299708",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"get_active_citizens_test\", jsonData.data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//  Declare and initialize variables.\nvar elementCount = 0;\nvar srCount = 0;\nvar isFirstCitizen = true;\n\n\n//  Loop to create list of active citizen ids.\nallElements.forEach(function(element) {\n    srCount = element.service_reqs.length;\n\n    //  If citizen active, add to the list.\n    if (element.cs.cs_state_name === \"Active\") {\n        //console.log(\"Citizen (\" + elementCount + \") \" + element.citizen_id +\n        //    \" Active: SRCount = \" + srCount);\n        citizenIds.push(element.citizen_id);\n\n        //  Save the first citizen.\n        if (isFirstCitizen) {\n            currentCitizen = element;\n            isFirstCitizen = false;\n        }\n    }\n        \n    //  Increment count.\n    elementCount++;\n});"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				}
			],
			"description": "This folder performs basic authentication features."
		},
		{
			"name": "Check app health",
			"item": [
				{
					"name": "Check healthz driver TheQ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "18b0cdb9-444f-44ee-9f62-5ef44fd3895e",
								"exec": [
									"//  Get the maximum response time allowed.",
									"max_load_time = JSON.parse(globals.max_load_time);",
									"",
									"//  Set health response time variable.",
									"health_tries = 15;",
									"counter = 1;",
									"postman.setEnvironmentVariable(\"health_tries\", JSON.stringify(health_tries));",
									"postman.setEnvironmentVariable(\"health_counter\", JSON.stringify(counter));",
									"",
									"//  Get the response.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Test the health response.",
									"pm.test(\"Health Driver: Try \" + counter.toString() + \": Response should have 'message' property\", function() {",
									"    pm.expect(jsonData).to.have.property('message');",
									"});",
									"",
									"pm.test(\"Response message should be 'api is healthy'\", function() {",
									"    pm.expect(jsonData.message).to.be.eql('api is healthy');",
									"});",
									"",
									"//  If response time is OK, proceed to the next test.",
									"if (pm.response.responseTime < max_load_time) {",
									"    postman.setNextRequest(\"Check the readyz endpoint TheQ\");",
									"}",
									"    ",
									"//  Response time is too long.  Try again, give pod a chance to spin up.",
									"else {",
									"    postman.setNextRequest(\"Check the healthz endpoint TheQ\");",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4bb6beef-9c69-4d33-a232-608884c95661",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}healthz/",
							"host": [
								"{{url}}healthz"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Check the healthz endpoint TheQ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "69ea60fd-8676-4358-97a5-410e896b9b46",
								"exec": [
									"//  Get the maximum load time allowed.",
									"max_load_time = JSON.parse(postman.getEnvironmentVariable(\"max_load_time\"));",
									"",
									"//  Get and update variables.",
									"health_tries = JSON.parse(postman.getEnvironmentVariable(\"health_tries\"));",
									"counter = JSON.parse(postman.getEnvironmentVariable(\"health_counter\")) + 1;",
									"postman.setEnvironmentVariable(\"health_counter\", JSON.stringify(counter));",
									"",
									"//  Get the response.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Test the health response.",
									"pm.test(\"Health Driver: Try \" + counter.toString() + \": Response should have 'message' property\", function() {",
									"    pm.expect(jsonData).to.have.property('message');",
									"});",
									"",
									"pm.test(\"Response message should be 'api is healthy'\", function() {",
									"    pm.expect(jsonData.message).to.be.eql('api is healthy');",
									"});",
									"",
									"//  If response time is OK, proceed to the next test.",
									"if (pm.response.responseTime < max_load_time) {",
									"    postman.setNextRequest(\"Check the readyz endpoint TheQ\");",
									"}",
									"    ",
									"//  Response time is too long.",
									"else {",
									"    ",
									"    //  You haven't reached your maximum tries yet.  Try again.",
									"    if (counter < health_tries) {",
									"        postman.setNextRequest(\"Check the healthz endpoint\");",
									"    }",
									"    ",
									"    //   You have reached the maximum.  An error, go to next test.",
									"    else {",
									"        pm.test(\"Response should be below \" + max_load_time.toString() + ' in ' + health_tries.toString() + ' tries.', function() {",
									"            pm.expect(counter).to.be.below(health_tries);",
									"        });",
									"        postman.setNextRequest(\"Check the readyz endpoint TheQ\");",
									"    }",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5bf72efe-91fc-451e-ab94-5d5c07eecd42",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}healthz/",
							"host": [
								"{{url}}healthz"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Check the readyz endpoint TheQ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d2790f40-3781-442c-bb70-036230b470d7",
								"exec": [
									"//  Perform the standard tests.",
									"eval(environment.basic_response_test);",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Test the health response.",
									"pm.test(\"Response should have 'message' property\", function() {",
									"    pm.expect(jsonData).to.have.property('message');",
									"});",
									"",
									"pm.test(\"Response message should be 'api is ready'\", function() {",
									"    pm.expect(jsonData.message).to.be.eql('api is ready');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "727adb1b-b0c1-4659-9287-ac4c38c45d76",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}readyz/",
							"host": [
								"{{url}}readyz"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				}
			],
			"description": "Checks the application health by calling the healthz and readyz endpoints"
		},
		{
			"name": "Check user login",
			"item": [
				{
					"name": "Authenticate default QTxn user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0291bea5-bca3-4127-8d7f-dc71e1f5173c",
								"exec": [
									"//  Do the basic checks.",
									"eval(environment.basic_response_test);",
									"",
									"//  Get the response.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Test to make sure that the access token field is not null",
									"pm.test(\"Access Token is not null\", function(){",
									"    var access_token = jsonData.access_token;",
									"    pm.expect(access_token).not.eql(null);",
									"});",
									"",
									"//Test to make sure that the refresh token response field is not null",
									"pm.test(\"Refresh Token is not null\", function(){",
									"    var refresh_token = jsonData.refresh_token;",
									"    pm.expect(refresh_token).not.eql(null);",
									"});",
									"",
									"//Test to make sure that expires in response field is not nullf",
									"pm.test(\"Expires In is not null\", function(){",
									"    var expires_in = jsonData.expires_in;",
									"    pm.expect(expires_in).not.eql(null);",
									"});",
									"",
									"//Test to make sure that refresh expires in response fiels is not null",
									"pm.test(\"Refresh Expires In is not null\", function(){",
									"    var refresh_expires_in = jsonData.refresh_expires_in;",
									"    pm.expect(refresh_expires_in).not.eql(null);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "grant_type=password&client_id={{clientid}}&username={{userid}}&password={{password}}&client_secret={{client_secret}}"
						},
						"url": {
							"raw": "{{auth_url}}/auth/realms/{{realm}}/protocol/openid-connect/token?Content-Type=application/x-www-form-urlencoded",
							"host": [
								"{{auth_url}}"
							],
							"path": [
								"auth",
								"realms",
								"{{realm}}",
								"protocol",
								"openid-connect",
								"token"
							],
							"query": [
								{
									"key": "Content-Type",
									"value": "application/x-www-form-urlencoded"
								}
							]
						},
						"description": "Make sure the operator ID can log in"
					},
					"response": []
				},
				{
					"name": "Who am I TheQ",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e6695490-db07-4ba7-8521-6fe6d16eb522",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "73cdf8e0-74a9-44bf-8cba-6bd180326a6f",
								"exec": [
									"//  Run basic response tests.",
									"eval(environment.basic_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"if (jsonData.hasOwnProperty(\"csr\")) {",
									"\tcurrentOfficeId = jsonData.csr.office_id;",
									"\tcurrentOfficeNumber = jsonData.csr.office.office_number;",
									"\tcurrentCsrId = jsonData.csr.csr_id;",
									"    postman.setEnvironmentVariable(\"current_office_id\", currentOfficeId);",
									"    postman.setEnvironmentVariable(\"current_office_number\", currentOfficeNumber);",
									"    postman.setEnvironmentVariable(\"current_csr_id\", currentCsrId);",
									"};",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}csrs/me/",
							"host": [
								"{{url}}csrs"
							],
							"path": [
								"me",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Check channels",
			"item": [
				{
					"name": "Get channels",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7754d045-6bc5-4af7-afd5-f553ab8427f1",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "056b8d6b-110e-469a-a0a8-167df013bbf4",
								"exec": [
									"//  Run basic tests.",
									"eval(environment.basic_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"properties\" : {",
									"        \"channel_name\" : {",
									"            \"type\" : \"string\"",
									"        },",
									"        \"channel_id\" : {",
									"            \"type\" : [\"number\", \"object\"]",
									"        }",
									"    },",
									"    \"required\" : [\"channel_name\", \"channel_id\"]",
									"};",
									"",
									"//  Loop to validate schema of each channel.",
									"var allChannels = jsonData.channels;",
									"var channelCount = 0;",
									"var phoneId = 0;",
									"var emailId = 0;",
									"var phoneText = \"Phone\";",
									"var emailText = \"Email/Fax/Mail\";",
									"allChannels.forEach(function(channel) {",
									"    channelCount ++;",
									"    var testTitle = \"Channel (\" + channelCount + \"): ID \" + channel.channel_id + \" Name \" + channel.channel_name + \" conforms to schema\";",
									"    tests[testTitle] = tv4.validate(channel, schema);",
									"    if (channel.channel_name === phoneText) {",
									"        phoneId = channel.channel_id;",
									"    }",
									"    if (channel.channel_name === emailText) {",
									"        emailId = channel.channel_id;",
									"    }",
									"});",
									"",
									"//  Check that you found the phone ID.",
									"pm.test(phoneText + ' id was ' + phoneId.toString() + ' (should not equal 0)', function() {",
									"    pm.expect(phoneId).to.not.be.eql(0);",
									"});",
									"",
									"//  Check that you found the email ID.",
									"pm.test(emailText + ' id was ' + emailId.toString() + ' (should not equal 0)', function() {",
									"    pm.expect(emailId).to.not.be.eql(0);",
									"});",
									"",
									"//  Store this ID for future use.",
									"postman.setEnvironmentVariable(\"channel_telephone_id\", JSON.stringify(phoneId));",
									"postman.setEnvironmentVariable(\"channel_email_id\", JSON.stringify(emailId));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}channels/",
							"host": [
								"{{url}}channels"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				}
			]
		},
		{
			"name": "Check counters",
			"item": [
				{
					"name": "Store CSR and Office Info",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e1dc3a75-ed33-4b7c-a1aa-7eb0dc1cea26",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9cd8bf87-13f4-4778-a738-21d68aba0a24",
								"exec": [
									"// Define the JSON Schema expected in response",
									"var CSRSSchema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"csr_id\": {\"type\": \"number\"},",
									"        \"csr_state\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"csr_state_desc\": {\"type\": \"string\"},",
									"                \"csr_state_id\": {\"type\": \"number\"},",
									"                \"csr_state_name\": {\"type\": \"string\"}",
									"            },",
									"            \"required\": [\"csr_state_desc\", \"csr_state_id\", \"csr_state_name\"]",
									"        },",
									"        \"csr_state_id\": {\"type\": \"number\"},",
									"        \"deleted\": {},",
									"        \"finance_designate\": {\"type\": \"number\"},",
									"        \"office_manager\": {\"type\": \"number\"},",
									"        \"ita2_designate\": {\"type\": \"number\"},",
									"        \"office\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"appointments_enabled_ind\": {\"type\": \"number\"},",
									"                \"exams_enabled_ind\": {\"type\": \"number\"},",
									"                \"office_id\": {\"type\": \"number\"},",
									"                \"office_name\": {\"type\": \"string\"},",
									"                \"office_number\": {\"type\": \"number\"},",
									"                \"sb\":{",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"sb_id\": {\"type\": \"number\"},",
									"                        \"sb_type\": {\"type\": \"string\"}",
									"                    },",
									"                    \"required\": [\"sb_id\", \"sb_type\"]",
									"                }",
									"            },",
									"            \"required\": [\"appointments_enabled_ind\", \"exams_enabled_ind\", \"office_id\", \"office_name\", \"office_number\", \"sb\"]",
									"        },",
									"        \"office_name\": {\"type\": \"string\"},",
									"        \"pesticide_designate\": {\"type\": \"number\"},",
									"        \"qt_xn_csr_ind\": {\"type\": \"number\"},",
									"        \"receptionist_ind\": {\"type\": \"number\"},",
									"        \"role\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"role_code\": {\"type\": \"string\"},",
									"                \"role_desc\": {\"type\": \"string\"},",
									"                \"role_id\": {\"type\": \"number\"}",
									"            },",
									"            \"required\": [\"role_code\", \"role_desc\", \"role_id\"]",
									"        },",
									"        \"role_id\": {\"type\": \"number\"},",
									"        \"username\": {\"type\": \"string\"}",
									"    },",
									"    \"attention_needed\": {\"type\": \"boolean\"},",
									"    \"required\": [\"csr\", \"attention_needed\"]",
									"};",
									"",
									"//  Run basic response tests.",
									"eval(environment.basic_response_test);",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Test to see if response schema is valid",
									"pm.test(\"Validate Response CSRs Schema\", function(){",
									"    pm.expect(tv4.validate(jsonData, CSRSSchema)).to.be.true;",
									"});",
									"",
									"//  Make sure that jsonData has an csr property.",
									"pm.test(\"Response should have csr property\", function(){",
									"    pm.expect(jsonData.hasOwnProperty(\"csr\")).to.be.true;",
									"});",
									"",
									"var csr = 0;",
									"var office = 0;",
									"var counters = 0;",
									"var counter_text = \"Counter\";",
									"var counter_id = 0;",
									"var qtxn_text = \"Quick Trans\";",
									"var qtxn_id = 0;",
									"",
									"if (jsonData.hasOwnProperty(\"csr\")) {",
									"\tcurrentOfficeId = jsonData.csr.office_id;",
									"\tcurrentOfficeNumber = jsonData.csr.office.office_number;",
									"    postman.setEnvironmentVariable(\"current_office_id\", currentOfficeId);",
									"    postman.setEnvironmentVariable(\"current_office_number\", currentOfficeNumber);",
									"    postman.setEnvironmentVariable(\"current_csr_id\", jsonData.csr.csr_id);",
									"    ",
									"    csr = jsonData.csr;",
									"    counter_id = 0;",
									"    qtxn_id = 0;",
									"",
									"    //  Make sure that jsonData has an booking property.",
									"    pm.test(\"CSR should have office property\", function(){",
									"        pm.expect(csr.hasOwnProperty(\"office\")).to.be.true;",
									"    });",
									"    ",
									"    //  Make sure office has counter property.",
									"    if (csr.hasOwnProperty(\"office\")) {",
									"        office = csr.office;",
									"        ",
									"        //  Make sure that jsonData has an booking property.",
									"        pm.test(\"Office should have counters property\", function(){",
									"            pm.expect(office.hasOwnProperty(\"counters\")).to.be.true;",
									"        });",
									"",
									"        //  Make sure office has counter property.",
									"        if (office.hasOwnProperty(\"counters\")) {",
									"            counters = office.counters;",
									"            ",
									"            //  Search for Counter and Quick Trans counters",
									"            counters.forEach(function(counter) {",
									"                if (counter.counter_name === counter_text) {",
									"                    counter_id = counter.counter_id;",
									"                }",
									"                if (counter.counter_name === qtxn_text) {",
									"                    qtxn_id = counter.counter_id;",
									"                }",
									"            });",
									"            ",
									"            //  Make sure you found the right IDs.",
									"            pm.test(\"Counter ID (\" + counter_id.toString() + \") should not be 0\", function(){",
									"                pm.expect(counter_id).to.not.be.eql(0);",
									"            });",
									"            pm.test(\"Quick Transaction ID (\" + qtxn_id.toString() + \") should not be 0\", function(){",
									"                pm.expect(qtxn_id).to.not.be.eql(0);",
									"            });",
									"            ",
									"            //  Store the ids for future use.",
									"            // postman.setEnvironmentVariable(\"counter_id\", counter_id);",
									"            // postman.setEnvironmentVariable(\"qtxn_id\", qtxn_id);",
									"            postman.setEnvironmentVariable(\"counter_id\", JSON.stringify(counter_id.toString()));",
									"            postman.setEnvironmentVariable(\"qtxn_id\", JSON.stringify(qtxn_id.toString()));",
									"        }",
									"",
									"        ",
									"    }",
									"",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}csrs/me/",
							"host": [
								"{{url}}csrs"
							],
							"path": [
								"me",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Check categories",
			"item": [
				{
					"name": "Get categories",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5e84dc4a-d459-4e29-a497-51a2ddd76dbe",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ceb3e941-48df-4f63-bcd3-ac24f8b8f1e8",
								"exec": [
									"//  Run basic tests.",
									"eval(environment.basic_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"properties\" : {",
									"        \"display_dashboard_ind\" : {",
									"            \"type\" : \"number\"",
									"        },",
									"        \"deleted\" : {",
									"            \"type\" : [\"object\", \"null\"]",
									"        },",
									"        \"actual_service_ind\" : {",
									"            \"type\" : \"number\"",
									"        },",
									"        \"service_id\" : {",
									"            \"type\" : [\"number\", \"object\"]",
									"        },",
									"        \"service_code\" : {",
									"            \"type\" : \"string\"",
									"        },",
									"        \"prefix\" : {",
									"            \"type\" : \"string\"",
									"        },",
									"        \"service_name\" : {",
									"            \"type\" : \"string\"",
									"        },",
									"        \"parent_id\" : {",
									"            \"type\" : [\"object\", \"null\" ]",
									"        },",
									"        \"service_desc\" : {",
									"            \"type\" : \"string\"",
									"        }",
									"    },",
									"    \"required\" : [\"display_dashboard_ind\", \"deleted\", \"actual_service_ind\", \"service_id\", \"service_code\",",
									"                  \"prefix\", \"service_name\", \"parent_id\", \"service_desc\"]",
									"};",
									"",
									"//  Loop to validate schema of each channel.",
									"var allCategories = jsonData.categories;",
									"var categoryCount = 0;",
									"allCategories.forEach(function(category) {",
									"    categoryCount ++;",
									"    var testTitle = \"Category (\" + categoryCount + \"): \" + category.service_name + \" - \";",
									"    tests[testTitle + \"conforms to schema\"] = tv4.validate(category, schema);",
									"    var displayInd = category.display_dashboard_ind;",
									"    var serviceInd = category.actual_service_ind;",
									"",
									"    //  Test that returned data is valid.",
									"    pm.test(\"--> \" + testTitle + \"display_dashboard_ind must be 0 (is \" + displayInd.toString() + \")\", function(){",
									"        pm.expect(displayInd).to.be.eql(0);",
									"    });",
									"",
									"    pm.test(\"--> \" + testTitle + \"actual_service_ind must be 0 (is \" + serviceInd.toString() + \")\", function(){",
									"        pm.expect(serviceInd).to.be.eql(0);",
									"    });",
									"    ",
									"    pm.test(\"--> \" + testTitle + \"parent_id must be null\", function(){",
									"        pm.expect(category.parent_id).to.be.null;",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}categories/",
							"host": [
								"{{url}}categories"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				}
			]
		},
		{
			"name": "Check services",
			"item": [
				{
					"name": "Get services",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a610e577-9e10-43ca-a900-6888424d37d1",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9bb06a20-2a0d-4d92-ac03-00e6f7a48300",
								"exec": [
									"//  Run basic tests.",
									"eval(environment.basic_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"properties\" : {",
									"        \"display_dashboard_ind\" : {",
									"            \"type\" : \"number\"",
									"        },",
									"        \"deleted\" : {",
									"            \"type\" : [\"object\", \"null\"]",
									"        },",
									"        \"actual_service_ind\" : {",
									"            \"type\" : \"number\"",
									"        },",
									"        \"service_id\" : {",
									"            \"type\" : [\"number\", \"object\"]",
									"        },",
									"        \"service_code\" : {",
									"            \"type\" : \"string\"",
									"        },",
									"        \"prefix\" : {",
									"            \"type\" : \"string\"",
									"        },",
									"        \"service_name\" : {",
									"            \"type\" : \"string\"",
									"        },",
									"        \"parent_id\" : {",
									"            \"type\" : [\"object\", \"number\", \"null\" ]",
									"        },",
									"        \"service_desc\" : {",
									"            \"type\" : \"string\"",
									"        }",
									"    },",
									"    \"required\" : [\"display_dashboard_ind\", \"deleted\", \"actual_service_ind\", \"service_id\", \"service_code\",",
									"                  \"prefix\", \"service_name\", \"parent_id\", \"service_desc\"]",
									"};",
									"",
									"//  Loop to validate schema of each channel.",
									"var allElements = jsonData.services;",
									"var elementCount = 0;",
									"var elementMax = Math.min(10, allElements.length);",
									"//allElements.forEach(function(element) {",
									"for (var currentElement = 0; currentElement < elementMax; currentElement++) {",
									"    element = allElements[currentElement];",
									"    elementCount ++;",
									"    var testTitle = \"Service (\" + elementCount + \"): \" + element.service_name + \" - \";",
									"    tests[testTitle + \"conforms to schema\"] = tv4.validate(element, schema);",
									"    displayInd = element.display_dashboard_ind;",
									"    serviceInd = element.actual_service_ind;",
									"",
									"    //  Test that returned data is valid.",
									"    pm.test(\"--> \" + testTitle + \"display_dashboard_ind must be 0 or 1 (is \" + displayInd.toString() + \")\", function(){",
									"        pm.expect(displayInd).to.be.within(0, 1);",
									"    });",
									"",
									"    //  Test that returned data is valid.",
									"    pm.test(\"--> \" + testTitle + \"actual_service_ind must be 1 (is \" + serviceInd.toString() + \")\", function(){",
									"        pm.expect(serviceInd).to.be.eql(1);",
									"    });",
									"    ",
									"    //  Test that returned data is valid.",
									"    pm.test(\"--> \" + testTitle + \"parent_id must not be null\", function(){",
									"        pm.expect(element.parent_id).to.not.be.null;",
									"    });",
									"}",
									"",
									"//  Declare and initialize variables.",
									"var mspId = 0;",
									"var taxId = 0;",
									"var mspText = \"Payment - MSP\";",
									"var propTaxText = \"Other - PTAX\";",
									"",
									"//  Look for the MSP and Property Tax IDs.",
									"allElements.forEach(function(element) {",
									"    if (element.service_name === mspText) {",
									"        mspId = element.service_id;",
									"    }",
									"    if (element.service_name === propTaxText) {",
									"        taxId = element.service_id;",
									"    }",
									"});",
									"",
									"//  Check that you found the MSP service.",
									"pm.test(mspText + ' id was ' + mspId.toString() + ' (should not equal 0)', function() {",
									"    pm.expect(mspId).to.not.be.eql(0);",
									"});",
									"",
									"//  Check that you found the Property Tax service.",
									"pm.test(propTaxText + ' id was ' + taxId.toString() + ' (should not equal 0)', function() {",
									"    pm.expect(taxId).to.not.be.eql(0);",
									"});",
									"",
									"//  Store these IDs for future use.",
									"postman.setEnvironmentVariable(\"service_MSP_id\", JSON.stringify(mspId));",
									"postman.setEnvironmentVariable(\"service_PropTax_id\", JSON.stringify(taxId));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}services/",
							"host": [
								"{{url}}services"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				}
			]
		},
		{
			"name": "Clear queue for tests",
			"item": [
				{
					"name": "Delete citizen queue driver",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "508ceef5-fc4e-4cee-a909-9425ba98ce22",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b10b1f05-eb30-422a-b3fb-5c0a0f5fd88f",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"",
									"    //  Delete citizens, if there are any.",
									"    if (citizenIds.length > 0) {",
									"        ",
									"        //  Set the current_client, to be deleted.",
									"        postman.setEnvironmentVariable(\"current_client\", JSON.stringify(citizenIds.shift()));",
									"        postman.setEnvironmentVariable(\"current_queue\", JSON.stringify(citizenIds));",
									"    ",
									"        if (currentCitizen.service_reqs.length === 0) {",
									"            postman.setNextRequest(\"Next citizen left\");",
									"            // //  Temporary kludge.  Citizen left not working, so add SR, then delete.",
									"            // postman.setNextRequest(\"Temporary add MSP service request\");",
									"        }",
									"        else {",
									"            postman.setNextRequest(\"Next citizen finish service\");",
									"        }",
									"    }",
									"    ",
									"    //  No more citizens.  Clear the current, queue variables.",
									"    else {",
									"        postman.setEnvironmentVariable(\"current_client\", JSON.stringify(\"\"));",
									"        postman.setEnvironmentVariable(\"current_queue\", JSON.stringify(\"\"));",
									"        postman.setNextRequest(\"End clear queue via healthz endpoint\");",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Next citizen finish service",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "14a344f4-d96c-4fe0-a0ed-104d1ac7a667",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "68030b97-44a3-4226-aa36-402211b8f054",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"var citizenToBeDeleted = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"var citizenData = jsonData.citizen;",
									"var testTitle = \"Check citizen finish service\";",
									"",
									"//  Make sure the response is valid.",
									"pm.test(testTitle + \": Response should have property 'citizen'\", function(){",
									"    pm.expect(jsonData.hasOwnProperty(\"citizen\")).to.be.true;",
									"});",
									"pm.test(testTitle + \": Response should not have property 'message' indicating an error\", function(){",
									"    pm.expect(jsonData.hasOwnProperty(\"message\")).to.be.false;",
									"});",
									"pm.test(testTitle + \": Citizen marked as finished should be citizen \" + citizenToBeDeleted.toString(), function(){",
									"    pm.expect(citizenData.citizen_id).to.be.eql(citizenToBeDeleted);",
									"});",
									"",
									"//  Go back to the delete citizen queue driver.",
									"postman.setNextRequest(\"Delete citizen queue driver\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/finish_service/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"finish_service",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Next citizen citizen left",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bf536f81-0678-43c7-880e-ad94330362d3",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ffbf40a3-d3d2-470d-b921-765658e2afc5",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = jsonData.citizen;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Get environment variables.",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"",
									"    //  Perform checks.",
									"    pm.test(\"Check there are no citizens waiting\", function(){",
									"        pm.expect(citizenIds.length).to.be.eql(0);",
									"    });",
									"    pm.test(\"Citizen that left must be \" + currentCitizen.citizen_id.toString() + \" (is \" + currentCitizenId.toString(), function(){",
									"        pm.expect(currentCitizen.citizen_id).to.be.eql(currentCitizenId);",
									"    });",
									"}",
									"",
									"//  Go back to the delete citizen queue driver.",
									"postman.setNextRequest(\"Delete citizen queue driver\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/citizen_left/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"citizen_left",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Temporary add MSP service request",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c0809a99-2b4d-4385-a272-7b4233bd36e8",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f53c3f28-35b6-4404-b456-7885f22e706b",
								"exec": [
									"//  Run create tests.",
									"eval(environment.create_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"var svcReq = jsonData.service_request;",
									"",
									"//  Set schema of the service_request property.",
									"var schema = {",
									"    \"properties\" : {",
									"        \"periods\" : {",
									"            \"type\" : \"array\"",
									"        },",
									"        \"service_id\" : {",
									"            \"type\" : [\"number\", \"object\"]",
									"        },",
									"        \"service\" : {",
									"            \"type\" : \"object\"",
									"        },",
									"        \"sr_state\" : {",
									"            \"type\" : \"object\"",
									"        },",
									"        \"quantity\" : {",
									"            \"type\" : \"number\"",
									"        },",
									"        \"sr_id\" : {",
									"            \"type\" : [\"number\", \"object\"]",
									"        },",
									"        \"citizen\" : {",
									"            \"type\" :[\"number\", \"object\"]",
									"        },",
									"        \"citizen_id\" : {",
									"            \"type\" : [\"number\", \"object\"]",
									"        },",
									"        \"channel\" : {",
									"            \"type\" : \"object\"",
									"        },",
									"        \"channel_id\" : {",
									"            \"type\" : [\"number\", \"object\"]",
									"        }",
									"    },",
									"    // \"required\" : [\"periods\", \"service_id\", \"sr_state_id\", \"service\"]",
									"    \"required\" : [\"periods\", \"service_id\", \"service\", \"sr_state\", \"quantity\", \"sr_id\",",
									"                  \"citizen\", \"citizen_id\", \"channel\", \"channel_id\"]",
									"};",
									"",
									"//  Make sure the response is valid.",
									"pm.test(\"Response has service_request property\", function(){",
									"    pm.expect(jsonData.hasOwnProperty(\"service_request\")).to.be.true;",
									"});",
									"pm.test(\"Response has errors property\", function(){",
									"    pm.expect(jsonData.hasOwnProperty(\"errors\")).to.be.true;",
									"});",
									"tests[\"Service_request property has correct schema\"] = tv4.validate(svcReq, schema);",
									"",
									"//  Go back to the clear citizen driver.",
									"postman.setNextRequest(\"Next citizen finish service\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"service_request\" : {\n\t\t\"service_id\" : {{service_MSP_id}},\n\t\t\"citizen_id\" : {{current_client}},\n\t\t\"quantity\" : 1,\n\t\t\"channel_id\" : {{channel_telephone_id}}\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}service_requests/",
							"host": [
								"{{url}}service_requests"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "End clear queue via healthz endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5246a7bb-0527-4950-ad2a-2205386b58f1",
								"exec": [
									"//  Perform the standard tests.",
									"eval(environment.basic_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Test the health response.",
									"pm.test(\"Response should have 'message' property\", function() {",
									"    pm.expect(jsonData).to.have.property('message');",
									"});",
									"",
									"pm.test(\"Response message should be 'api is healthy'\", function() {",
									"    pm.expect(jsonData.message).to.be.eql('api is healthy');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "04965d1f-b5a2-4401-a7eb-87ccc7a7b61a",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}healthz/",
							"host": [
								"{{url}}healthz"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Check citizen through queue (QT1)",
			"item": [
				{
					"name": "Check no citizens (QT1)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0094df22-96cd-4ade-a470-81ba49878491",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8ea0b418-9163-4924-9d41-a51c81788368",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"var allOK = true;",
									"",
									"//  If citizen property was present.",
									"",
									"if (allElements !== null) {",
									"",
									"    //  Make sure it had a length of 0.",
									"    if (allElements.length !== 0) {",
									"        allOK = false;",
									"    }",
									"}",
									"",
									"pm.test(\"There should be no citizens in the office\", function() {",
									"    pm.expect(allOK).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Create citizen (QT1)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "79535868-bce0-4a20-8965-b6b0973dff7a",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b7a2b44a-f168-49a5-8ca2-a85153a80c4c",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.create_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    pm.test(\"Only one citizen should be in the office\", function() {",
									"        pm.expect(citizenIds.length).to.be.eql(1);",
									"    });",
									"    pm.test(\"Current citizen name should be null\", function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.null;",
									"    });",
									"    pm.test(\"Current citizen comments should be null\", function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.null;",
									"    });",
									"    pm.test(\"Citizen should have no service requests\", function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(0);",
									"    });",
									"    ",
									"    //  Store the ID of the citizen just created.",
									"    postman.setEnvironmentVariable(\"current_client\", JSON.stringify(citizenIds.shift()));",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}citizens/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Edit specific citizen (QT1)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b1e064b5-7104-44a0-9b26-5ff359ad6341",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "79fe3175-ad9e-47c8-9a1a-b52738a0e7be",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"",
									"    //  Perform tests.",
									"    pm.test(\"Must be one active citizen in the office\", function() {",
									"        pm.expect(citizenIds.length).to.be.eql(1);",
									"    });",
									"    pm.test('Citizen Id must equal \"' + currentCitizenId + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_id).to.be.eql(currentCitizenId);",
									"    });",
									"    pm.test('Citizen name must equal \"' + citizenName + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.eql(citizenName);",
									"    });",
									"    pm.test('Citizen comment must equal \"' + citizenComment + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.eql(citizenComment);",
									"    });",
									"    pm.test(\"Citizen should have no service requests\", function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(0);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"citizen_name\" : {{citizen_name}},\n    \"citizen_comments\" : {{citizen_comment}}\n}"
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Add property tax via phone service request (QT1)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1ad12358-e875-4141-87fb-ab4df4e13c68",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e5f7a647-5713-410b-80b6-c97d3020b7c1",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.create_response_test);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"service_request\" : {\n\t\t\"service_id\" : {{service_PropTax_id}},\n\t\t\"citizen_id\" : {{current_client}},\n\t\t\"quantity\" : {{citizen_quantity}},\n\t\t\"channel_id\" : {{channel_telephone_id}}\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}service_requests/",
							"host": [
								"{{url}}service_requests"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "List specific citizen (QT1)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "17013902-e5f5-456f-be16-0a88d52fb53d",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f73275a6-59ab-4a69-aff8-aa52905ba662",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"",
									"    //  Perform tests.",
									"    pm.test('Must be one active citizen in the office', function() {",
									"        pm.expect(citizenIds.length).to.be.eql(1);",
									"    });",
									"    pm.test('Citizen id must equal \"' + currentCitizenId + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_id).to.be.eql(currentCitizenId);",
									"    });",
									"    pm.test('Citizen name must equal \"' + citizenName + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.eql(citizenName);",
									"    });",
									"    pm.test('Citizen comment must equal \"' + citizenComment + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.eql(citizenComment);",
									"    });",
									"    pm.test('There must be only one service request', function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(1);",
									"    });",
									"    pm.test('Service request state must be \"Active\"', function() {",
									"        pm.expect(currentCitizen.service_reqs[0].sr_state.sr_code).to.be.eql(\"Active\");",
									"    });",
									"    pm.test('Service request service must be ' + citizenService, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].service_id).to.be.eql(citizenService);",
									"    });",
									"    pm.test('Service request quantity must be ' + citizenQuantity, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].quantity).to.be.eql(citizenQuantity);",
									"    });",
									"    pm.test('Service request must have one period', function() {",
									"        pm.expect(currentCitizen.service_reqs[0].periods.length).to.be.eql(1);",
									"    });",
									"    pm.test('Service request period channel must be ' + citizenChannel, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].channel_id).to.be.eql(citizenChannel);",
									"    });",
									"    pm.test('Service request period state must be \"Ticket Creation\"', function() {",
									"        pm.expect(currentCitizen.service_reqs[0].periods[0].ps.ps_name).to.be.eql(\"Ticket Creation\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Add citizen to queue (QT1)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1e2b7603-3f18-46fc-b9c6-dcb8ec823285",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ea06bf82-b32a-4f7b-823f-7a827332fd9e",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    pm.test('Must be one active citizen in the office', function() {",
									"        pm.expect(citizenIds.length).to.be.eql(1);",
									"    });",
									"    pm.test('Citizen Id must equal \"' + currentCitizenId + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_id).to.be.eql(currentCitizenId);",
									"    });",
									"    pm.test('Citizen name must equal \"' + citizenName + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.eql(citizenName);",
									"    });",
									"    pm.test('Citizen comment must equal \"' + citizenComment + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.eql(citizenComment);",
									"    });",
									"    pm.test('There must be only one service request', function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(1);",
									"    });",
									"    pm.test('Service request state must be \"Pending\"', function() {",
									"        pm.expect(currentCitizen.service_reqs[0].sr_state.sr_code).to.be.eql(\"Pending\");",
									"    });",
									"    pm.test('Service request service must be ' + citizenService, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].service_id).to.be.eql(citizenService);",
									"    });",
									"    pm.test('Service request quantity must be ' + citizenQuantity, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].quantity).to.be.eql(citizenQuantity);",
									"    });",
									"    pm.test('Service request periods length must be 2 (now two periods)', function() {",
									"        pm.expect(allPeriods.length).to.be.eql(2);",
									"    });",
									"    pm.test('There must only be one open period', function() {",
									"        pm.expect(openPeriodCount).to.be.eql(1);",
									"    });",
									"    pm.test('The open period state must be \"Waiting\"', function() {",
									"        pm.expect(openPeriod.ps.ps_name).to.be.eql(\"Waiting\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/add_to_queue/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"add_to_queue",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Invite specific citizen (QT1)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "54d3c284-b4d0-4977-8200-4e17543492de",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d8ee0396-193f-4a3a-877d-fd2d110802a3",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    pm.test('Must be one active citizen in the office', function() {",
									"        pm.expect(citizenIds.length).to.be.eql(1);",
									"    });",
									"    pm.test('Citizen Id must equal \"' + currentCitizenId + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_id).to.be.eql(currentCitizenId);",
									"    });",
									"    pm.test('Citizen name must equal \"' + citizenName + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.eql(citizenName);",
									"    });",
									"    pm.test('Citizen comment must equal \"' + citizenComment + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.eql(citizenComment);",
									"    });",
									"    pm.test('There must be only one service request', function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(1);",
									"    });",
									"    pm.test('Service request state must be \"Active\"', function() {",
									"        pm.expect(currentCitizen.service_reqs[0].sr_state.sr_code).to.be.eql(\"Active\");",
									"    });",
									"    pm.test('Service request service must be ' + citizenService, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].service_id).to.be.eql(citizenService);",
									"    });",
									"    pm.test('Service request quantity must be ' + citizenQuantity, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].quantity).to.be.eql(citizenQuantity);",
									"    });",
									"    pm.test('Service request periods length must be 3 (now three periods)', function() {",
									"        pm.expect(allPeriods.length).to.be.eql(3);",
									"    });",
									"    pm.test('There must only be one open period', function() {",
									"        pm.expect(openPeriodCount).to.be.eql(1);",
									"    });",
									"    pm.test('The open period state must be \"Invited\"', function() {",
									"        pm.expect(openPeriod.ps.ps_name).to.be.eql(\"Invited\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/invite/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"invite",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Begin serving citizen (QT1)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7db00a00-e5ba-475e-b7c0-f8eefa6a22b7",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "16ef7c9f-01ac-478c-b660-e4145136f4cf",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    pm.test('Must be one active citizen in the office', function() {",
									"        pm.expect(citizenIds.length).to.be.eql(1);",
									"    });",
									"    pm.test('Citizen Id must equal \"' + currentCitizenId + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_id).to.be.eql(currentCitizenId);",
									"    });",
									"    pm.test('Citizen name must equal \"' + citizenName + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.eql(citizenName);",
									"    });",
									"    pm.test('Citizen comment must equal \"' + citizenComment + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.eql(citizenComment);",
									"    });",
									"    pm.test('There must be only one service request', function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(1);",
									"    });",
									"    pm.test('Service request state must be \"Active\"', function() {",
									"        pm.expect(currentCitizen.service_reqs[0].sr_state.sr_code).to.be.eql(\"Active\");",
									"    });",
									"    pm.test('Service request service must be ' + citizenService, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].service_id).to.be.eql(citizenService);",
									"    });",
									"    pm.test('Service request quantity must be ' + citizenQuantity, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].quantity).to.be.eql(citizenQuantity);",
									"    });",
									"    pm.test('Service request periods length must be 4 (now four periods)', function() {",
									"        pm.expect(allPeriods.length).to.be.eql(4);",
									"    });",
									"    pm.test('There must only be one open period', function() {",
									"        pm.expect(openPeriodCount).to.be.eql(1);",
									"    });",
									"    pm.test('The open period state must be \"Being Served\"', function() {",
									"        pm.expect(openPeriod.ps.ps_name).to.be.eql(\"Being Served\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/begin_service/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"begin_service",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Finish serving citizen (QT1)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "88f9e62c-2794-441e-bdf4-62d3e4320fbc",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4006958c-3826-4599-94fe-dd753029885b",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = jsonData.citizen;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    pm.test('Must be no active citizens in the office', function() {",
									"        pm.expect(citizenIds.length).to.be.eql(0);",
									"    });",
									"    pm.test('Citizen Id must equal \"' + currentCitizenId + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_id).to.be.eql(currentCitizenId);",
									"    });",
									"    pm.test('Citizen name must equal \"' + citizenName + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.eql(citizenName);",
									"    });",
									"    pm.test('Citizen comment must be null on service completion', function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.eql(null);",
									"    });",
									"    pm.test('There must be only one service request', function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(1);",
									"    });",
									"    pm.test('Service request state must be \"Complete\"', function() {",
									"        pm.expect(currentCitizen.service_reqs[0].sr_state.sr_code).to.be.eql(\"Complete\");",
									"    });",
									"    pm.test('Service request service must be ' + citizenService, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].service_id).to.be.eql(citizenService);",
									"    });",
									"    pm.test('Service request quantity must be ' + citizenQuantity, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].quantity).to.be.eql(citizenQuantity);",
									"    });",
									"    pm.test('Service request periods length must be 4 (still four periods)', function() {",
									"        pm.expect(allPeriods.length).to.be.eql(4);",
									"    });",
									"    pm.test('There must be no open periods', function() {",
									"        pm.expect(openPeriodCount).to.be.eql(0);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/finish_service/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"finish_service",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				}
			]
		},
		{
			"name": "Check citizen begin-hold-finish (QT2)",
			"item": [
				{
					"name": "Check no citizens (QT2)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ca380a2b-f525-4ef0-9b55-90c025bfe8d9",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b5a7d0e5-7ae1-4a60-9e41-11c8587a0343",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"var allOK = true;",
									"",
									"//  If citizen property was present.",
									"if (allElements !== null) {",
									"",
									"    //  Make sure it had a length of 0.",
									"    if (allElements.length !== 0) {",
									"        allOK = false;",
									"    }",
									"}",
									"",
									"pm.test(\"There should be no citizens in the office\", function() {",
									"    pm.expect(allOK).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Create citizen (QT2)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "410eb6fa-6295-449d-90a0-c94bb64a9739",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "85b27d35-bb42-4e42-b84c-3742a5e0f247",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.create_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"",
									"    //  Perform tests.",
									"    pm.test(\"Only one citizen should be in the office\", function() {",
									"        pm.expect(citizenIds.length).to.be.eql(1);",
									"    });",
									"    pm.test(\"Current citizen name should be null\", function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.null;",
									"    });",
									"    pm.test(\"Current citizen comments should be null\", function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.null;",
									"    });",
									"    pm.test(\"Citizen should have no service requests\", function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(0);",
									"    });",
									"    ",
									"    //  Store the ID of the citizen just created.",
									"    postman.setEnvironmentVariable(\"current_client\", JSON.stringify(citizenIds.shift()));",
									"}    ",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}citizens/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Edit specific citizen (QT2)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ea240856-5fb7-47f5-a9b6-3fba56610617",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									"",
									"// //  Get data, create JSON body.",
									"// var citizenName = postman.getEnvironmentVariable(\"citizen_name\");",
									"// var citizenComments = postman.getEnvironmentVariable(\"citizen_comment\");",
									"// var bodyData = {",
									"//     \"citizen_name\" : citizenName,",
									"//     \"citizen_comments\" : citizenComments",
									"// }",
									"",
									"// //  Store the data in an environment variable.",
									"// postman.setEnvironmentVariable(\"putBody\", JSON.stringify(bodyData));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9435e49b-eeda-4c06-88e7-aeb02b8b0efe",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"",
									"    //  Perform tests.",
									"    pm.test(\"Must be one active citizen in the office\", function() {",
									"        pm.expect(citizenIds.length).to.be.eql(1);",
									"    });",
									"    pm.test('Citizen Id must equal \"' + currentCitizenId + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_id).to.be.eql(currentCitizenId);",
									"    });",
									"    pm.test('Citizen name must equal \"' + citizenName + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.eql(citizenName);",
									"    });",
									"    pm.test('Citizen comment must equal \"' + citizenComment + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.eql(citizenComment);",
									"    });",
									"    pm.test(\"Citizen should have no service requests\", function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(0);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"citizen_name\" : {{citizen_name}},\n    \"citizen_comments\" : {{citizen_comment}}\n}"
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Add property tax via phone service request (QT2)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6f95abc9-7854-4b08-b141-64296440b190",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "14725e6d-565c-450e-ab8c-cd2a3e7c3333",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.create_response_test);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"service_request\" : {\n\t\t\"service_id\" : {{service_PropTax_id}},\n\t\t\"citizen_id\" : {{current_client}},\n\t\t\"quantity\" : {{citizen_quantity}},\n\t\t\"channel_id\" : {{channel_telephone_id}}\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}service_requests/",
							"host": [
								"{{url}}service_requests"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "List specific citizen (QT2)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "10ad224f-52b3-44be-9dcb-2f1b873f9143",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ca91232c-ffa0-45b7-9e38-b7b25536ec3b",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"",
									"    //  Perform tests.",
									"    pm.test('Must be one active citizen in the office', function() {",
									"        pm.expect(citizenIds.length).to.be.eql(1);",
									"    });",
									"    pm.test('Citizen id must equal \"' + currentCitizenId + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_id).to.be.eql(currentCitizenId);",
									"    });",
									"    pm.test('Citizen name must equal \"' + citizenName + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.eql(citizenName);",
									"    });",
									"    pm.test('Citizen comment must equal \"' + citizenComment + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.eql(citizenComment);",
									"    });",
									"    pm.test('There must be only one service request', function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(1);",
									"    });",
									"    pm.test('Service request state must be \"Active\"', function() {",
									"        pm.expect(currentCitizen.service_reqs[0].sr_state.sr_code).to.be.eql(\"Active\");",
									"    });",
									"    pm.test('Service request service must be ' + citizenService, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].service_id).to.be.eql(citizenService);",
									"    });",
									"    pm.test('Service request quantity must be ' + citizenQuantity, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].quantity).to.be.eql(citizenQuantity);",
									"    });",
									"    pm.test('Service request must have one period', function() {",
									"        pm.expect(currentCitizen.service_reqs[0].periods.length).to.be.eql(1);",
									"    });",
									"    pm.test('Service request period channel must be ' + citizenChannel, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].channel_id).to.be.eql(citizenChannel);",
									"    });",
									"    pm.test('Service request period state must be \"Ticket Creation\"', function() {",
									"        pm.expect(currentCitizen.service_reqs[0].periods[0].ps.ps_name).to.be.eql(\"Ticket Creation\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Begin serving citizen (QT2)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e5bdc8ad-6887-4032-9e38-a73843a51949",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "68ff52bf-9f37-436e-81bf-4768f6712752",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    pm.test('Must be one active citizen in the office', function() {",
									"        pm.expect(citizenIds.length).to.be.eql(1);",
									"    });",
									"    pm.test('Citizen Id must equal \"' + currentCitizenId + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_id).to.be.eql(currentCitizenId);",
									"    });",
									"    pm.test('Citizen name must equal \"' + citizenName + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.eql(citizenName);",
									"    });",
									"    pm.test('Citizen comment must equal \"' + citizenComment + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.eql(citizenComment);",
									"    });",
									"    pm.test('There must be only one service request', function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(1);",
									"    });",
									"    pm.test('Service request state must be \"Active\"', function() {",
									"        pm.expect(currentCitizen.service_reqs[0].sr_state.sr_code).to.be.eql(\"Active\");",
									"    });",
									"    pm.test('Service request service must be ' + citizenService, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].service_id).to.be.eql(citizenService);",
									"    });",
									"    pm.test('Service request quantity must be ' + citizenQuantity, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].quantity).to.be.eql(citizenQuantity);",
									"    });",
									"    pm.test('Service request periods length must be 2 (now two periods)', function() {",
									"        pm.expect(allPeriods.length).to.be.eql(2);",
									"    });",
									"    pm.test('There must only be one open period', function() {",
									"        pm.expect(openPeriodCount).to.be.eql(1);",
									"    });",
									"    pm.test('The open period state must be \"Being Served\"', function() {",
									"        pm.expect(openPeriod.ps.ps_name).to.be.eql(\"Being Served\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/begin_service/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"begin_service",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Place citizen on hold (QT2)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "34b9fb58-0be0-44db-896c-6118caa8aa29",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "64aacecd-cf05-4970-8350-6b0f7511a249",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    pm.test('Must be one active citizen in the office', function() {",
									"        pm.expect(citizenIds.length).to.be.eql(1);",
									"    });",
									"    pm.test('Citizen Id must equal \"' + currentCitizenId + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_id).to.be.eql(currentCitizenId);",
									"    });",
									"    pm.test('Citizen name must equal \"' + citizenName + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.eql(citizenName);",
									"    });",
									"    pm.test('Citizen comment must equal \"' + citizenComment + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.eql(citizenComment);",
									"    });",
									"    pm.test('There must be only one service request', function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(1);",
									"    });",
									"    pm.test('Service request state must be \"Active\"', function() {",
									"        pm.expect(currentCitizen.service_reqs[0].sr_state.sr_code).to.be.eql(\"Active\");",
									"    });",
									"    pm.test('Service request service must be ' + citizenService, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].service_id).to.be.eql(citizenService);",
									"    });",
									"    pm.test('Service request quantity must be ' + citizenQuantity, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].quantity).to.be.eql(citizenQuantity);",
									"    });",
									"    pm.test('Service request periods length must be 3 (now three periods)', function() {",
									"        pm.expect(allPeriods.length).to.be.eql(3);",
									"    });",
									"    pm.test('There must only be one open period', function() {",
									"        pm.expect(openPeriodCount).to.be.eql(1);",
									"    });",
									"    pm.test('The open period state must be \"On hold\"', function() {",
									"        pm.expect(openPeriod.ps.ps_name).to.be.eql(\"On hold\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/place_on_hold/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"place_on_hold",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Get service requests (QT2)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cefc03ef-e9a7-4998-b415-40f2d962a39f",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "61903e0c-a658-4fee-b676-56f0beadcad3",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.service_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Get periods for the first service request.",
									"    var allPeriods = allElements[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    var allPeriodCount = 0;",
									"",
									"    //  Find how many periods there are with null end time.",
									"    //  Also, check schema.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        ",
									"        //  Find the open period.",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"        ",
									"    });",
									"}    ",
									"",
									"//  If there are some service requests, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Perform tests.",
									"    pm.test('There must be only one service request', function() {",
									"        pm.expect(allElements.length).to.be.eql(1);",
									"    });",
									"    pm.test('Service request state must be \"Active\"', function() {",
									"        pm.expect(allElements[0].sr_state.sr_code).to.be.eql(\"Active\");",
									"    });",
									"    pm.test('Service request service must be ' + citizenService, function() {",
									"        pm.expect(allElements[0].service_id).to.be.eql(citizenService);",
									"    });",
									"    pm.test('Service request quantity must be ' + citizenQuantity, function() {",
									"        pm.expect(allElements[0].quantity).to.be.eql(citizenQuantity);",
									"    });",
									"    pm.test('Service request must have three periods', function() {",
									"        pm.expect(allPeriods.length).to.be.eql(3);",
									"    });",
									"    pm.test('There must only be one open period', function() {",
									"        pm.expect(openPeriodCount).to.be.eql(1);",
									"    });",
									"    pm.test('Service request period state must be \"On hold\"', function() {",
									"        pm.expect(openPeriod.ps.ps_name).to.be.eql(\"On hold\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/service_requests/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"service_requests",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Call citizen from hold (QT2)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5c89560e-e778-4af3-aa9c-83dc562a20bf",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2e9ba6da-4b6e-4079-aa20-e6cf2de42253",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    pm.test('Must be one active citizen in the office', function() {",
									"        pm.expect(citizenIds.length).to.be.eql(1);",
									"    });",
									"    pm.test('Citizen Id must equal \"' + currentCitizenId + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_id).to.be.eql(currentCitizenId);",
									"    });",
									"    pm.test('Citizen name must equal \"' + citizenName + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.eql(citizenName);",
									"    });",
									"    pm.test('Citizen comment must equal \"' + citizenComment + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.eql(citizenComment);",
									"    });",
									"    pm.test('There must be only one service request', function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(1);",
									"    });",
									"    pm.test('Service request state must be \"Active\"', function() {",
									"        pm.expect(currentCitizen.service_reqs[0].sr_state.sr_code).to.be.eql(\"Active\");",
									"    });",
									"    pm.test('Service request service must be ' + citizenService, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].service_id).to.be.eql(citizenService);",
									"    });",
									"    pm.test('Service request quantity must be ' + citizenQuantity, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].quantity).to.be.eql(citizenQuantity);",
									"    });",
									"    pm.test('Service request periods length must be 4 (now four periods)', function() {",
									"        pm.expect(allPeriods.length).to.be.eql(4);",
									"    });",
									"    pm.test('There must only be one open period', function() {",
									"        pm.expect(openPeriodCount).to.be.eql(1);",
									"    });",
									"    pm.test('The open period state must be \"Being Served\"', function() {",
									"        pm.expect(openPeriod.ps.ps_name).to.be.eql(\"Being Served\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/begin_service/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"begin_service",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Finish serving citizen (QT2)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3c8f0fa4-af3b-474d-9cfc-e7532c709626",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "af37efcb-99d9-40bb-ae63-623ae70660d2",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = jsonData.citizen;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"    ",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"    var allPeriods = allElements[0].service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    pm.test('Must be no active citizens in the office', function() {",
									"        pm.expect(citizenIds.length).to.be.eql(0);",
									"    });",
									"    pm.test('Citizen Id must equal \"' + currentCitizenId + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_id).to.be.eql(currentCitizenId);",
									"    });",
									"    pm.test('Citizen name must equal \"' + citizenName + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.eql(citizenName);",
									"    });",
									"    pm.test('Citizen comment must be null on service completion', function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.eql(null);",
									"    });",
									"    pm.test('There must be only one service request', function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(1);",
									"    });",
									"    pm.test('Service request state must be \"Complete\"', function() {",
									"        pm.expect(currentCitizen.service_reqs[0].sr_state.sr_code).to.be.eql(\"Complete\");",
									"    });",
									"    pm.test('Service request service must be ' + citizenService, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].service_id).to.be.eql(citizenService);",
									"    });",
									"    pm.test('Service request quantity must be ' + citizenQuantity, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].quantity).to.be.eql(citizenQuantity);",
									"    });",
									"    pm.test('Service request periods length must be 4 (still four periods)', function() {",
									"        pm.expect(allPeriods.length).to.be.eql(4);",
									"    });",
									"    pm.test('There must be no open periods', function() {",
									"        pm.expect(openPeriodCount).to.be.eql(0);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/finish_service/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"finish_service",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				}
			]
		},
		{
			"name": "Check citizen leave after create (QT3)",
			"item": [
				{
					"name": "Check no citizens (QT3)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7e04585f-ff64-49ea-8152-b20d23e8cc2d",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "85432378-e49d-4e9b-84d5-0eaea20f8e54",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"var allOK = true;",
									"",
									"//  If citizen property was present.",
									"if (allElements !== null) {",
									"",
									"    //  Make sure it had a length of 0.",
									"    if (allElements.length !== 0) {",
									"        allOK = false;",
									"    }",
									"}",
									"",
									"pm.test(\"There should be no citizens in the office\", function() {",
									"    pm.expect(allOK).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Create citizen (QT3)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "650d443b-efdc-4cfd-8edb-989eaa0d0396",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a4fb52a0-b6a1-4862-baff-a1bdc24c89c3",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.create_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"",
									"    //  Perform tests.",
									"    pm.test(\"Only one citizen should be in the office\", function() {",
									"        pm.expect(citizenIds.length).to.be.eql(1);",
									"    });",
									"    pm.test(\"Current citizen name should be null\", function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.null;",
									"    });",
									"    pm.test(\"Current citizen comments should be null\", function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.null;",
									"    });",
									"    pm.test(\"Citizen should have no service requests\", function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(0);",
									"    });",
									"",
									"    //  Store the ID of the citizen just created.",
									"    postman.setEnvironmentVariable(\"current_client\", JSON.stringify(citizenIds.shift()));",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}citizens/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Citizen left (QT3)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "51338014-7f20-4f12-9941-742a07d96254",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d4d877fc-60a8-47ed-8054-3a096178b9e0",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = jsonData.citizen;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Get environment variables.",
									"    var citizenName = postman.getEnvironmentVariable(\"citizen_name\");",
									"    var citizenComment = postman.getEnvironmentVariable(\"citizen_comment\");",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"    var allPeriods = null;",
									"    if (currentCitizen.service_reqs.length !== 0) {",
									"        var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    }",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    if (allPeriods !== null) {",
									"        allPeriods.forEach(function(onePeriod) {",
									"            if (!onePeriod.time_end) {",
									"                openPeriod = onePeriod;",
									"                openPeriodCount++;",
									"            }",
									"        });",
									"    }",
									"",
									"    //  Perform tests.",
									"    pm.test(\"Must be no active citizens in the office\", function() {",
									"        pm.expect(citizenIds.length).to.be.eql(0);",
									"    });",
									"    pm.test(\"Current citizen name should be null\", function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.null;",
									"    });",
									"    pm.test(\"Current citizen comments should be null\", function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.null;",
									"    });",
									"    pm.test(\"Citizen should have no service requests\", function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(0);",
									"    });",
									"    pm.test('Citizen id must equal \"' + currentCitizenId + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_id).to.be.eql(currentCitizenId);",
									"    });",
									"    pm.test(\"Citizen should have no service requests\", function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(0);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/citizen_left/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"citizen_left",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				}
			]
		},
		{
			"name": "Check citizen leave after waiting (QT4)",
			"item": [
				{
					"name": "Check no citizens (QT4)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0c96fbbd-10f8-4d67-84d2-356e5934be90",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7be31e55-d315-4be1-ab27-f5a50ec8928b",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"var allOK = true;",
									"",
									"//  If citizen property was present.",
									"if (allElements !== null) {",
									"",
									"    //  Make sure it had a length of 0.",
									"    if (allElements.length !== 0) {",
									"        allOK = false;",
									"    }",
									"}",
									"",
									"pm.test(\"There should be no citizens in the office\", function() {",
									"    pm.expect(allOK).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Create citizen (QT4)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0fb432d6-404a-47b8-b2a7-715e48a0eaae",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0cddd35a-e09b-420f-ba2f-3a19743eca4e",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.create_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"",
									"    //  Perform tests.",
									"    pm.test(\"Only one citizen should be in the office\", function() {",
									"        pm.expect(citizenIds.length).to.be.eql(1);",
									"    });",
									"    pm.test(\"Current citizen name should be null\", function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.null;",
									"    });",
									"    pm.test(\"Current citizen comments should be null\", function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.null;",
									"    });",
									"    pm.test(\"Citizen should have no service requests\", function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(0);",
									"    });",
									"",
									"    //  Store the ID of the citizen just created.",
									"    postman.setEnvironmentVariable(\"current_client\", JSON.stringify(citizenIds.shift()));",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}citizens/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Edit specific citizen (QT4)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "23af3463-6cd0-4911-8d50-3b78971de539",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									"",
									"// //  Get data, create JSON body.",
									"// var citizenName = postman.getEnvironmentVariable(\"citizen_name\");",
									"// var citizenComments = postman.getEnvironmentVariable(\"citizen_comment\");",
									"// var bodyData = {",
									"//     \"citizen_name\" : citizenName,",
									"//     \"citizen_comments\" : citizenComments",
									"// }",
									"",
									"// //  Store the data in an environment variable.",
									"// postman.setEnvironmentVariable(\"putBody\", JSON.stringify(bodyData));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fb51e072-e1dc-4b57-ad31-e141175ce821",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"",
									"    //  Perform tests.",
									"     pm.test(\"Must be one active citizen in the office\", function() {",
									"        pm.expect(citizenIds.length).to.be.eql(1);",
									"    });",
									"    pm.test('Citizen Id must equal \"' + currentCitizenId + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_id).to.be.eql(currentCitizenId);",
									"    });",
									"    pm.test('Citizen name must equal \"' + citizenName + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.eql(citizenName);",
									"    });",
									"    pm.test('Citizen comment must equal \"' + citizenComment + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.eql(citizenComment);",
									"    });",
									"    pm.test(\"Citizen should have no service requests\", function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(0);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"citizen_name\" : {{citizen_name}},\n    \"citizen_comments\" : {{citizen_comment}}\n}"
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Add property tax via phone service request (QT4)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bce23551-a957-4d51-9bc6-f7f1e8589a3c",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f6071c69-3165-478e-b097-cac7d0d6d1fd",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.create_response_test);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"service_request\" : {\n\t\t\"service_id\" : {{service_PropTax_id}},\n\t\t\"citizen_id\" : {{current_client}},\n\t\t\"quantity\" : {{citizen_quantity}},\n\t\t\"channel_id\" : {{channel_telephone_id}}\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}service_requests/",
							"host": [
								"{{url}}service_requests"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "List specific citizen (QT4)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6dbf643a-d1d2-412b-a4f4-6e02b0d2c57c",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "21bab62d-95b9-4855-bd43-a8c2f7779ee5",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"",
									"    //  Perform tests.",
									"    pm.test('Must be one active citizen in the office', function() {",
									"        pm.expect(citizenIds.length).to.be.eql(1);",
									"    });",
									"    pm.test('Citizen id must equal \"' + currentCitizenId + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_id).to.be.eql(currentCitizenId);",
									"    });",
									"    pm.test('Citizen name must equal \"' + citizenName + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.eql(citizenName);",
									"    });",
									"    pm.test('Citizen comment must equal \"' + citizenComment + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.eql(citizenComment);",
									"    });",
									"    pm.test('There must be only one service request', function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(1);",
									"    });",
									"    pm.test('Service request state must be \"Active\"', function() {",
									"        pm.expect(currentCitizen.service_reqs[0].sr_state.sr_code).to.be.eql(\"Active\");",
									"    });",
									"    pm.test('Service request service must be ' + citizenService, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].service_id).to.be.eql(citizenService);",
									"    });",
									"    pm.test('Service request quantity must be ' + citizenQuantity, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].quantity).to.be.eql(citizenQuantity);",
									"    });",
									"    pm.test('Service request must have one period', function() {",
									"        pm.expect(currentCitizen.service_reqs[0].periods.length).to.be.eql(1);",
									"    });",
									"    pm.test('Service request period channel must be ' + citizenChannel, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].channel_id).to.be.eql(citizenChannel);",
									"    });",
									"    pm.test('Service request period state must be \"Ticket Creation\"', function() {",
									"        pm.expect(currentCitizen.service_reqs[0].periods[0].ps.ps_name).to.be.eql(\"Ticket Creation\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Add citizen to queue (QT4)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "73446862-f537-45d1-9534-c7fcea3a1b73",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a46e734a-5468-44c1-ae54-4bf4ae2bd63a",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    pm.test('Must be one active citizen in the office', function() {",
									"        pm.expect(citizenIds.length).to.be.eql(1);",
									"    });",
									"    pm.test('Citizen Id must equal \"' + currentCitizenId + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_id).to.be.eql(currentCitizenId);",
									"    });",
									"    pm.test('Citizen name must equal \"' + citizenName + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.eql(citizenName);",
									"    });",
									"    pm.test('Citizen comment must equal \"' + citizenComment + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.eql(citizenComment);",
									"    });",
									"    pm.test('There must be only one service request', function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(1);",
									"    });",
									"    pm.test('Service request state must be \"Pending\"', function() {",
									"        pm.expect(currentCitizen.service_reqs[0].sr_state.sr_code).to.be.eql(\"Pending\");",
									"    });",
									"    pm.test('Service request service must be ' + citizenService, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].service_id).to.be.eql(citizenService);",
									"    });",
									"    pm.test('Service request quantity must be ' + citizenQuantity, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].quantity).to.be.eql(citizenQuantity);",
									"    });",
									"    pm.test('Service request periods length must be 2 (now two periods)', function() {",
									"        pm.expect(allPeriods.length).to.be.eql(2);",
									"    });",
									"    pm.test('There must only be one open period', function() {",
									"        pm.expect(openPeriodCount).to.be.eql(1);",
									"    });",
									"    pm.test('The open period state must be \"Waiting\"', function() {",
									"        pm.expect(openPeriod.ps.ps_name).to.be.eql(\"Waiting\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/add_to_queue/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"add_to_queue",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Citizen left (QT4)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5762c5a1-ffff-4e9f-97f0-db86da8d1b4c",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fe2dba39-d714-46a4-bc63-c780bff385d5",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = jsonData.citizen;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    pm.test(\"Must be no active citizens in the office\", function() {",
									"        pm.expect(citizenIds.length).to.be.eql(0);",
									"    });",
									"    pm.test('Citizen name must equal \"' + citizenName + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.eql(citizenName);",
									"    });",
									"    pm.test(\"Current citizen comments should be null\", function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.null;",
									"    });",
									"    pm.test('Citizen id must equal \"' + currentCitizenId + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_id).to.be.eql(currentCitizenId);",
									"    });",
									"    pm.test(\"Citizen should have one service request\", function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(1);",
									"    });",
									"    pm.test('Service request state must be \"Complete\"', function() {",
									"        pm.expect(currentCitizen.service_reqs[0].sr_state.sr_code).to.be.eql(\"Complete\");",
									"    });",
									"    pm.test('Service request service must be ' + citizenService, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].service_id).to.be.eql(citizenService);",
									"    });",
									"    pm.test('Service request quantity must be ' + citizenQuantity, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].quantity).to.be.eql(citizenQuantity);",
									"    });",
									"    pm.test('Service request periods length must be 2 (now two periods)', function() {",
									"        pm.expect(allPeriods.length).to.be.eql(2);",
									"    });",
									"    pm.test('There must be no open periods', function() {",
									"        pm.expect(openPeriodCount).to.be.eql(0);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/citizen_left/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"citizen_left",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Check no citizens (QT4)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "375e732d-0331-409c-9a96-6b4e3700d6f0",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0b435778-9c1e-4dcf-9fd7-13cad13d611b",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"var allOK = true;",
									"",
									"//  If citizen property was present.",
									"if (allElements !== null) {",
									"",
									"    //  Make sure it had a length of 0.",
									"    if (allElements.length !== 0) {",
									"        allOK = false;",
									"    }",
									"}",
									"",
									"pm.test(\"There should be no citizens in the office\", function() {",
									"    pm.expect(allOK).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				}
			]
		},
		{
			"name": "Check update service information (QT5)",
			"item": [
				{
					"name": "Check no citizens (QT5)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d66a2a63-2d7d-42a4-be93-6bd584808bf6",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ce1748c2-6dbe-4a6b-b4f4-dd48742b46f5",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"var allOK = true;",
									"",
									"//  If citizen property was present.",
									"if (allElements !== null) {",
									"",
									"    //  Make sure it had a length of 0.",
									"    if (allElements.length !== 0) {",
									"        allOK = false;",
									"    }",
									"}",
									"",
									"pm.test(\"There should be no citizens in the office\", function() {",
									"    pm.expect(allOK).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Create citizen (QT5)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "fd8d99bc-4a09-483f-b1a4-aac244831ce7",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4235dd3c-6c62-4c7e-84e5-5af9558794cd",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.create_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"",
									"    //  Perform tests.",
									"    pm.test(\"Only one citizen should be in the office\", function() {",
									"        pm.expect(citizenIds.length).to.be.eql(1);",
									"    });",
									"    pm.test(\"Current citizen name should be null\", function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.null;",
									"    });",
									"    pm.test(\"Current citizen comments should be null\", function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.null;",
									"    });",
									"    pm.test(\"Citizen should have no service requests\", function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(0);",
									"    });",
									"",
									"    //  Store the ID of the citizen just created.",
									"    postman.setEnvironmentVariable(\"current_client\", JSON.stringify(citizenIds.shift()));",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}citizens/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Edit specific citizen (QT5)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3f8c68a0-10ab-46bf-b8f3-5a7fe5904a0f",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									"",
									"// //  Get data, create JSON body.",
									"// var citizenName = postman.getEnvironmentVariable(\"citizen_name\");",
									"// var citizenComments = postman.getEnvironmentVariable(\"citizen_comment\");",
									"// var bodyData = {",
									"//     \"citizen_name\" : citizenName,",
									"//     \"citizen_comments\" : citizenComments",
									"// };",
									"",
									"// //  Store the data in an environment variable.",
									"// postman.setEnvironmentVariable(\"putBody\", JSON.stringify(bodyData));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "94d0fd82-3633-4ed4-9c1d-2d6f5af4ccdc",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"    ",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"",
									"    //  Perform tests.",
									"     pm.test(\"Must be one active citizen in the office\", function() {",
									"        pm.expect(citizenIds.length).to.be.eql(1);",
									"    });",
									"    pm.test('Citizen Id must equal \"' + currentCitizenId + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_id).to.be.eql(currentCitizenId);",
									"    });",
									"    pm.test('Citizen name must equal \"' + citizenName + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.eql(citizenName);",
									"    });",
									"    pm.test('Citizen comment must equal \"' + citizenComment + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.eql(citizenComment);",
									"    });",
									"    pm.test(\"Citizen should have no service requests\", function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(0);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"citizen_name\" : {{citizen_name}},\n    \"citizen_comments\" : {{citizen_comment}}\n}"
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Add property tax via phone service request (QT5)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7d22520b-ecf3-426e-b0a0-a7fea9fa79dd",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3afe64a8-eb14-4af6-b496-17a5618d7e9a",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.create_response_test);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"service_request\" : {\n\t\t\"service_id\" : {{service_PropTax_id}},\n\t\t\"citizen_id\" : {{current_client}},\n\t\t\"quantity\" : {{citizen_quantity}},\n\t\t\"channel_id\" : {{channel_telephone_id}}\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}service_requests/",
							"host": [
								"{{url}}service_requests"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "List specific citizen (QT5)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7640a1be-910f-48e4-b04c-93bda1781332",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2b0bb07c-21ad-468c-a0ed-051cc6aa64f0",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"    ",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"",
									"    //  Perform tests.",
									"    pm.test('Must be one active citizen in the office', function() {",
									"        pm.expect(citizenIds.length).to.be.eql(1);",
									"    });",
									"    pm.test('Citizen id must equal \"' + currentCitizenId + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_id).to.be.eql(currentCitizenId);",
									"    });",
									"    pm.test('Citizen name must equal \"' + citizenName + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.eql(citizenName);",
									"    });",
									"    pm.test('Citizen comment must equal \"' + citizenComment + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.eql(citizenComment);",
									"    });",
									"    pm.test('There must be only one service request', function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(1);",
									"    });",
									"    pm.test('Service request state must be \"Active\"', function() {",
									"        pm.expect(currentCitizen.service_reqs[0].sr_state.sr_code).to.be.eql(\"Active\");",
									"    });",
									"    pm.test('Service request service must be ' + citizenService, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].service_id).to.be.eql(citizenService);",
									"    });",
									"    pm.test('Service request quantity must be ' + citizenQuantity, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].quantity).to.be.eql(citizenQuantity);",
									"    });",
									"    pm.test('Service request must have one period', function() {",
									"        pm.expect(currentCitizen.service_reqs[0].periods.length).to.be.eql(1);",
									"    });",
									"    pm.test('Service request period channel must be ' + citizenChannel, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].channel_id).to.be.eql(citizenChannel);",
									"    });",
									"    pm.test('Service request period state must be \"Ticket Creation\"', function() {",
									"        pm.expect(currentCitizen.service_reqs[0].periods[0].ps.ps_name).to.be.eql(\"Ticket Creation\");",
									"    });",
									"",
									"    //  Save the service request ID for later.",
									"    var mySRId = allElements[0].service_reqs[0].sr_id;",
									"    postman.setEnvironmentVariable(\"current_sr_id\", JSON.stringify(mySRId));",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Begin serving citizen (QT5)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8e984146-77d9-40b0-ba02-256447c53170",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c5e65fe3-f834-4d0e-bd08-334d3b7a1720",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    pm.test('Must be one active citizen in the office', function() {",
									"        pm.expect(citizenIds.length).to.be.eql(1);",
									"    });",
									"    pm.test('Citizen Id must equal \"' + currentCitizenId + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_id).to.be.eql(currentCitizenId);",
									"    });",
									"    pm.test('Citizen name must equal \"' + citizenName + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.eql(citizenName);",
									"    });",
									"    pm.test('Citizen comment must equal \"' + citizenComment + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.eql(citizenComment);",
									"    });",
									"    pm.test('There must be only one service request', function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(1);",
									"    });",
									"    pm.test('Service request state must be \"Active\"', function() {",
									"        pm.expect(currentCitizen.service_reqs[0].sr_state.sr_code).to.be.eql(\"Active\");",
									"    });",
									"    pm.test('Service request service must be ' + citizenService, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].service_id).to.be.eql(citizenService);",
									"    });",
									"    pm.test('Service request quantity must be ' + citizenQuantity, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].quantity).to.be.eql(citizenQuantity);",
									"    });",
									"    pm.test('Service request periods length must be 2 (now two periods)', function() {",
									"        pm.expect(allPeriods.length).to.be.eql(2);",
									"    });",
									"    pm.test('There must only be one open period', function() {",
									"        pm.expect(openPeriodCount).to.be.eql(1);",
									"    });",
									"    pm.test('The open period state must be \"Being Served\"', function() {",
									"        pm.expect(openPeriod.ps.ps_name).to.be.eql(\"Being Served\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/begin_service/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"begin_service",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Update quantity from 3 to 5 (QT5)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b8260d58-7c6c-4c58-8387-d2428a57161f",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7fd7432d-ab16-4822-9fe8-42d8f0d6ba9e",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.basic_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.service_response_test);",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Only check for an updated quantity.  Get environment variables.",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity_update\"));",
									"",
									"    //  Perform tests.",
									"    pm.test('Updated service request quantity must be ' + citizenQuantity, function() {",
									"        pm.expect(allElements[0].quantity).to.be.eql(citizenQuantity);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"quantity\" : {{citizen_quantity_update}}\n}"
						},
						"url": {
							"raw": "{{url}}service_requests/{{current_sr_id}}/",
							"host": [
								"{{url}}service_requests"
							],
							"path": [
								"{{current_sr_id}}",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Update service from PropTax to MSP (QT5)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4b6caa77-fad7-449f-9072-770e1b164753",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "49b88c13-83d3-4c03-87ff-7c1bd90dfda4",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.basic_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.service_response_test);",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Only check for an updated quantity.  Get environment variables.",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_MSP_id\"));",
									"",
									"    //  Perform tests.",
									"    pm.test('Updated service request service must be ' + citizenService, function() {",
									"        pm.expect(allElements[0].service_id).to.be.eql(citizenService);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"service_id\" : {{service_MSP_id}}\n}"
						},
						"url": {
							"raw": "{{url}}service_requests/{{current_sr_id}}/",
							"host": [
								"{{url}}service_requests"
							],
							"path": [
								"{{current_sr_id}}",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Finish serving citizen (QT5)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f86f1090-d1d7-475d-92b0-b123d0ed926e",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "12d9f9ec-d8c2-4053-aec1-0158c8e1052c",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = jsonData.citizen;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_MSP_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity_update\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    pm.test('Must be no active citizens in the office', function() {",
									"        pm.expect(citizenIds.length).to.be.eql(0);",
									"    });",
									"    pm.test('Citizen Id must equal \"' + currentCitizenId + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_id).to.be.eql(currentCitizenId);",
									"    });",
									"    pm.test('Citizen name must equal \"' + citizenName + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.eql(citizenName);",
									"    });",
									"    pm.test('Citizen comment must be null on service completion', function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.eql(null);",
									"    });",
									"    pm.test('There must be only one service request', function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(1);",
									"    });",
									"    pm.test('Service request state must be \"Complete\"', function() {",
									"        pm.expect(currentCitizen.service_reqs[0].sr_state.sr_code).to.be.eql(\"Complete\");",
									"    });",
									"    pm.test('Service request service must be ' + citizenService, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].service_id).to.be.eql(citizenService);",
									"    });",
									"    pm.test('Service request quantity must be ' + citizenQuantity, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].quantity).to.be.eql(citizenQuantity);",
									"    });",
									"    pm.test('Service request periods length must be 2 (should be two periods)', function() {",
									"        pm.expect(allPeriods.length).to.be.eql(2);",
									"    });",
									"    pm.test('There must be no open periods', function() {",
									"        pm.expect(openPeriodCount).to.be.eql(0);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/finish_service/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"finish_service",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				}
			]
		},
		{
			"name": "Setup Booking",
			"item": [
				{
					"name": "Setup-Variables",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "52f9193a-dc4f-41b2-8719-ace89c1122e9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e53b5d5e-9726-45c1-b729-96a3321c0203",
								"exec": [
									"//  See if the use-prefix global has been set.  Use default if not.",
									"let usePrefix = '';",
									"if (pm.globals.get('use-prefix')) {",
									"    console.log(\"==> use-prefix exists\");",
									"    usePrefix = pm.globals.get('use-prefix');",
									"    console.log(\"    --> Prefix is: \" + usePrefix);",
									"    ",
									"    //  Set up all globals, using the correct prefix.",
									"    pm.globals.set('auth_url', pm.globals.get(usePrefix + 'auth_url'));",
									"    pm.globals.set('realm', pm.globals.get(usePrefix + 'realm'));",
									"    pm.globals.set('clientid', pm.globals.get(usePrefix + 'clientid'));",
									"    pm.globals.set('client_secret', pm.globals.get(usePrefix + 'client_secret'));",
									"    pm.globals.set('url', pm.globals.get(usePrefix + 'url'));",
									"}",
									"else {",
									"    console.log(\"==> use-prefix does not exist\");",
									"    console.log(\"    --> No default globals set.\");",
									"}",
									"",
									"//  If no maximum load time defined, set a default.",
									"if (!pm.globals.get('max_load_time')) {",
									"    console.log(\"==> max_load_time not present, default set.\");",
									"    pm.globals.set(\"max_load_time\", JSON.stringify(1503));",
									"}",
									"",
									"//  If no maximum response defined, set a default.",
									"if (!pm.globals.get('max_response_time')) {",
									"    console.log(\"==> max_response_time not present, default set.\");",
									"    pm.globals.set(\"max_response_time\", JSON.stringify(15005));",
									"}",
									"",
									"//  Display the values of all globals.",
									"console.log(\"\");",
									"console.log(\"==> Globals are:\");",
									"console.log(\"    --> auth_url:          \" + pm.globals.get(\"auth_url\"));",
									"console.log(\"    --> realm:             \" + pm.globals.get(\"realm\"));",
									"console.log(\"    --> clientid:          \" + pm.globals.get(\"clientid\"));",
									"console.log(\"    --> client_secret:     \" + pm.globals.get(\"client_secret\"));",
									"console.log(\"    --> url:               \" + pm.globals.get(\"url\"));",
									"console.log(\"    --> max_load_time:     \" + pm.globals.get(\"max_load_time\"));",
									"console.log(\"    --> max_response_time: \" + pm.globals.get(\"max_response_time\"));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "// Dummy data."
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "Authentication Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d0e13e95-15b9-4752-b050-d4d4d8fc3eca",
								"exec": [
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Test to make sure that the access token field is not null",
									"pm.test(\"Access Token is not null\", function(){",
									"    var access_token = jsonData.access_token;",
									"    if (pm.expect(access_token).not.eql(null)){",
									"        pm.globals.set(\"token\", access_token);",
									"    }",
									"});",
									"//Test to make sure that the refresh token response field is not null",
									"pm.test(\"Refresh Token is not null\", function(){",
									"    var refresh_token = jsonData.refresh_token;",
									"    if (pm.expect(refresh_token).not.eql(null)){",
									"        pm.globals.set(\"refresh_token\", refresh_token);",
									"    }",
									"});",
									"//Test to make sure that expires in response field is not nullf",
									"pm.test(\"Expires In is not null\", function(){",
									"    var expires_in = jsonData.expires_in;",
									"    if (pm.expect(expires_in).not.eql(null)){",
									"        pm.globals.set(\"expires_in\", expires_in);",
									"    }",
									"});",
									"//Test to make sure that refresh expires in response fiels is not null",
									"pm.test(\"Refresh Expires In is not null\", function(){",
									"    var refresh_expires_in = jsonData.refresh_expires_in;",
									"    if (pm.expect(refresh_expires_in).not.eql(null)){",
									"        pm.globals.set(\"refresh_expires_in\", refresh_expires_in);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "grant_type=password&client_id={{clientid}}&username={{userid}}&password={{password}}&client_secret={{client_secret}}"
						},
						"url": {
							"raw": "{{auth_url}}/auth/realms/{{realm}}/protocol/openid-connect/token?Content-Type=application/x-www-form-urlencoded",
							"host": [
								"{{auth_url}}"
							],
							"path": [
								"auth",
								"realms",
								"{{realm}}",
								"protocol",
								"openid-connect",
								"token"
							],
							"query": [
								{
									"key": "Content-Type",
									"value": "application/x-www-form-urlencoded"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CFMS-Install-Auth-First",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "344d32f0-cb96-46a3-94a3-a54e8620f801",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"auth_first\", jsonData.data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "auth_url = globals.auth_url;\nrealm = globals.realm;\nclientid = globals.clientid;\nuserid = globals.userid;\npassword = globals.password;\nclient_secret = globals.client_secret;\n\nconst echoPostRequest = {\n  url: auth_url + '/auth/realms/' + realm + '/protocol/openid-connect/token',\n  method: 'POST',\n  header: 'Content-Type:application/x-www-form-urlencoded',\n  body: {\n    mode: 'raw',\n    raw: 'grant_type=password&client_id=' + clientid \n          + '&username=' + userid \n          + '&password=' + password\n          + '&client_secret=' + client_secret\n  }\n};\npm.sendRequest(echoPostRequest, function (err, res) {\n    var jsonData = res.json();\n    if (jsonData.hasOwnProperty('access_token')) {\n    \tpm.globals.set(\"token\", jsonData.access_token);\n\t    pm.globals.set(\"refresh_token\", jsonData.refresh_token);\n\t    console.log(err ? err : res.json());\n\t} else {\n\t    pm.globals.set(\"token\", 0);\n\t    pm.globals.set(\"refresh_token\", 0);\n\t    pm.globals.set(\"token_expires\", 0);\n\t    pm.globals.set(\"refresh_token_expires\", 0);\n\t}\n});\n"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-Basic-Response-Tests",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9eda52e5-9855-40a0-b951-860d3ef13bc3",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"basic_response_test\", jsonData.data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//  If no maximum response defined, set a default.\nresponse_max = 0;\nif (globals.response_max) {\n    response_max = JSON.parse(globals.response_max);\n}\nelse {\n    response_max = 5009;\n    pm.globals.set(\"response_max\", JSON.stringify(response_max));\n};\n\n//  Get the max response time allowed.\npm.test('Response time less than ' + response_max.toString() + 'ms', function(){\n    pm.expect(pm.response.responseTime).to.be.below(response_max);\n});\n\npm.test(\"Response code for request is 200\", function(){\n    pm.response.to.have.status(200);\n});\npm.test('Response header should have Content-Type of application/json', function() {\n    pm.response.to.have.header('content-type', 'application/json');\n});\npm.test('Response body be in JSON format', function() {\n    pm.response.to.be.json; \n});"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-Exam-Type-Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "02496c3f-e113-4b38-843a-869679c233fd",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"init_exam_type_data\", jsonData.data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//  Finds an exam name in the JSON list allTypes of exam types.\nfunction find_exam(input_exam_name, allTypes) {\n\texam_id_value = -1;\n\n    //  Loop to look for the input exam name.\n    if (allTypes) {\n        allTypes.forEach(function(type) {\n            if ((type.exam_type_name) == input_exam_name) {\n            exam_id_value = type.exam_type_id;\n            }\n        });\n    }\n    \n    //  If the exam wasn't found, set it to be the first exam.\n    if (exam_id_value == -1) {\n        exam_id_value = allTypes[0].exam_type_id;\n    }\n\n    //  Return the exam_id_type of the input exam name.\n    return exam_id_value;\n}\n\n//  Get the list of all possible exam types.\nallTypes = null;\nvar jsonData = JSON.parse(responseBody);\nif (jsonData.hasOwnProperty(\"exam_types\")) {\n\tallTypes = jsonData.exam_types;\n}\n\nexam_array = [];\nexam_array.push({name: \"Pesticide\", weight: 40.2, id: find_exam(\"Pesticide\", allTypes)});\nname = \"IPSE - 4HR Single Exam\";\nexam_array.push({name: name, weight: exam_array[0].weight + 14.5, id: find_exam(name, allTypes)});\nname = \"SLE - 3HR Group Exam\";\nexam_array.push({name: name, weight: exam_array[1].weight + 7.4, id: find_exam(name, allTypes)});\nname = \"COFQ - 3HR Group Exam\";\nexam_array.push({name: name, weight: exam_array[2].weight + 5.8, id: find_exam(name, allTypes)});\nname = \"IPSE - 4HR Group Exam\";\nexam_array.push({name: name, weight: exam_array[3].weight + 5.7, id: find_exam(name, allTypes)});\nname = \"COFQ - 3HR Single Exam\";\nexam_array.push({name: name, weight: exam_array[4].weight + 5.5, id: find_exam(name, allTypes)});\nname = \"Monthly Session Exam\";\nexam_array.push({name: name, weight: exam_array[5].weight + 3.8, id: find_exam(name, allTypes)});\nname = \"SLE - 3HR Single Exam\";\nexam_array.push({name: name, weight: exam_array[6].weight + 3.5, id: find_exam(name, allTypes)});\nname = \"Angling Guide Outfitter\";\nexam_array.push({name: name, weight: exam_array[7].weight + 2.4, id: find_exam(name, allTypes)});\nname = \"IPSE - 5HR Single Exam - Time Extension\";\nexam_array.push({name: name, weight: exam_array[8].weight + 2.3, id: find_exam(name, allTypes)});\nname = \"Exam Booking - 3 Hour Miscellaneous\";\nexam_array.push({name: name, weight: exam_array[9].weight + 1.7, id: find_exam(name, allTypes)});\n\n//  Store the initialized exam data for later use.\npostman.setEnvironmentVariable(\"exam_array_data\", JSON.stringify(exam_array));"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-Exam-Get-Random",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "87386029-1241-4909-abd1-051b662d58f1",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"create_random_functions\", jsonData.data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//  Function returns a weighted randomized exam type index.\nfunction get_random_index(exam_array) {\n\n    //  Generate a random number up to the maximum weight allowed.\n    random_number = Math.floor(Math.random() * exam_array[exam_array.length - 1].weight);\n    \n    //  Get the index of the exam type corresponding to that weight.\n    index = get_index(random_number, exam_array);\n\n    //  Return the index.\n    return index;\n}\n\n//  Based on a random number, turns it into a weighted randomized exam type index.\nfunction get_index(random_value, exam_array) {\n    index = 0;\n    var i;\n    for (i = 0; i < exam_array.length; i++) {\n        if (random_value <= exam_array[i].weight) {\n            index = i;\n            break;\n        }\n    }\n    \n    return index;\n}\n"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-Exam-Schema-Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2747808c-da36-4ad7-902b-4e995001714d",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"exam_schema_check\", jsonData.data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "// Define the JSON Schema expected in response\nvar examSchema = {\n    \"type\": \"object\",\n    \"properties\": {\n        \"exam\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"booking_id\": {},\n                \"deleted_date\": {},\n                \"event_id\": {\"type\": \"string\"},\n                \"exam_id\": {\"type\": \"number\"},\n                \"exam_method\": {\"type\": \"string\"},\n                \"exam_name\": {\"type\": \"string\"},\n                \"exam_received_date\": {},\n                \"exam_returned_tracking_number\": {},\n                \"exam_type\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"exam_color\": {\"type\": \"string\"},\n                        \"exam_type_id\": {\"type\": \"number\"},\n                        \"exam_type_name\": {\"type\": \"string\"},\n                        \"group_exam_ind\": {\"type\": \"number\"},\n                        \"ita_ind\": {\"type\": \"number\"},\n                        \"method_type\": {\"type\": \"string\"},\n                        \"number_of_hours\": {\"type\": \"number\"},\n                        \"number_of_minutes\": {\"type\": [\"number\", \"null\"]},\n                        \"pesticide_exam_ind\": {\"type\": \"number\" }\n                    },\n                    \"required\": [\"exam_color\", \"exam_type_id\", \"exam_type_name\", \"group_exam_ind\", \"ita_ind\", \"method_type\", \"number_of_hours\", \"number_of_minutes\", \"pesticide_exam_ind\"]\n                },\n                \"exam_type_id\": {\"type\": \"number\"},\n                \"exam_written_ind\": {\"type\": \"number\"},\n                \"examinee_name\": {\"type\": \"string\"},\n                \"expiry_date\": {\"type\": [\"string\", \"null\"]},\n                \"notes\": {\"type\": \"string\"},\n                \"number_of_students\": {\"type\": \"number\"},\n                \"office\":{\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"appointments_enabled_ind\": {\"type\": \"number\"},\n                        \"exams_enabled_ind\": {\"type\": \"number\"},\n                        \"office_id\": {\"type\": \"number\"},\n                        \"office_name\": {\"type\": \"string\"},\n                        \"office_number\": {\"type\": \"number\" },\n                        \"timezone\": {\n                            \"type\": \"object\",\n                            \"properties\": {\n                                \"timezone_id\": {\"type\" : \"number\"},\n                                \"timezone_name\": {\"type\": \"string\"}\n                            },\n                            \"required\": [\"timezone_id\", \"timezone_name\"]\n                        },\n                    },\n                    \"required\": []\n                },\n                \"office_id\": {\"type\": \"number\"},\n                \"offsite_location\": {},\n                \"session_number\": {\"type\": [\"number\", \"null\"]},\n                \"booking\": {}\n            },\n            \"required\": [\"booking\", \"booking_id\", \"deleted_date\", \"event_id\", \"exam_id\", \"exam_method\", \"exam_name\", \"exam_received_date\", \"exam_returned_tracking_number\", \"exam_type\", \"exam_type_id\", \"exam_written_ind\", \"examinee_name\", \"expiry_date\", \"notes\", \"number_of_students\", \"office\", \"office_id\", \"offsite_location\", \"session_number\"]\n        }\n    },\n    \"required\": [\"exam\"]\n};\n\n//Test to see if response schema is valid\npm.test(\"Validate Response Exam Schema\", function(){\n    pm.expect(tv4.validate(jsonData, examSchema)).to.be.true;\n});\n"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-Exam-Data-Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2666daf6-8fb6-4704-ab57-776523bd306c",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"exam_data_check\", jsonData.data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//  Make sure that jsonData has an exam property.\npm.test(\"Response should have exam property\", function(){\n    pm.expect(jsonData.hasOwnProperty(\"exam\")).to.be.true;\n});\n\n//  If jsonData has exam property, check data.\nif (jsonData.hasOwnProperty(\"exam\")) {\n\n    //Test to see if Event ID field remains unchanged\n    pm.test(\"Validate Event Id has expected value\", function(){\n        pm.expect(jsonData.event_id === environment.event_id);\n    });\n\n    //Test to see if exam method field remains unchanged\n    pm.test(\"Validate exam method has expected value\", function(){\n        pm.expect(jsonData.exam_method === environment.exam_method);\n    });\n\n    //Test to see if exam name field remains unchanged\n    pm.test(\"Validate exam name has expected value\", function(){\n        pm.expect(jsonData.exam_name === environment.exam_name);\n    });\n\n    //Test to see if exam type field remains unchanged\n    pm.test(\"Validate exam type id has expected value\", function(){\n        pm.expect(jsonData.exam_type_id === environment.random_exam_type_id);\n    });\n\n    //Test to see if exam written indicator field remains unchanged\n    pm.test(\"Validate exam written indicator has expected value\", function(){\n        pm.expect(jsonData.exam_written_ind === environment.exam_written_ind);\n    });\n\n    //Test to see if examinee name field remains unchanged\n    pm.test(\"Validate examinee name has expected value\", function(){\n        pm.expect(jsonData.examinee_name === environment.examinee_name);\n    });\n\n    //Test to see if notes field remains unchanged\n    pm.test(\"Validate notes has expected value\", function(){\n        pm.expect(jsonData.notes === environment.notes);\n    });\n\n    //Test to see if number of students field remains unchanged\n    pm.test(\"Validate number of students has expected value\", function(){\n        pm.expect(jsonData.number_of_students === environment.number_of_students);\n    });\n\n    //Test to see if office id remains unchanged\n    pm.test(\"Validate office id has expected value\", function(){\n        pm.expect(jsonData.office_id === environment.current_office_id);\n    });\n\n    //Test to see if offsite location is expected\n    pm.test(\"Validate offsite location has expected value\", function(){\n        pm.expect(jsonData.offsite_location === environment.offsite_location);\n    });\n}\n"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-Exam-List-Schema-Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "df0f325d-9ee2-4f27-8f0d-7d48817248a1",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"exam_schema_list_check\", jsonData.data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "// Define the JSON Schema expected in response\nvar examSchema = {\n    \"type\": \"object\",\n    \"properties\": {\n        \"exams\": {\n            \"type\": \"array\",\n            \"properties\": {\n                \"booking_id\": {},\n                \"deleted_date\": {},\n                \"event_id\": {\"type\": \"string\"},\n                \"exam_id\": {\"type\": \"number\"},\n                \"exam_method\": {\"type\": \"string\"},\n                \"exam_name\": {\"type\": \"string\"},\n                \"exam_received_date\": {},\n                \"exam_returned_tracking_number\": {},\n                \"exam_type\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"exam_color\": {\"type\": \"string\"},\n                        \"exam_type_id\": {\"type\": \"number\"},\n                        \"exam_type_name\": {\"type\": \"string\"},\n                        \"group_exam_ind\": {\"type\": \"number\"},\n                        \"ita_ind\": {\"type\": \"number\"},\n                        \"method_type\": {\"type\": \"string\"},\n                        \"number_of_hours\": {\"type\": \"number\"},\n                        \"number_of_minutes\": {\"type\": \"number\"},\n                        \"pesticide_exam_ind\": {\"type\": \"number\" }\n                    },\n                    \"required\": [\"exam_color\", \"exam_type_id\", \"exam_type_name\", \"group_exam_ind\", \"ita_ind\", \"method_type\", \"number_of_hours\", \"number_of_minutes\", \"pesticide_exam_ind\"]\n                },\n                \"exam_type_id\": {\"type\": \"number\"},\n                \"exam_written_ind\": {\"type\": \"number\"},\n                \"examinee_name\": {\"type\": \"string\"},\n                \"expiry_date\": {\"type\": [\"string\", \"null\"]},\n                \"notes\": {\"type\": \"string\"},\n                \"number_of_students\": {\"type\": \"number\"},\n                \"office\":{\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"appointments_enabled_ind\": {\"type\": \"number\"},\n                        \"exams_enabled_ind\": {\"type\": \"number\"},\n                        \"office_id\": {\"type\": \"number\"},\n                        \"office_name\": {\"type\": \"string\"},\n                        \"office_number\": {\"type\": \"number\" },\n                        \"timezone\": {\n                            \"type\": \"object\",\n                            \"properties\": {\n                                \"timezone_id\": {\"type\" : \"number\"},\n                                \"timezone_name\": {\"type\": \"string\"}\n                            },\n                            \"required\": [\"timezone_id\", \"timezone_name\"]\n                        },\n                    },\n                    \"required\": []\n                },\n                \"office_id\": {\"type\": \"number\"},\n                \"offsite_location\": {},\n                \"session_number\": {\"type\": [\"number\", \"null\"]},\n                \"booking\": {}\n            },\n            \"required\": [\"booking\", \"booking_id\", \"deleted_date\", \"event_id\", \"exam_id\", \"exam_method\", \"exam_name\", \"exam_received_date\", \"exam_returned_tracking_number\", \"exam_type\", \"exam_type_id\", \"exam_written_ind\", \"examinee_name\", \"expiry_date\", \"notes\", \"number_of_students\", \"office\", \"office_id\", \"offsite_location\", \"session_number\"]\n        }\n    },\n    \"required\": [\"exams\"]\n};\n\n//Test to see if response schema is valid\npm.test(\"Validate Response Exam List Schema\", function(){\n    pm.expect(tv4.validate(jsonData, examSchema)).to.be.true;\n});\n"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-Booking-Schema-Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9b20c0dd-ad8c-4b96-a629-77c445644a44",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"booking_schema_check\", jsonData.data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "// Define the JSON Schema expected in response\nvar bookingSchema = {\n    \"type\": \"object\",\n    \"properties\": {\n        \"booking\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"blackout_flag\": {\"type\": \"string\"},\n            \"blackout_notes\": {\"type\": [\"string\", \"null\"]},\n            \"booking_contact_information\": {\"type\": [\"string\", \"null\"]},\n            \"booking_id\": {\"type\": \"number\"},\n            \"booking_name\": {\"type\": [\"string\", \"null\"]},\n            \"end_time\": {\"type\": \"string\"},\n            \"fees\": {\"type\": \"string\"},\n            \"invigilators\": {\"type\": \"array\"},\n            \"office\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"appointments_enabled_ind\": {\"type\": \"number\"},\n                    \"exams_enabled_ind\": {\"type\": \"number\"},\n                    \"office_id\": {\"type\": \"number\"},\n                    \"office_name\": {\"type\": \"string\"},\n                    \"office_number\": {\"type\": \"number\"},\n                    \"timezone\": {}\n                },\n                \"required\": [\"appointments_enabled_ind\", \"exams_enabled_ind\", \"office_id\", \"office_name\", \"office_number\", \"timezone\"]\n            },\n            \"office_id\": {\"type\": \"number\"},\n            \"recurring_uuid\": {\"type\": [\"string\", \"null\"]},\n            \"room\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"capacity\": {\"type\": \"number\"},\n                    \"color\": {\"type\": \"string\"},\n                    \"deleted\": {\"type\": [\"string\", \"null\"]},\n                    \"room_id\": {\"type\": \"number\"},\n                    \"room_name\": {\"type\": \"string\"}\n                },\n                \"required\": [\"capacity\", \"color\", \"room_id\", \"room_name\", \"deleted\"]\n            },\n            \n            \"room_id\": {\"type\": \"number\"},\n            \"sbc_staff_invigilated\": {\"type\": \"number\"},\n            \"shadow_invigilator_id\": {\"type\": [\"number\", \"null\"]},\n            \"start_time\": {\"type\": \"string\"}\n          },\n          \"required\": [\"blackout_flag\", \"blackout_notes\", \"booking_contact_information\", \"booking_id\",\n                       \"booking_name\", \"end_time\", \"fees\", \"invigilators\", \"office\", \"office_id\",\n                       \"recurring_uuid\", \"room\", \"room_id\", \"sbc_staff_invigilated\", \"shadow_invigilator_id\",\n                       \"start_time\"]\n        },\n        \"errors\": { \"type\": \"object\" }\n    },\n    \"required\": [\"booking\", \"errors\"]\n}\n\n//Test to see if response schema is valid\npm.test(\"Validate Response Booking Schema\", function(){\n    pm.expect(tv4.validate(jsonData, bookingSchema)).to.be.true;\n});\n"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-Booking-Data-Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "89ea735e-9a8d-4d15-8462-3edda71fe037",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"booking_data_check\", jsonData.data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//  Make sure that jsonData has an booking property.\npm.test(\"Response should have booking property\", function(){\n    pm.expect(jsonData.hasOwnProperty(\"booking\")).to.be.true;\n});\n\n//  If jsonData has booking property, check data.\nif (jsonData.hasOwnProperty(\"booking\")) {\n\n    //Test to see if booking name has expected value\n    pm.test(\"Validate Booking Name has expected value\", function(){\n        pm.expect(jsonData.booking_name === environment.booking_name);\n    });\n\n    //Test to see if start time has expected value\n    pm.test(\"Validate start time has expected value\", function(){\n        pm.expect(jsonData.start_time === environment.start_time);\n    });\n\n    //Test to see if end time has expected value\n    pm.test(\"Validate end time has expected value\", function(){\n        pm.expect(jsonData.end_time === environment.end_time);\n    });\n\n    //Test to see if room id has expected value\n    pm.test(\"Validate room id has expected value\", function(){\n        pm.expect(jsonData.room_id === environment.room_id_1);\n    });\n\n    //Test to see if fees field has expected value\n    pm.test(\"Validate fees has expected value\", function(){\n        pm.expect(jsonData.fees === environment.fees);\n    });\n\n    //Test to see if office id field has expected value\n    pm.test(\"Validate office id has expected value\", function(){\n        pm.expect(jsonData.office_id === environment.current_office_id);\n    });\n}\n"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-Booking-List-Schema-Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cb79c661-6266-4d63-a872-fd917a4e7b7b",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"booking_list_schema_check\", jsonData.data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "var bookingSchema = {\n    \"type\": \"object\",\n    \"properties\": {\n        \"bookings\": {\n            \"type\": \"array\",\n            \"properties\": {\n                \"booking_contact_information\": {},\n                \"booking_id\": {\"type\": \"number\"},\n                \"booking_name\": {\"type\": \"string\"},\n                \"end_time\": {\"type\": \"string\"},\n                \"fees\": {\"type\": \"string\"},\n                \"invigilator\": {},\n                \"invigilator_id\": {},\n                \"office\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"appointments_enabled_ind\": {\"type\": \"number\"},\n                        \"exams_enabled_ind\": {\"type\": \"number\"},\n                        \"office_id\": {\"type\": \"number\"},\n                        \"office_name\": {\"type\": \"string\"},\n                        \"office_number\": {\"type\": \"number\"},\n                        \"sb_id\": {\"type\": \"number\"},\n                        \"timezone\": {}\n                    },\n                    \"required\": [\"appointments_enabled_ind\", \"exams_enabled_ind\", \"office_id\", \"office_name\", \"office_number\", \"sb\", \"sb_id\"]\n                },\n                \"office_id\": {\"type\": \"number\"},\n                \"room\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"capacity\": {\"type\": \"number\"},\n                        \"color\": {\"type\": \"string\"},\n                        \"room_id\": {\"type\": \"number\"},\n                        \"room_name\": {\"type\": \"string\"}\n                    },\n                    \"required\": [\"capacity\", \"color\", \"room_id\", \"room_name\"]\n                },\n                \"room_id\": {\"type\": \"number\"},\n                \"start_time\": {\"type\": \"string\"},\n            },\n            \"required\": [\"booking_contact_information\", \"booking_id\", \"booking_name\", \"end_time\", \"fees\", \"room\", \"room_id\", \"start_time\", \"invigilator_id\", \"office\", \"office_id\"]\n        },\n        \"errors\": {\n            \"type\": \"object\",\n            \"properties\": {}\n        }\n    },\n    \"required\": [\"bookings\", \"errors\"]\n};\n\n//Test to see if response schema is valid\npm.test(\"Validate Response Booking List Schema\", function(){\n    pm.expect(tv4.validate(jsonData, bookingSchema)).to.be.true;\n});"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-Appointment-Schema-Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "78a704f3-1025-4779-8069-62a2ace59d03",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"appointment_schema_check\", jsonData.data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "// Define the JSON Schema expected in response\nvar appointmentSchema = {\n    \"type\": \"object\", \n    \"properties\": {\n        \"appointment\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"appointment_id\": {\"type\": \"number\"},\n                \"checked_in_time\": {\"type\": [\"string\", \"null\"]},\n                \"citizen_name\": {\"type\": \"string\"},\n                \"comments\": {\"type\": \"string\"},\n                \"contact_information\": {},\n                \"end_time\": {\"type\": \"string\"},\n                \"office\": {\"type\": \"number\"},\n                \"office_id\": {\"type\": \"number\"},\n                \"service_id\": {\"type\": \"number\"},\n                \"start_time\": {\"type\": \"string\"},\n                \n            },\n            \"required\": [\"appointment_id\", \"checked_in_time\", \"citizen_name\", \"comments\", \"contact_information\", \"end_time\", \"office\", \"office_id\", \"service_id\", \"start_time\"],\n            \"errors\": {}\n        }\n    },\n    \"required\": [\"appointment\"],\n    \"errors\": {}\n};\n\n//Test to see if response schema is valid\npm.test(\"Validate Response Appointments Schema\", function(){\n    pm.expect(tv4.validate(jsonData, appointmentSchema)).to.be.true;\n});\n"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-Appointment-Data-Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "337fbc09-a0e7-4ff7-bdcf-345f3191e6e7",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"appointment_data_check\", jsonData.data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//  Make sure that jsonData has an appointment property.\npm.test(\"Response should have appointment property\", function(){\n    pm.expect(jsonData.hasOwnProperty(\"appointment\")).to.be.true;\n});\n\n//  If jsonData has booking property, check data.\nif (jsonData.hasOwnProperty(\"appointment\")) {\n\n    //Test to see if service id has expected value\n    pm.test(\"Validate Service ID has expected value\", function(){\n        pm.expect(jsonData.service_id === environment.service_id);\n    });\n\n    //Test to see if office id has expected value\n    pm.test(\"Validate office id has expected value\", function(){\n        pm.expect(jsonData.office_id === environment.current_office_id);\n    });\n\n    //Test to see if start time has expected value\n    pm.test(\"Validate start time has expected value\", function(){\n        pm.expect(jsonData.start_time === environment.start_time);\n    });\n\n    //Test to see if end time has expected value\n    pm.test(\"Validate end time has expected value\", function(){\n        pm.expect(jsonData.end_time === environment.end_time);\n    });\n\n    //Test to see if category has expected value\n    pm.test(\"Validate category has expected value\", function(){\n        pm.expect(jsonData.category === environment.category);\n    });\n\n    //Test to see if comments field has expected value\n    pm.test(\"Validate comments has expected value\", function(){\n        pm.expect(jsonData.comments === environment.comments);\n    });\n\n    //Test to see if citizen name field has expected value\n    pm.test(\"Validate citizen name has expected value\", function(){\n        pm.expect(jsonData.citizen_name === environment.citizne_name);\n    });\n}\n"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-Appointment-List-Schema-Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0bb8478-a315-4a80-b32a-edcaf6964b31",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"appointment_list_schema_check\", jsonData.data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "// Define the JSON Schema expected in response\nvar appointmentSchema = {\n    \"type\": \"object\", \n    \"properties\": {\n        \"appointments\": {\n            \"type\": \"array\",\n            \"properties\": {\n                \"appointment_id\": {\"type\": \"number\"},\n                \"checked_in_time\": {\"type\": [\"string\", \"null\"]},\n                \"citizen_name\": {\"type\": \"string\"},\n                \"comments\": {\"type\": \"string\"},\n                \"contact_information\": {},\n                \"end_time\": {\"type\": \"string\"},\n                \"office\": {\"type\": \"number\"},\n                \"office_id\": {\"type\": \"number\"},\n                \"service_id\": {\"type\": \"number\"},\n                \"start_time\": {\"type\": \"string\"},\n                \n            },\n            \"required\": [\"appointment_id\", \"checked_in_time\", \"citizen_name\", \"comments\", \"contact_information\", \"end_time\", \"office\", \"office_id\", \"service_id\", \"start_time\"],\n            \"errors\": {}\n        }\n    },\n    \"required\": [\"appointments\"],\n    \"errors\": {}\n};\n\n//Test to see if response schema is valid\npm.test(\"Validate Response Appointment List Schema\", function(){\n    pm.expect(tv4.validate(jsonData, appointmentSchema)).to.be.true;\n});\n"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "Who am I TheQ",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "29f6603b-87be-48a6-aa78-dc61d5e95a2e",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8db41d2c-a142-408d-939d-4a6bf4e2f002",
								"exec": [
									"//  Run basic response tests.",
									"eval(environment.basic_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"if (jsonData.hasOwnProperty(\"csr\")) {",
									"\tcurrentOfficeId = jsonData.csr.office_id;",
									"\tcurrentOfficeNumber = jsonData.csr.office.office_number;",
									"\tcurrentCsrId = jsonData.csr.csr_id;",
									"    postman.setEnvironmentVariable(\"current_office_id\", currentOfficeId);",
									"    postman.setEnvironmentVariable(\"current_office_number\", currentOfficeNumber);",
									"    postman.setEnvironmentVariable(\"current_csr_id\", currentCsrId);",
									"};",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}csrs/me/",
							"host": [
								"{{url}}csrs"
							],
							"path": [
								"me",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Room IDs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cf5bf96b-33db-40cc-b8af-565ba32b640c",
								"exec": [
									"// Define the JSON Schema expected in response",
									"var roomSchema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"rooms\": {",
									"            \"type\": \"array\",",
									"            \"properties\": {",
									"                \"capacity\": {\"type\": \"number\"},",
									"                \"color\": {\"type\": \"string\"},",
									"                \"office\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"office_id\": {\"type\": \"number\"},",
									"                        \"office_name\": {\"type\": \"string\"},",
									"                        \"office_number\": {\"type\": \"number\"},",
									"                        \"sb\": {",
									"                            \"type\": \"object\",",
									"                            \"properties\": {",
									"                                \"sb_id\": {\"type\": \"number\"},",
									"                                \"sb_type\": {\"type\": \"string\"}",
									"                            },",
									"                            \"required\": [\"sb_id\", \"sb_type\"]",
									"                        },",
									"                    \"sb_id\": {\"type\": \"number\"}                        ",
									"                    },",
									"                    \"required\": [\"office_id\", \"office_name\", \"office_number\", \"sb\", \"sb_id\"]",
									"                }",
									"            },",
									"            \"required\": [\"capacity\", \"color\", \"office\", \"room_id\", \"room_name\"]",
									"        }",
									"    }",
									"};",
									"",
									"//  Run basic response tests.",
									"eval(environment.basic_response_test);",
									"",
									"//  Get the max response time allowed.",
									"var response_max = JSON.parse(globals.response_max);",
									"",
									"// Check Response code for request",
									"pm.test(\"Response code for request is 200\", function(){",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time less than \" + response_max.toString() + \"ms\", function(){",
									"    pm.expect(pm.response.responseTime).to.be.below(response_max);",
									"});",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Test to see if response schema is valid",
									"pm.test(\"Validate Response Room Schema\", function(){",
									"    pm.expect(tv4.validate(jsonData, roomSchema)).to.be.true;",
									"});",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"if (jsonData.hasOwnProperty(\"rooms\")) {",
									"    console.log(\"==> Rooms\");",
									"    room_id_1 = jsonData.rooms[0].room_id;",
									"    room_id_2 = room_id_1;",
									"    if (jsonData.rooms.length > 1) {",
									"        room_id_2 = jsonData.rooms[1].room_id;",
									"    }",
									"    postman.setEnvironmentVariable(\"room_id_1\", JSON.stringify(room_id_1.toString()));",
									"    postman.setEnvironmentVariable(\"room_id_2\", JSON.stringify(room_id_2.toString()));",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c0c94fc8-fe68-4b14-a364-9a71e4453cc0",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}rooms/",
							"host": [
								"{{url}}rooms"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Service IDs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "588671ee-4cd6-4ad0-9b63-ee04201a2029",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "06e2a209-2747-4c44-b33a-c814a2e6b03a",
								"exec": [
									"//  Run basic tests.",
									"eval(environment.basic_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"services\": {",
									"            \"type\": \"array\",",
									"            \"properties\": {",
									"                \"display_dashboard_ind\" : {",
									"                    \"type\" : \"number\"",
									"                },",
									"                \"deleted\" : {",
									"                    \"type\" : [\"object\", \"null\"]",
									"                },",
									"                \"actual_service_ind\" : {",
									"                    \"type\" : \"number\"",
									"                },",
									"                \"service_id\" : {",
									"                    \"type\" : [\"number\", \"object\"]",
									"                },",
									"                \"service_code\" : {",
									"                    \"type\" : \"string\"",
									"                },",
									"                \"prefix\" : {",
									"                    \"type\" : \"string\"",
									"                },",
									"                \"service_name\" : {",
									"                    \"type\" : \"string\"",
									"                },",
									"                \"parent_id\" : {",
									"                    \"type\" : [\"object\", \"number\", \"null\" ]",
									"                },",
									"                \"service_desc\" : {",
									"                    \"type\" : \"string\"",
									"                }",
									"            },",
									"            \"required\" : [\"display_dashboard_ind\", \"deleted\", \"actual_service_ind\", \"service_id\", \"service_code\",",
									"                          \"prefix\", \"service_name\", \"parent_id\", \"service_desc\"]",
									"        }",
									"    }",
									"};",
									"",
									"//Test to see if response schema is valid",
									"pm.test(\"Validate Service  Schema\", function(){",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"});",
									"",
									"//  Loop to validate schema of each channel.",
									"var allElements = jsonData.services;",
									"var elementCount = 0;",
									"var elementMax = Math.min(10, allElements.length);",
									"//allElements.forEach(function(element) {",
									"for (var currentElement = 0; currentElement < elementMax; currentElement++) {",
									"    element = allElements[currentElement];",
									"    elementCount ++;",
									"    var testTitle = \"Service (\" + elementCount + \"): \" + element.service_name;",
									"    pm.test(\"Validate Schema for \" + testTitle, function(){",
									"        pm.expect(tv4.validate(element, schema)).to.be.true;",
									"    });",
									"    ",
									"    //  Test the authenticate response.",
									"    pm.test(\"--> \" + testTitle + \" dashboard_ind must be 0 or 1\", function() {",
									"        pm.expect(element.display_dashboard_ind).to.be.within(0,1);",
									"    });",
									"    pm.test(\"--> \" + testTitle + \" actual_service_ind must be 1\", function() {",
									"        pm.expect(element.actual_service_ind).to.be.eql(1);",
									"    });",
									"    pm.test(\"--> \" + testTitle + \" parent_id must not be null\", function() {",
									"        pm.expect(element.parent_id).to.not.be.null;",
									"    });",
									"}",
									"",
									"//  Declare and initialize variables.",
									"var mspId = 0;",
									"var taxId = 0;",
									"var mspText = \"Payment - MSP\";",
									"var propTaxText = \"Other - PTAX\";",
									"",
									"//  Look for the MSP and Property Tax IDs.",
									"allElements.forEach(function(element) {",
									"    if (element.service_name === mspText) {",
									"        mspId = element.service_id;",
									"    }",
									"    if (element.service_name === propTaxText) {",
									"        taxId = element.service_id;",
									"    }",
									"});",
									"",
									"//  Check that you found the service IDs.",
									"pm.test(\"The \" + mspText + \" service ID (\" + mspId.toString() + \") should not equal 0\", function() {",
									"    pm.expect(mspId).to.not.be.eql(0);",
									"});",
									"",
									"pm.test(\"The \" + propTaxText + \" service ID (\" + taxId.toString() + \") should not equal 0\", function() {",
									"    pm.expect(taxId).to.not.be.eql(0);",
									"});",
									"",
									"//  Store these IDs for future use.",
									"postman.setEnvironmentVariable(\"service_MSP_id\", JSON.stringify(mspId));",
									"postman.setEnvironmentVariable(\"service_PropTax_id\", JSON.stringify(taxId));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}services/",
							"host": [
								"{{url}}services"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				}
			]
		},
		{
			"name": "Check app health",
			"item": [
				{
					"name": "Check healthz driver Booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "84d2332f-248f-4664-8d95-1b6bedf6cf6f",
								"exec": [
									"//  Set health response time variable.",
									"max_response_time = 1500;",
									"health_tries = 15;",
									"counter = 1;",
									"postman.setEnvironmentVariable(\"max_response_time\", JSON.stringify(max_response_time));",
									"postman.setEnvironmentVariable(\"health_tries\", JSON.stringify(health_tries));",
									"postman.setEnvironmentVariable(\"health_counter\", JSON.stringify(counter));",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Test the health response.",
									"pm.test(\"Response should have 'message' property\", function() {",
									"    pm.expect(jsonData).to.have.property('message');",
									"});",
									"",
									"pm.test(\"Response message should be 'api is health'\", function() {",
									"    pm.expect(jsonData.message).to.be.eql('api is healthy');",
									"});",
									"",
									"//  If response time is OK, proceed to the next test.",
									"if (pm.response.responseTime < max_response_time) {",
									"    postman.setNextRequest(\"Check the readyz endpoint Booking\");",
									"}",
									"    ",
									"//  Response time is too long.  Try again, give pod a chance to spin up.",
									"else {",
									"    postman.setNextRequest(\"Check the healthz endpoint Booking\");",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6a72f4a2-bb46-4492-98b5-2daed12b0f65",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}healthz/",
							"host": [
								"{{url}}healthz"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Check the healthz endpoint Booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "133cad39-e35a-4595-8c0d-b36e2784a3a6",
								"exec": [
									"//  Get the maximum response time allowed.",
									"max_load_time = JSON.parse(globals.max_load_time);",
									"",
									"//  Get and update variables.",
									"health_tries = JSON.parse(postman.getEnvironmentVariable(\"health_tries\"));",
									"counter = JSON.parse(postman.getEnvironmentVariable(\"health_counter\")) + 1;",
									"postman.setEnvironmentVariable(\"health_counter\", JSON.stringify(counter));",
									"",
									"//  Get the response.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Test the health response.",
									"pm.test(\"Health Driver: Try \" + counter.toString() + \": Response should have 'message' property\", function() {",
									"    pm.expect(jsonData).to.have.property('message');",
									"});",
									"",
									"pm.test(\"Response message should be 'api is health'\", function() {",
									"    pm.expect(jsonData.message).to.be.eql('api is healthy');",
									"});",
									"",
									"//  If response time is OK, proceed to the next test.",
									"if (pm.response.responseTime < max_load_time) {",
									"    postman.setNextRequest(\"Check the readyz endpoint Booking\");",
									"}",
									"    ",
									"//  Response time is too long.",
									"else {",
									"    ",
									"    //  You haven't reached your maximum tries yet.  Try again.",
									"    if (counter < health_tries) {",
									"        postman.setNextRequest(\"Check the healthz endpoint Booking\");",
									"    }",
									"    ",
									"    //   You have reached the maximum.  An error, go to next test.",
									"    else {",
									"        pm.test(\"Response should be below \" + max_load_time.toString() + ' in ' + health_tries.toString() + ' tries.', function() {",
									"            pm.expect(counter).to.be.below(health_tries);",
									"        });",
									"        postman.setNextRequest(\"Check the readyz endpoint Booking\");",
									"    }",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e9a8b910-3681-4ef8-9118-389817385284",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}healthz/",
							"host": [
								"{{url}}healthz"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Check the readyz endpoint Booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b64ad848-6a42-4eff-8c6f-4fa51bcb5fe6",
								"exec": [
									"//  Perform the standard tests.",
									"eval(environment.basic_response_test);",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Test the health response.",
									"pm.test(\"Response should have 'message' property\", function() {",
									"    pm.expect(jsonData).to.have.property('message');",
									"});",
									"",
									"pm.test(\"Response message should be 'api is ready'\", function() {",
									"    pm.expect(jsonData.message).to.be.eql('api is ready');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "790bcc01-2c29-454d-bad9-70d38f602c95",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}readyz/",
							"host": [
								"{{url}}readyz"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				}
			],
			"description": "Checks the application health by calling the healthz and readyz endpoints"
		},
		{
			"name": "Get Exam Types",
			"item": [
				{
					"name": "Exam Type List",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1ce578d-0bf8-475a-89b9-56ef9814ba73",
								"exec": [
									"// Define the JSON Schema expected in response",
									"var examTypeSchema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"exam_color\": {\"type\": \"string\"},",
									"            \"exam_type_id\": {\"type\": \"number\"},",
									"            \"exam_type_name\": {\"type\": \"string\"},",
									"            \"ita_ind\": {\"type\": \"number\"},",
									"            \"method_type\": {\"type\": \"string\"},",
									"            \"number_of_hours\": {\"type\": \"number\"},",
									"            \"group_exam_ind\": {\"type\": \"number\"}",
									"        },",
									"        \"required\": [\"exam_color\", \"exam_type_id\", \"exam_type_name\", \"ita_ind\", \"method_type\", \"number_of_hours\", \"group_exam_ind\"]",
									"    },",
									"    \"required\": []",
									"};           ",
									"",
									"//  Run basic response tests.",
									"eval(environment.basic_response_test);",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Test to see if response schema is valid",
									"pm.test(\"Validate Response Exam Type Schema\", function(){",
									"    pm.expect(tv4.validate(jsonData, examTypeSchema)).to.be.true;",
									"});",
									"",
									"//  Store all exam type IDs for future use in adding exams",
									"var allExamIds = [];",
									"",
									"//  Make sure some data returned.",
									"pm.test(\"Response has exam_types property\", function(){",
									"    pm.expect(jsonData.hasOwnProperty(\"exam_types\")).to.be.true;",
									"});",
									"pm.test(\"Response has at least one exam_type\", function(){",
									"    pm.expect(jsonData.exam_types.length).to.be.above(0);",
									"});",
									"",
									"// Set up list of valid exam types, create random functions.",
									"eval(environment.init_exam_type_data);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}exam_types/",
							"host": [
								"{{url}}exam_types"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Exams",
			"item": [
				{
					"name": "Exam Post End-point",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d9e40796-87c5-4bb4-b559-16b0ea4ca169",
								"exec": [
									"//  Get exam type data and functions.",
									"exam_array = JSON.parse(postman.getEnvironmentVariable(\"exam_array_data\"));",
									"eval(environment.create_random_functions);",
									"",
									"//  Create an event number based on the time.",
									"var ms = (new Date().getTime()).toString() + \"00\";",
									"eventNumber = Number(ms.substring(ms.length-6, ms.len)) + 1;",
									"postman.setEnvironmentVariable(\"event_number\", eventNumber);",
									"",
									"//  Update the next event ID.",
									"var eventId = \"pm\" + eventNumber.toString();",
									"postman.setEnvironmentVariable(\"update_number\", 0);",
									"postman.setEnvironmentVariable(\"event_id\", JSON.stringify(eventId));",
									"postman.setEnvironmentVariable(\"event_delete\", eventId);",
									"",
									"//  Calculate a random exam type to use.",
									"random_index = get_random_index(exam_array);",
									"",
									"//  Store for use.",
									"random_exam_type_id = exam_array[random_index].id;",
									"postman.setEnvironmentVariable(\"random_exam_type_id\", JSON.stringify(random_exam_type_id.toString()));",
									"",
									"//  Store other variables for later use.",
									"postman.setEnvironmentVariable(\"exam_method\", JSON.stringify(\"paper\"));",
									"postman.setEnvironmentVariable(\"exam_name\", JSON.stringify(\"Postman Group Exam Name\"));",
									"postman.setEnvironmentVariable(\"exam_written_ind\", JSON.stringify(\"0\"));",
									"postman.setEnvironmentVariable(\"examinee_name\", JSON.stringify(\"Postman Examinee Name\"));",
									"postman.setEnvironmentVariable(\"notes\", JSON.stringify(\"Postman Test Notes\"));",
									"postman.setEnvironmentVariable(\"number_of_students\", JSON.stringify(\"19\"));",
									"postman.setEnvironmentVariable(\"offsite_location\", JSON.stringify(\"Postman test location\"));",
									"",
									"//  Calculate an expiry date a week from today.",
									"var later = new Date();",
									"later.setDate(later.getDate()+7);",
									"",
									"//  Get year, day, month from the later time.",
									"year = later.getFullYear().toString();",
									"month = (\"0\" + (later.getMonth() + 1).toString()).slice(-2);",
									"day = (\"0\" + (later.getDate()).toString()).slice(-2);",
									"",
									"//  Format expiry date for the exam.",
									"expiry_date = year + \"-\" + month + \"-\" + day + \"T19:00:00Z\";",
									"",
									"//  Store globals.",
									"pm.globals.set(\"expiry_date\", JSON.stringify(expiry_date));",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d0577f07-66d8-48e5-afdc-c8f6c3faecc8",
								"exec": [
									"//  Get the max response time allowed.",
									"var response_max = JSON.parse(globals.response_max);",
									"",
									"// Check Response code for request",
									"pm.test(\"Response code for request is 201\", function(){",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response time less than \" + response_max.toString() + \"ms\", function(){",
									"    pm.expect(pm.response.responseTime).to.be.below(response_max);",
									"});",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Test to see if response schema is valid",
									"eval(environment.exam_schema_check);",
									"eval(environment.exam_data_check);",
									"",
									"//  If jsonData has an exam property, save exam ID.",
									"if (jsonData.hasOwnProperty(\"exam\")) {",
									"\tcurrentExamId = jsonData.exam.exam_id;",
									"    postman.setEnvironmentVariable(\"current_exam_id\", currentExamId);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\n\t\"event_id\" : {{event_id}},\n    \"exam_method\" : \"paper\",\n    \"exam_name\" : \"Postman Group Exam Name\",\n    \"exam_type_id\" : {{random_exam_type_id}},\n    \"exam_written_ind\" : \"0\",\n    \"examinee_name\" : \"Pm examinee name\",\n    \"notes\" : \"Pm sample notes\",\n    \"number_of_students\" : \"19\",\n    \"office_id\" : {{current_office_id}},\n    \"offsite_location\" : \"Pm test location\",\n    \"expiry_date\": {{expiry_date}}\n}"
						},
						"url": {
							"raw": "{{url}}exams/",
							"host": [
								"{{url}}exams"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Exam Detail End-point",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b4ba717d-bcfb-4b86-9061-ad0c7b13224c",
								"exec": [
									"//  Get the max response time allowed.",
									"var response_max = JSON.parse(globals.response_max);",
									"",
									"//  Run basic response tests.",
									"eval(environment.basic_response_test);",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Test to see if response schema is valid",
									"eval(environment.exam_schema_check);",
									"eval(environment.exam_data_check);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}exams/{{current_exam_id}}/",
							"host": [
								"{{url}}exams"
							],
							"path": [
								"{{current_exam_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Exam List End-point",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b752599c-335f-4318-ad63-f79dac2cdfc8",
								"exec": [
									"//  Run basic response tests.",
									"eval(environment.basic_response_test);",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Test to see if response schema is valid",
									"eval(environment.exam_schema_list_check);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}exams/",
							"host": [
								"{{url}}exams"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Exam Put End-point",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d60a6848-39ae-4c03-8c49-61ed5c2c6b74",
								"exec": [
									"//  Update the next event ID.",
									"var eventNumber = JSON.parse(postman.getEnvironmentVariable(\"event_number\"));",
									"var updateNumber = JSON.parse(postman.getEnvironmentVariable(\"update_number\")) + 1;",
									"var updateEventId = \"pm-up\" + updateNumber.toString() + \"-\" + eventNumber.toString();",
									"postman.setEnvironmentVariable(\"update_number\", updateNumber);",
									"postman.setEnvironmentVariable(\"update_id\", JSON.stringify(updateEventId));",
									"postman.setEnvironmentVariable(\"exam_name\", JSON.stringify(\"PM exam name - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"examinee_name\", JSON.stringify(\"PM examinee - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"notes\", JSON.stringify(\"PM exam notes - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"offsite_location\", JSON.stringify(\"PM offsite location - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"number_of_students\", JSON.stringify(\"21\"));",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "bf0e5a28-e42e-4b21-84f6-797e9d3a43bb",
								"exec": [
									"//  Get the max response time allowed.",
									"var response_max = JSON.parse(globals.response_max);",
									"",
									"// Check Response code for request",
									"pm.test(\"Response code for request is 201\", function(){",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response time less than \" + response_max.toString() + \"ms\", function(){",
									"    pm.expect(pm.response.responseTime).to.be.below(response_max);",
									"});",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Test to see if response schema is valid",
									"eval(environment.exam_schema_check);",
									"eval(environment.exam_data_check);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"event_id\" : {{update_id}},\n    \"exam_method\" : {{exam_method}},\n    \"exam_name\" : {{exam_name}},\n    \"exam_type_id\" : {{random_exam_type_id}},\n    \"exam_written_ind\" : {{exam_written_ind}},\n    \"examinee_name\" : {{examinee_name}},\n    \"notes\" : {{notes}},\n    \"number_of_students\" : \"119\",\n    \"office_id\" : {{current_office_id}},\n    \"offsite_location\" : {{offsite_location}}\n}\n"
						},
						"url": {
							"raw": "{{url}}exams/{{current_exam_id}}/",
							"host": [
								"{{url}}exams"
							],
							"path": [
								"{{current_exam_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Exam Detail End-point",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "306313f4-82d9-4ad5-aa1f-77d08a2bff89",
								"exec": [
									"//  Run basic response tests.",
									"eval(environment.basic_response_test);",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Test to see if response schema is valid",
									"eval(environment.exam_schema_check);",
									"eval(environment.exam_data_check);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}exams/{{current_exam_id}}/",
							"host": [
								"{{url}}exams"
							],
							"path": [
								"{{current_exam_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Exam Delete End-point",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dbd23b57-bf48-49bd-8351-91f24bd1f714",
								"exec": [
									"//  Get the max response time allowed.",
									"var response_max = JSON.parse(globals.response_max);",
									"",
									"// Check Response code for request",
									"pm.test(\"Response code for request is 204\", function(){",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"Response time less than \" + response_max.toString() + \"ms\", function(){",
									"    pm.expect(pm.response.responseTime).to.be.below(response_max);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}exams/{{current_exam_id}}/",
							"host": [
								"{{url}}exams"
							],
							"path": [
								"{{current_exam_id}}",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Exams Export",
			"item": [
				{
					"name": "Exams Export List",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "20f5520d-2265-47c4-b6e0-a352b9f6b287",
								"exec": [
									"// Check Response code for request",
									"pm.test(\"Response code for request is 200\", function(){",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time less than 20,000ms\", function(){",
									"    pm.expect(pm.response.responseTime).to.be.below(20000);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "78a4530e-3a44-49a5-9ffa-086ff351fbc7",
								"exec": [
									"//  Calculate a start date four weeks prior to today.",
									"var start = new Date();",
									"start.setDate(start.getDate()-28);",
									"",
									"//  Get year, day, month from the start time.",
									"start_year = start.getFullYear().toString();",
									"start_month = (\"0\" + (start.getMonth() + 1).toString()).slice(-2);",
									"start_day = (\"0\" + (start.getDate()).toString()).slice(-2);",
									"start_date = start_year + \"-\" + start_month + \"-\" + start_day;",
									"",
									"//  Get year, day, month from the current day.",
									"var today = new Date();",
									"end_year = today.getFullYear().toString();",
									"end_month = (\"0\" + (today.getMonth() + 1).toString()).slice(-2);",
									"end_day = (\"0\" + (today.getDate()).toString()).slice(-2);",
									"end_date = end_year + \"-\" + end_month + \"-\" + end_day;",
									"",
									"console.log(\"Start: \" + start_date);",
									"console.log(\"End:   \" + end_date);",
									"pm.globals.set(\"start_date\", start_date);",
									"pm.globals.set(\"end_date\", end_date);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}exams/export/?start_date={{start_date}}&end_date={{end_date}}",
							"host": [
								"{{url}}exams"
							],
							"path": [
								"export",
								""
							],
							"query": [
								{
									"key": "start_date",
									"value": "{{start_date}}"
								},
								{
									"key": "end_date",
									"value": "{{end_date}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Bookings",
			"item": [
				{
					"name": "Booking Post End-point",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3a350c60-f3fa-4176-b9e7-ec13b7910321",
								"exec": [
									"// Check Response code for request",
									"pm.test(\"Response code for request is 201\", function(){",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"//  Check if response time less than max allowed.",
									"var response_max = JSON.parse(globals.response_max);",
									"pm.test(\"Response time less than \" + response_max.toString() + \"ms\", function(){",
									"    pm.expect(pm.response.responseTime).to.be.below(response_max);",
									"});",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Test to see if response schema is valid",
									"eval(environment.booking_schema_check);",
									"eval(environment.booking_data_check);",
									"",
									"var booking_id = jsonData.booking.booking_id;",
									"",
									"//Dynamic variable used for end-point testing later on",
									"postman.setEnvironmentVariable(\"booking_id\", JSON.stringify(booking_id));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6ee773d1-20b0-4e9b-81c5-2712cb984ec2",
								"exec": [
									"//  Calculate a start date a week from today.",
									"var later = new Date();",
									"later.setDate(later.getDate()+7);",
									"",
									"//  Get year, day, month from the later time.",
									"year = later.getFullYear().toString();",
									"month = (\"0\" + (later.getMonth() + 1).toString()).slice(-2);",
									"day = (\"0\" + (later.getDate()).toString()).slice(-2);",
									"",
									"//  Format starting and ending time for the booking.",
									"start_time = year + \"-\" + month + \"-\" + day + \"T17:00:00Z\";",
									"end_time = year + \"-\" + month + \"-\" + day + \"T19:00:00Z\";",
									"",
									"//  Store globals.",
									"pm.globals.set(\"start_time\", JSON.stringify(start_time));",
									"pm.globals.set(\"end_time\", JSON.stringify(end_time));",
									"pm.globals.set(\"fees\", JSON.stringify(\"false\"));",
									"pm.globals.set(\"booking_name\", JSON.stringify(\"Super big demo next week\"));",
									"pm.globals.set(\"room_id\", pm.environment.get(\"room_id_1\"));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"start_time\": {{start_time}},\n  \"end_time\": {{end_time}},\n  \"room_id\": {{room_id}},\n  \"fees\": {{fees}},\n  \"booking_name\": {{booking_name}},\n  \"office_id\" : {{current_office_id}}\n}\n"
						},
						"url": {
							"raw": "{{url}}bookings/",
							"host": [
								"{{url}}bookings"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Booking Detail End-point",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f7f70ed4-07bb-4ef2-a40f-56a0b58636b0",
								"exec": [
									"//  Run basic response tests.",
									"eval(environment.basic_response_test);",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Test to see if response schema is valid",
									"eval(environment.booking_schema_check);",
									"eval(environment.booking_data_check);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}bookings/{{booking_id}}/",
							"host": [
								"{{url}}bookings"
							],
							"path": [
								"{{booking_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Booking List End-point",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a49d1fdb-55a2-43f6-af19-f7a656ba2f40",
								"exec": [
									"//  Run basic response tests.",
									"eval(environment.basic_response_test);",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Test to see if response schema is valid",
									"eval(environment.booking_list_schema_check);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}bookings/",
							"host": [
								"{{url}}bookings"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Booking Put End-point",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a35eb081-07d2-4d96-913f-12a8a8f7ba32",
								"exec": [
									"// Check Response code for request",
									"pm.test(\"Response code for request is 200\", function(){",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//  Check if response time less than max allowed.",
									"var response_max = JSON.parse(globals.response_max);",
									"pm.test(\"Response time less than \" + response_max.toString() + \"ms\", function(){",
									"    pm.expect(pm.response.responseTime).to.be.below(response_max);",
									"});",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Test to see if response schema is valid",
									"eval(environment.booking_schema_check);",
									"eval(environment.booking_data_check);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8a330b78-1d60-4159-a6bf-90e2b006fd45",
								"exec": [
									"//  Calculate a start date a week from today.",
									"var later = new Date();",
									"later.setDate(later.getDate()+7);",
									"",
									"//  Get year, day, month from the later time.",
									"year = later.getFullYear().toString();",
									"month = (\"0\" + (later.getMonth() + 1).toString()).slice(-2);",
									"day = (\"0\" + (later.getDate()).toString()).slice(-2);",
									"",
									"//  Format starting and ending time for the booking.",
									"start_time = year + \"-\" + month + \"-\" + day + \"T21:00:00Z\";",
									"end_time = year + \"-\" + month + \"-\" + day + \"T23:00:00Z\";",
									"",
									"pm.globals.set(\"start_time\", JSON.stringify(start_time));",
									"pm.globals.set(\"end_time\", JSON.stringify(end_time));",
									"pm.globals.set(\"fees\", JSON.stringify(\"true\"));",
									"pm.globals.set(\"booking_name\", JSON.stringify(\"Time to pay your fees!\"));",
									"pm.globals.set(\"room_id\", pm.environment.get(\"room_id_2\"));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"start_time\": {{start_time}},\n  \"end_time\": {{end_time}},\n  \"room_id\": {{room_id}},\n  \"fees\": {{fees}},\n  \"booking_name\": {{booking_name}},\n  \"office_id\" : {{current_office_id}}\n}"
						},
						"url": {
							"raw": "{{url}}bookings/{{booking_id}}/",
							"host": [
								"{{url}}bookings"
							],
							"path": [
								"{{booking_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Booking Detail End-point Again",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "21d5f260-4616-4430-8e90-9c2659312669",
								"exec": [
									"//  Run basic response tests.",
									"eval(environment.basic_response_test);",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Test to see if response schema is valid",
									"eval(environment.booking_schema_check);",
									"eval(environment.booking_data_check);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}bookings/{{booking_id}}/",
							"host": [
								"{{url}}bookings"
							],
							"path": [
								"{{booking_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Booking Delete End-point",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f44b5cf7-c320-485d-9a17-b1d821ccbe17",
								"exec": [
									"// Check Response code for request",
									"pm.test(\"Response code for request is 204\", function(){",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"//  Check if response time less than max allowed.",
									"var response_max = JSON.parse(globals.response_max);",
									"pm.test(\"Response time less than \" + response_max.toString() + \"ms\", function(){",
									"    pm.expect(pm.response.responseTime).to.be.below(response_max);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}bookings/{{booking_id}}/",
							"host": [
								"{{url}}bookings"
							],
							"path": [
								"{{booking_id}}",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Invigilators",
			"item": [
				{
					"name": "Invigilator List End-point",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f13bdb24-44e2-4143-b528-3bf3e6cbc0ac",
								"exec": [
									"// Define the JSON Schema expected in response",
									"var invigilatorSchema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"invigilators\": {",
									"            \"type\": \"array\",",
									"            \"properties\": {",
									"                \"contact_email\": {\"type\": \"string\"},",
									"                \"contact_phone\": {\"type\": \"string\"},",
									"                \"contract_expiry_date\": {\"type\": \"string\"},",
									"                \"contract_number\": {\"type\": \"string\"},",
									"                \"invigilator_id\": {\"type\": \"number\"},",
									"                \"invigilator_name\": {\"type\": \"string\"},",
									"                \"invigilator_notes\": {\"type\": \"string\"},",
									"                \"office\":{",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"office_id\": {\"type\": \"number\"},",
									"                        \"office_name\": {\"type\": \"string\"},",
									"                        \"office_number\": {\"type\": \"number\"},",
									"                        \"sb\": {",
									"                            \"type\": \"object\",",
									"                            \"properties\": {",
									"                                \"sb_id\": {\"type\": \"number\"},",
									"                                \"sb_type\": {\"type\": \"string\"}",
									"                            },",
									"                            \"required\": [\"sb_id\", \"sb_type\"]",
									"                        }",
									"                    },",
									"                    \"required\": [\"office_id\", \"office_name\", \"office_number\", \"sb\", \"sb_id\"]",
									"                }",
									"            },",
									"            \"required\": [\"contact_email\", \"contact_phone\", \"contract_expiry_date\", \"contract_number\", \"invigilator_id\", \"invigilator_name\", \"invigilator_notes\", \"office\"]",
									"        }",
									"    }",
									"};",
									"",
									"//  Run basic response tests.",
									"eval(environment.basic_response_test);",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Test to see if response schema is valid",
									"pm.test(\"Validate Response Invigilator Schema\", function(){",
									"    pm.expect(tv4.validate(jsonData, invigilatorSchema)).to.be.true;",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}invigilators/",
							"host": [
								"{{url}}invigilators"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Rooms",
			"item": [
				{
					"name": "Room List End-point",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "46b32d4f-3bc6-46bd-8b51-37601a698530",
								"exec": [
									"// Define the JSON Schema expected in response",
									"var roomSchema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"rooms\": {",
									"            \"type\": \"array\",",
									"            \"properties\": {",
									"                \"capacity\": {\"type\": \"number\"},",
									"                \"color\": {\"type\": \"string\"},",
									"                \"office\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"office_id\": {\"type\": \"number\"},",
									"                        \"office_name\": {\"type\": \"string\"},",
									"                        \"office_number\": {\"type\": \"number\"},",
									"                        \"sb\": {",
									"                            \"type\": \"object\",",
									"                            \"properties\": {",
									"                                \"sb_id\": {\"type\": \"number\"},",
									"                                \"sb_type\": {\"type\": \"string\"}",
									"                            },",
									"                            \"required\": [\"sb_id\", \"sb_type\"]",
									"                        },",
									"                    \"sb_id\": {\"type\": \"number\"}                        ",
									"                    },",
									"                    \"required\": [\"office_id\", \"office_name\", \"office_number\", \"sb\", \"sb_id\"]",
									"                }",
									"            },",
									"            \"required\": [\"capacity\", \"color\", \"office\", \"room_id\", \"room_name\"]",
									"        }",
									"    }",
									"};",
									"",
									"//  Run basic response tests.",
									"eval(environment.basic_response_test);",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Test to see if response schema is valid",
									"pm.test(\"Validate Response Room Schema\", function(){",
									"    pm.expect(tv4.validate(jsonData, roomSchema)).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}rooms/",
							"host": [
								"{{url}}rooms"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "CSRS",
			"item": [
				{
					"name": "CSRS Me Get End-point",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aaa82e14-1c98-407e-ac46-919e153c41d9",
								"exec": [
									"// Define the JSON Schema expected in response",
									"var CSRSSchema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"csr\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"csr_id\": {\"type\": \"number\"},",
									"                \"csr_state\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"csr_state_desc\": {\"type\": \"string\"},",
									"                        \"csr_state_id\": {\"type\": \"number\"},",
									"                        \"csr_state_name\": {\"type\": \"string\"}",
									"                    },",
									"                    \"required\": [\"csr_state_desc\", \"csr_state_id\", \"csr_state_name\"]",
									"                },",
									"                \"csr_state_id\": {\"type\": \"number\"},",
									"                \"deleted\": {},",
									"                \"finance_designate\": {\"type\": \"number\"},",
									"                \"office_manager\": {\"type\": \"number\"},",
									"                \"ita2_designate\": {\"type\": \"number\"},",
									"                \"office\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"appointments_enabled_ind\": {\"type\": \"number\"},",
									"                        \"back_office_list\": {",
									"                            \"type\": \"array\",",
									"                            \"properties\": {",
									"                                \"actual_service_ind\": {\"type\": \"number\"},",
									"                                \"deleted\": {},",
									"                                \"display_dashboard_ind\": {\"type\": \"number\"},",
									"                                \"parent\": {",
									"                                    \"type\": \"object\",",
									"                                    \"properties\": {",
									"                                        \"service_name\": {\"type\": \"string\"}",
									"                                    },",
									"                                    \"required\": [\"service_name\"]",
									"                                },",
									"                                \"parent_id\": {\"type\": \"number\"},",
									"                                \"prefix\": {\"type\": \"string\"},",
									"                                \"service_code\": {\"type\": \"string\"},",
									"                                \"service_desc\": {\"type\": \"string\"},",
									"                                \"service_id\": {\"type\": \"number\"},",
									"                                \"service_name\": {\"type\": \"string\"},",
									"                            },",
									"                            \"required\": [\"actual_service_ind\", \"deleted\", \"display_dashboard_ind\", \"parent\",",
									"                                        \"parent_id\", \"prefix\", \"service_code\", \"service_desc\", \"service_id\",",
									"                                        \"service_name\"]",
									"                        },",
									"                        \"counters\": {",
									"                            \"type\": \"array\",",
									"                            \"properties\": {",
									"                                \"counter_id\": {\"type\": \"number\"},",
									"                                \"counter_name\": {\"type\": \"string\"}",
									"                            },",
									"                            \"required\": [\"counter_id\", \"counter_name\"]",
									"                        },",
									"                        \"exams_enabled_ind\": {\"type\": \"number\"},",
									"                        \"office_id\": {\"type\": \"number\"},",
									"                        \"office_name\": {\"type\": \"string\"},",
									"                        \"office_number\": {\"type\": \"number\"},",
									"                        \"quick_list\": {",
									"                            \"type\": \"array\",",
									"                            \"properties\": {",
									"                                \"actual_service_ind\": {\"type\": \"number\"},",
									"                                \"deleted\": {},",
									"                                \"display_dashboard_ind\": {\"type\": \"number\"},",
									"                                \"parent\": {",
									"                                    \"type\": \"object\",",
									"                                    \"properties\": {",
									"                                        \"service_name\": {\"type\": \"string\"}",
									"                                    },",
									"                                    \"required\": [\"service_name\"]",
									"                                },",
									"                                \"parent_id\": {\"type\": \"number\"},",
									"                                \"prefix\": {\"type\": \"string\"},",
									"                                \"service_code\": {\"type\": \"string\"},",
									"                                \"service_desc\": {\"type\": \"string\"},",
									"                                \"service_id\": {\"type\": \"number\"},",
									"                                \"service_name\": {\"type\": \"string\"},",
									"                            },",
									"                            \"required\": [\"actual_service_ind\", \"deleted\", \"display_dashboard_ind\", \"parent\",",
									"                                        \"parent_id\", \"prefix\", \"service_code\", \"service_desc\", \"service_id\",",
									"                                        \"service_name\"]",
									"                        },",
									"                        \"sb\":{",
									"                            \"type\": \"object\",",
									"                            \"properties\": {",
									"                                \"sb_id\": {\"type\": \"number\"},",
									"                                \"sb_type\": {\"type\": \"string\"}",
									"                            },",
									"                            \"required\": [\"sb_id\", \"sb_type\"]",
									"                        },",
									"                        \"sb_id\": {\"type\": \"number\"},",
									"                        \"timezone\": {",
									"                            \"type\": \"object\",",
									"                            \"properties\": {",
									"                                \"timezone_id\": {\"type\": \"number\"},",
									"                                \"timezone_name\": {\"type\": \"string\"}",
									"                            },",
									"                            \"required\": [\"timezone_id\", \"timezone_name\"]",
									"                        }",
									"                    },",
									"                    \"required\": [\"appointments_enabled_ind\", \"back_office_list\", \"counters\",",
									"                                 \"exams_enabled_ind\", \"office_id\", \"office_name\", \"office_number\",",
									"                                 \"quick_list\", \"sb\", \"sb_id\", ]",
									"                },",
									"                \"office_id\": {\"type\": \"number\"},",
									"                \"pesticide_designate\": {\"type\": \"number\"},",
									"                \"qt_xn_csr_ind\": {\"type\": \"number\"},",
									"                \"receptionist_ind\": {\"type\": \"number\"},",
									"                \"role\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"role_code\": {\"type\": \"string\"},",
									"                        \"role_desc\": {\"type\": \"string\"},",
									"                        \"role_id\": {\"type\": \"number\"}",
									"                    },",
									"                    \"required\": [\"role_code\", \"role_desc\", \"role_id\"]",
									"                },",
									"                \"role_id\": {\"type\": \"number\"},",
									"                \"username\": {\"type\": \"string\"}",
									"            },",
									"        },",
									"        \"attention_needed\": {\"type\": \"boolean\"},",
									"        \"active_citizens\" : {\"type\": \"array\"},",
									"        \"back_office_display\": {\"type\": \"string\"},",
									"        \"recurring_feature_flag\": {\"type\": \"string\"}",
									"    },",
									"    \"required\": [\"csr\", \"attention_needed\", \"active_citizens\", \"back_office_display\", \"recurring_feature_flag\"]",
									"};",
									"",
									"//  Run basic response tests.",
									"eval(environment.basic_response_test);",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Test to see if response schema is valid",
									"pm.test(\"Validate Response CSRs Schema\", function(){",
									"    pm.expect(tv4.validate(jsonData, CSRSSchema)).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "45e9b5d1-69e3-42d3-8065-1d1b47ed3ee7",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}csrs/me/",
							"host": [
								"{{url}}csrs"
							],
							"path": [
								"me",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Offices",
			"item": [
				{
					"name": "Office List End-point",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f326b8a0-a5ac-4e57-a09e-aafa33d0c644",
								"exec": [
									"// Define the JSON Schema expected in response",
									"var officeSchema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"offices\": {",
									"            \"type\": \"array\",",
									"            \"properties\": {",
									"                \"exams_enabled\": {\"type\": \"number\"},",
									"                \"office_id\": {\"type\": \"number\"},",
									"                \"office_name\": {\"type\": \"string\"},",
									"                \"office_number\": {\"type\": \"number\"},",
									"                \"sb\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"sb_id\": {\"type\": \"number\"},",
									"                        \"sb_type\": {\"type\": \"string\"}",
									"                    },",
									"                    \"required\": [\"sb_id\", \"sb_type\"]",
									"                },",
									"                \"sb_id\": {\"type\": \"number\"}",
									"            },",
									"            \"required\": [\"exams_enabled\", \"office_id\", \"office_name\", \"office_number\", \"sb\", \"sb_id\"]",
									"        }",
									"    }",
									"};",
									"",
									"//  Run basic response tests.",
									"eval(environment.basic_response_test);",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Test to see if response schema is valid",
									"pm.test(\"Validate Response Office Schema\", function(){",
									"    pm.expect(tv4.validate(jsonData, officeSchema)).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}offices/",
							"host": [
								"{{url}}offices"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Appointments",
			"item": [
				{
					"name": "Appointment Post End-point",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73827255-9cba-4666-be8c-62f802b0d4f0",
								"exec": [
									"// Check Response code for request",
									"pm.test(\"Response code for request is 201\", function(){",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"//  Check if response time less than max allowed.",
									"var response_max = JSON.parse(globals.response_max);",
									"pm.test(\"Response time less than \" + response_max.toString() + \"ms\", function(){",
									"    pm.expect(pm.response.responseTime).to.be.below(response_max);",
									"});",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Test to see if response schema is valid",
									"eval(environment.appointment_schema_check);",
									"eval(environment.appointment_data_check);",
									"",
									"var appointment_id = jsonData.appointment.appointment_id;",
									"",
									"//Dynamic variable used for end-point testing later on",
									"postman.setEnvironmentVariable(\"appointment_id\", JSON.stringify(appointment_id));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "bfbf3ac3-4d4b-4810-97b7-b6c4a210bfab",
								"exec": [
									"//  Calculate a start date a week from today.",
									"var later = new Date();",
									"later.setDate(later.getDate()+7);",
									"",
									"//  Get year, day, month from the later time.",
									"year = later.getFullYear().toString();",
									"month = (\"0\" + (later.getMonth() + 1).toString()).slice(-2);",
									"day = (\"0\" + (later.getDate()).toString()).slice(-2);",
									"",
									"//  Format starting and ending time for the booking.",
									"start_time = year + \"-\" + month + \"-\" + day + \"T17:00:00Z\";",
									"end_time = year + \"-\" + month + \"-\" + day + \"T19:00:00Z\";",
									"",
									"pm.globals.set(\"start_time\", JSON.stringify(start_time));",
									"pm.globals.set(\"end_time\", JSON.stringify(end_time));",
									"pm.globals.set(\"category\", JSON.stringify(\"Exam\"));",
									"pm.globals.set(\"comments\", JSON.stringify(\"Missed playoffs, needs to talk #1.\"));",
									"pm.globals.set(\"citizen_name\", JSON.stringify(\"LeBron James Appointment #1\"));",
									"pm.globals.set(\"service_id\", pm.environment.get(\"service_PropTax_id\"));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \"service_id\": {{service_id}},\n \"office_id\" : {{current_office_id}},\n \"start_time\": {{start_time}},\n \"end_time\": {{end_time}},\n \"category\": {{category}},\n \"comments\": {{comments}},\n \"citizen_name\": {{citizen_name}}\n}"
						},
						"url": {
							"raw": "{{url}}appointments/",
							"host": [
								"{{url}}appointments"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Appointment Detail End-point",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "83f92527-de24-44df-9049-28538fd16b48",
								"exec": [
									"//  Run basic response tests.",
									"eval(environment.basic_response_test);",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Test to see if response schema is valid",
									"eval(environment.appointment_schema_check);",
									"eval(environment.appointment_data_check);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}appointments/{{appointment_id}}/",
							"host": [
								"{{url}}appointments"
							],
							"path": [
								"{{appointment_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Appointment List End-point",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9a31107b-a7b5-43db-bb4a-fef000f9486a",
								"exec": [
									"//  Run basic response tests.",
									"eval(environment.basic_response_test);",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Test to see if response schema is valid\\",
									"eval(environment.appointment_list_schema_check);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}appointments/",
							"host": [
								"{{url}}appointments"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Appointment Put End-point",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "70f1dd82-f4bb-44ad-b0e7-4703301add70",
								"exec": [
									"// Check Response code for request",
									"pm.test(\"Response code for request is 200\", function(){",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//  Check if response time less than max allowed.",
									"var response_max = JSON.parse(globals.response_max);",
									"pm.test(\"Response time less than \" + response_max.toString() + \"ms\", function(){",
									"    pm.expect(pm.response.responseTime).to.be.below(response_max);",
									"});",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Test to see if response schema is valid",
									"eval(environment.appointment_schema_check);",
									"eval(environment.appointment_data_check);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "43b012cf-4b28-423e-987f-d7620d2b7265",
								"exec": [
									"//  Calculate a start date a week from today.",
									"var later = new Date();",
									"later.setDate(later.getDate()+7);",
									"",
									"//  Get year, day, month from the later time.",
									"year = later.getFullYear().toString();",
									"month = (\"0\" + (later.getMonth() + 1).toString()).slice(-2);",
									"day = (\"0\" + (later.getDate()).toString()).slice(-2);",
									"",
									"//  Format starting and ending time for the booking.",
									"start_time = year + \"-\" + month + \"-\" + day + \"T21:00:00Z\";",
									"end_time = year + \"-\" + month + \"-\" + day + \"T23:00:00Z\";",
									"",
									"pm.globals.set(\"start_time\", JSON.stringify(start_time));",
									"pm.globals.set(\"end_time\", JSON.stringify(end_time));",
									"pm.globals.set(\"comments\", JSON.stringify(\"super EARLY\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \"office_id\" : {{current_office_id}},\n \"start_time\": {{start_time}},\n \"end_time\": {{end_time}},\n \"category\": {{category}},\n \"comments\": {{comments}}\n}"
						},
						"url": {
							"raw": "{{url}}appointments/{{appointment_id}}/",
							"host": [
								"{{url}}appointments"
							],
							"path": [
								"{{appointment_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Appointment Delete End-point",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "74489296-685d-4836-b78d-bc743ac9fc02",
								"exec": [
									"// Check Response code for request",
									"pm.test(\"Response code for request is 204\", function(){",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"//  Check if response time less than max allowed.",
									"var response_max = JSON.parse(globals.response_max);",
									"pm.test(\"Response time less than \" + response_max.toString() + \"ms\", function(){",
									"    pm.expect(pm.response.responseTime).to.be.below(response_max);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}appointments/{{appointment_id}}/",
							"host": [
								"{{url}}appointments"
							],
							"path": [
								"{{appointment_id}}",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Public User Appointments",
			"item": [
				{
					"name": "Authenticate and create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4c22fc3d-d3fb-4dea-accf-a4e44de4b2c3",
								"exec": [
									"// Check Response code for request",
									"pm.test(\"Response code for request is 200\", function(){",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//  Check if response time less than max allowed.",
									"var response_max = JSON.parse(globals.response_max);",
									"pm.test(\"Response time less than \" + response_max.toString() + \"ms\", function(){",
									"    pm.expect(pm.response.responseTime).to.be.below(response_max);",
									"});",
									"",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"",
									"var user_id = jsonData[0].user_id;",
									"",
									"//Dynamic variable used for end-point testing later on",
									"postman.setEnvironmentVariable(\"user_id\", JSON.stringify(user_id));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{public_user_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Typea",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n}"
						},
						"url": {
							"raw": "{{public_url}}users/",
							"host": [
								"{{public_url}}users"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Book an appointment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7cd98229-3616-4bd8-af80-244aa77e010d",
								"exec": [
									"// Check Response code for request",
									"pm.test(\"Response code for request is 201\", function(){",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"//  Check if response time less than max allowed.",
									"var response_max = JSON.parse(globals.response_max);",
									"pm.test(\"Response time less than \" + response_max.toString() + \"ms\", function(){",
									"    pm.expect(pm.response.responseTime).to.be.below(response_max);",
									"});",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Test to see if response schema is valid",
									"eval(environment.appointment_schema_check);",
									"eval(environment.appointment_data_check);",
									"",
									"var appointment_id = jsonData.appointment.appointment_id;",
									"",
									"//Dynamic variable used for end-point testing later on",
									"postman.setEnvironmentVariable(\"appointment_id\", JSON.stringify(appointment_id));",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "97b5258b-5569-4af9-a7e5-4e0b5241d0e4",
								"exec": [
									"//  Calculate a start date a week from today.",
									"var later = new Date();",
									"var day = later.getDay();",
									"later.setDate(later.getDate() + 5 + (day === 6 ? 2 : +!day) + (Math.floor((5 - 1 + (day % 6 || 1)) / 5) * 2));",
									"",
									"//  Get year, day, month from the later time.",
									"year = later.getFullYear().toString();",
									"month = (\"0\" + (later.getMonth() + 1).toString()).slice(-2);",
									"day = (\"0\" + (later.getDate()).toString()).slice(-2);",
									"",
									"//  Format starting and ending time for the booking.",
									"start_time = year + \"-\" + month + \"-\" + day + \"T23:00:00Z\";",
									"end_time = year + \"-\" + month + \"-\" + day + \"T23:30:00Z\";",
									"",
									"pm.globals.set(\"public_start_time\", JSON.stringify(start_time));",
									"pm.globals.set(\"public_end_time\", JSON.stringify(end_time));",
									"pm.globals.set(\"category\", JSON.stringify(\"Exam\"));",
									"pm.globals.set(\"comments\", JSON.stringify(\"Missed playoffs, needs to talk #1.\"));",
									"pm.globals.set(\"citizen_name\", JSON.stringify(\"LeBron James Appointment #1\"));",
									"pm.globals.set(\"service_id\", pm.environment.get(\"service_PropTax_id\"));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{public_user_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \"service_id\": {{service_id}},\n \"office_id\" : {{current_office_id}},\n \"start_time\": {{public_start_time}},\n \"end_time\": {{public_end_time}},\n \"category\": {{category}},\n \"comments\": {{comments}}\n}"
						},
						"url": {
							"raw": "{{public_url}}appointments/",
							"host": [
								"{{public_url}}appointments"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit user profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c283c776-a53a-4088-bcc3-7f1d25a396f2",
								"exec": [
									"// Check Response code for request",
									"pm.test(\"Response code for request is 200\", function(){",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//  Check if response time less than max allowed.",
									"var response_max = JSON.parse(globals.response_max);",
									"pm.test(\"Response time less than \" + response_max.toString() + \"ms\", function(){",
									"    pm.expect(pm.response.responseTime).to.be.below(response_max);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{public_user_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"test@test.com\",\n    \"telephone\": \"7787777777\",\n    \"send_reminders\": true\n}"
						},
						"url": {
							"raw": "{{public_url}}users/{{user_id}}/",
							"host": [
								"{{public_url}}users"
							],
							"path": [
								"{{user_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "List all appointments",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ae4ed8aa-c509-49ac-8dd9-ca6d8bde585c",
								"exec": [
									"//  Run basic response tests.",
									"eval(environment.basic_response_test);",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Test to see if response schema is valid\\",
									"eval(environment.appointment_list_schema_check);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{public_user_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{public_url}}users/appointments/",
							"host": [
								"{{public_url}}users"
							],
							"path": [
								"appointments",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Appointment Delete End-point",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05918392-fcb1-407d-8356-ce5a96235407",
								"exec": [
									"// Check Response code for request",
									"pm.test(\"Response code for request is 204\", function(){",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"//  Check if response time less than max allowed.",
									"var response_max = JSON.parse(globals.response_max);",
									"pm.test(\"Response time less than \" + response_max.toString() + \"ms\", function(){",
									"    pm.expect(pm.response.responseTime).to.be.below(response_max);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{public_user_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{public_url}}appointments/{{appointment_id}}/",
							"host": [
								"{{public_url}}appointments"
							],
							"path": [
								"{{appointment_id}}",
								""
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "372f12d3-79f2-4acf-803b-f7d70c8b116c",
						"type": "text/javascript",
						"exec": [
							"auth_url = globals.auth_url;",
							"realm = globals.realm;",
							"clientid = globals.clientid;",
							"userid = globals.public_user_id;",
							"password = globals.public_user_password;",
							"client_secret = globals.client_secret;",
							"",
							"const echoPostRequest = {",
							"  url: auth_url + '/auth/realms/' + realm + '/protocol/openid-connect/token',",
							"  method: 'POST',",
							"  header: 'Content-Type:application/x-www-form-urlencoded',",
							"  body: {",
							"    mode: 'raw',",
							"    raw: 'grant_type=password&client_id=' + clientid ",
							"          + '&username=' + userid ",
							"          + '&password=' + password",
							"          + '&client_secret=' + client_secret",
							"  }",
							"};",
							"pm.sendRequest(echoPostRequest, function (err, res) {",
							"    var jsonData = res.json();",
							"    if (jsonData.hasOwnProperty('access_token')) {",
							"    \tpm.globals.set(\"public_user_token\", jsonData.access_token);",
							"\t    pm.globals.set(\"public_user_refresh_token\", jsonData.refresh_token);",
							"\t    if (err) {",
							"\t        console.log(err);",
							"\t    }",
							"\t    // console.log(err ? err : res.json());",
							"\t} else {",
							"\t    pm.globals.set(\"public_user_token\", 0);",
							"\t    pm.globals.set(\"public_user_refresh_token\", 0);",
							"\t}",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "3754cf3a-5f82-4591-8644-a3a0e8e98f00",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	]
}