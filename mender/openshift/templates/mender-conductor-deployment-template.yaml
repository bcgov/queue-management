kind: Template
apiVersion: v1
labels:
  template: "mender-conductor-deployment" 
  app: mender
  subapp: mender-conductor
metadata:
  name: mender-conductor-deployment
objects:
  # Mender-Conductor 
  ## used by API-Gatway to communicate to multiple services simultaneously
  - apiVersion: v1
    kind: Service
    metadata:
      name: mender-conductor
      labels:
        app: mender
        subapp: mender-conductor
    spec:
      ports:
      - port: 8080
        protocol: TCP
      selector:
        service: mender-conductor
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        description: "The mender-conductor used by API-Gatway to communicate to multiple services simultaneously."
        template.alpha.openshift.io/wait-for-ready: "true" #?
      name: mender-conductor
      labels:
        app: mender
        subapp: mender-conductor
    spec:
      replicas: 1
      selector:
        app: mender
        service: mender-conductor
      strategy:
        type: Rolling
        rollingParams:
          updatePeriodSeconds: 1
          intervalSeconds: 1
          timeoutSeconds: 120
          maxSurge: 2
          maxUnavailable: 1
        resources: {}
        activeDeadlineSeconds: 3600
      template:
        metadata:
          labels:
            app: mender
            service: mender-conductor
            subapp: mender-conductor
        spec:
          containers:
            - name: mender-conductor
              image: " "
              env:
                - name: CONFIG_PROP
                  value: "config.properties"
                - name: CONDUCTOR_JAVA_OPTS
                  value: "-Xms128m -Xmx128m"
              # readinessProbe:
              #   failureThreshold: 3
              #   initialDelaySeconds: 3
              #   periodSeconds: 10
              #   successThreshold: 1
              #   tcpSocket:
              #     port: 8080
              #   timeoutSeconds: 3
              # livenessProbe:
              #   failureThreshold: 3
              #   initialDelaySeconds: 3
              #   periodSeconds: 10
              #   successThreshold: 1
              #   tcpSocket:
              #     port: 8080
              #   timeoutSeconds: 3
              terminationMessagePath: "/dev/termination-log"
              terminationMessagePolicy: File
              imagePullPolicy: Always
              resources:
                requests:
                  cpu: 200m
                  memory: 256Mi
                limits:
                  cpu: 500m
                  memory: 512Mi
          restartPolicy: Always
          terminationGracePeriodSeconds: 30
          dnsPolicy: ClusterFirst
          securityContext: {}
          schedulerName: default-scheduler
          affinity:
            podAntiAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                - labelSelector:
                    matchExpressions:
                      - key: name
                        operator: In
                        values:
                          - mender-conductor
                  topologyKey: kubernetes.io/hostname
      triggers:
        - type: ConfigChange
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - mender-conductor
            from:
              kind: ImageStreamTag
              namespace: "${TOOLS_WORKSPACE}"
              name: mender-conductor-stream:${IMAGESTREAM_TAG}

  # Mender-Redis 
  ## used by Mender-Conductor
  - apiVersion: v1
    kind: Service
    metadata:
      name: mender-redis
      labels:
        app: mender
        subapp: mender-conductor
    spec:
      ports:
      - port: 6379
        protocol: TCP
      selector:
        service: mender-redis
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        description: "The mender-redis used by Mender-Conductor."
        template.alpha.openshift.io/wait-for-ready: "true" #?
      name: mender-redis
      labels:
        app: mender
        subapp: mender-conductor
    spec:
      replicas: 1
      selector:
        app: mender
        service: mender-redis
      strategy:
        type: Rolling
        rollingParams:
          updatePeriodSeconds: 1
          intervalSeconds: 1
          timeoutSeconds: 240
          maxSurge: 2
          maxUnavailable: 1
        resources: {}
        activeDeadlineSeconds: 3600
      template:
        metadata:
          labels:
            app: mender
            service: mender-redis
            subapp: mender-conductor
        spec:
          containers:
            - name: mender-redis
              image: " "
              command:
                - /redis/entrypoint.sh
              # readinessProbe:
              #   failureThreshold: 3
              #   initialDelaySeconds: 3
              #   periodSeconds: 10
              #   successThreshold: 1
              #   tcpSocket:
              #     port: 6379
              #   timeoutSeconds: 3
              # livenessProbe:
              #   failureThreshold: 3
              #   initialDelaySeconds: 3
              #   periodSeconds: 10
              #   successThreshold: 1
              #   tcpSocket:
              #     port: 6379
              #   timeoutSeconds: 3
              volumeMounts:
                - name: mender-redis-pv-claim
                  mountPath: /var/lib/redis
              terminationMessagePath: "/dev/termination-log"
              terminationMessagePolicy: File
              imagePullPolicy: Always
              resources:
                requests:
                  cpu: 500m
                  memory: 256Mi
                limits:
                  cpu: 1000m
                  memory: 512Mi
          restartPolicy: Always
          terminationGracePeriodSeconds: 30
          dnsPolicy: ClusterFirst
          securityContext: {}
          schedulerName: default-scheduler
          volumes:
            - name: mender-redis-pv-claim
              persistentVolumeClaim:
                claimName: mender-redis-pv-claim
          affinity:
            podAntiAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                - labelSelector:
                    matchExpressions:
                      - key: name
                        operator: In
                        values:
                          - mender-redis
                  topologyKey: kubernetes.io/hostname
      triggers:
        - type: ConfigChange
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - mender-redis
            from:
              kind: ImageStreamTag
              namespace: "${TOOLS_WORKSPACE}"
              name: mender-redis-stream:${IMAGESTREAM_TAG}

  # Mender-Elasticsearch 
  ## used by Mender-Conductor
  - apiVersion: v1
    kind: Service
    metadata:
      name: mender-elasticsearch
      labels:
        app: mender
        subapp: mender-conductor
    spec:
      ports:
      - port: 8080
        protocol: TCP
      selector:
        service: mender-elasticsearch
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        description: "The mender-elasticsearch used by Mender-Conductor."
        template.alpha.openshift.io/wait-for-ready: "true" #?
      name: mender-elasticsearch
      labels:
        app: mender
        subapp: mender-conductor
    spec:
      replicas: 1
      selector:
        app: mender
        service: mender-elasticsearch
      strategy:
        type: Rolling
        rollingParams:
          updatePeriodSeconds: 1
          intervalSeconds: 1
          timeoutSeconds: 120
          maxSurge: 2
          maxUnavailable: 1
        resources: {}
        activeDeadlineSeconds: 3600
      template:
        metadata:
          labels:
            app: mender
            subapp: mender-conductor
            service: mender-elasticsearch
        spec:
          containers:
            - name: mender-elasticsearch
              image: " "
              # readinessProbe:
              #   failureThreshold: 3
              #   initialDelaySeconds: 3
              #   periodSeconds: 10
              #   successThreshold: 1
              #   tcpSocket:
              #     port: 8080
              #   timeoutSeconds: 3
              # livenessProbe:
              #   failureThreshold: 3
              #   initialDelaySeconds: 3
              #   periodSeconds: 10
              #   successThreshold: 1
              #   tcpSocket:
              #     port: 8080
              #   timeoutSeconds: 3
              volumeMounts:
                  - name: mender-elasticsearch-pv-claim
                    mountPath: /usr/share/elasticsearch/data
              terminationMessagePath: "/dev/termination-log"
              terminationMessagePolicy: File
              imagePullPolicy: Always
              resources:
                requests:
                  cpu: 200m
                  memory: 256Mi
                limits:
                  cpu: 500m
                  memory: 512Mi
          restartPolicy: Always
          terminationGracePeriodSeconds: 30
          dnsPolicy: ClusterFirst
          securityContext: {}
          schedulerName: default-scheduler
          volumes:
              - name: mender-elasticsearch-pv-claim
                persistentVolumeClaim:
                  claimName: mender-elasticsearch-pv-claim
          affinity:
            podAntiAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                - labelSelector:
                    matchExpressions:
                      - key: name
                        operator: In
                        values:
                          - mender-elasticsearch
                  topologyKey: kubernetes.io/hostname
      triggers:
        - type: ConfigChange
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - mender-elasticsearch
            from:
              kind: ImageStreamTag
              namespace: "${TOOLS_WORKSPACE}"
              name: mender-elasticsearch-stream:${IMAGESTREAM_TAG}

  # Volume Claims
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        app: mender
        subapp: mender-conductor
      name: mender-redis-pv-claim
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: ${REDIS_VOLUME_CAPACITY}
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        app: mender
        subapp: mender-conductor
      name: mender-elasticsearch-pv-claim
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: ${ELASTICSEARCH_VOLUME_CAPACITY}

parameters:
  - description: The tag for image streams (i.e. dev/prod)
    name: IMAGESTREAM_TAG
    required: true
  - description: The namespace of the image streams
    name: TOOLS_WORKSPACE
    required: true
  - description: Size of PersistentVolumeClaim used to persist mender-redis (example 5Gi, 250Mi, etc).
    name: REDIS_VOLUME_CAPACITY
    required: true
    value: "250Mi"
  - description: Size of PersistentVolumeClaim used to persist mender-elasticsearch (example 5Gi, 250Mi, etc).
    name: ELASTICSEARCH_VOLUME_CAPACITY
    required: true
    value: "250Mi"