kind: Template
apiVersion: v1
labels:
  template: "mender-component-deployment" 
  app: mender
metadata:
  name: mender-component-deployment
objects:

  # mender useradm
  ## allows for user managment and authentication.
  ### https://github.com/mendersoftware/useradm
  - apiVersion: v1
    kind: Service
    metadata:
      name: mender-useradm
      labels:
        app: mender
        subapp: mender-components
    spec:
      ports:
      - port: 8080
        protocol: TCP
      selector:
        service: mender-useradm
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        description: "The user admin service which handles storage and reterival of users"
        template.alpha.openshift.io/wait-for-ready: "true" #?
      name: mender-useradm
      labels:
        app: mender
        subapp: mender-components
    spec:
      replicas: 1
      selector:
        app: mender
        service: mender-useradm
      strategy:
        type: Rolling
        rollingParams:
          updatePeriodSeconds: 1
          intervalSeconds: 1
          timeoutSeconds: 240
          maxSurge: 2
          maxUnavailable: 1
          post:
            execNewPod:
              env:
                - name: USERADM_MONGO
                  value: mender-mongodb
                - name: USERADM_MONGO_USERNAME
                  valueFrom:
                    secretKeyRef:
                      name: mender-mongodb
                      key: database-user
                - name: USERADM_MONGO_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: mender-mongodb
                      key: database-password
                - name: DEFAULT_USER
                  valueFrom:
                    secretKeyRef:
                      name: mender-login-secret
                      key: mender-username
                - name: DEFAULT_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: mender-login-secret
                      key: mender-password

                # this is a hack used in the command below because volumeMounts don't seem work in execNewPod
                - name: USERADM_KEY
                  valueFrom:
                    secretKeyRef:
                      name: mender-useradm-key-secret
                      key: key
              # add default username/password to Mender login: i'm sorry this command is so long
              command: [ "/bin/sh", "-c", "echo $USERADM_KEY > /etc/useradm/rsa/private.pem && /usr/bin/useradm create-user --username=${DEFAULT_USER} --password=${DEFAULT_PASSWORD}"]
              
              # ideally this volumeMount would work but it doesn't seem to :(
              # volumeMounts:
              #   - name: mender-useradm-key-secret-volume
              #     mountPath: "/etc/useradm/rsa/"
              #     readOnly: true
            containerName: useradm-setusernamepass
            failurePolicy: Ignore
        resources: {}
        activeDeadlineSeconds: 3600
      template:
        metadata:
          labels:
            app: mender
            service: mender-useradm
        spec:
          containers:
            - name: mender-useradm
              image: " "
              args:
                - server 
                - --automigrate
              env:
                - name: USERADM_MONGO
                  value: mender-mongodb
                - name: USERADM_MONGO_USERNAME
                  valueFrom:
                    secretKeyRef:
                      name: mender-mongodb
                      key: database-user
                - name: USERADM_MONGO_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: mender-mongodb
                      key: database-password
              readinessProbe:
                failureThreshold: 3
                initialDelaySeconds: 3
                periodSeconds: 10
                successThreshold: 1
                tcpSocket:
                  port: 8080
                timeoutSeconds: 3
              livenessProbe:
                failureThreshold: 3
                initialDelaySeconds: 3
                periodSeconds: 10
                successThreshold: 1
                tcpSocket:
                  port: 8080
                timeoutSeconds: 3
              volumeMounts:
                - name: mender-useradm-key-secret-volume
                  mountPath: "/etc/useradm/rsa/"
                  readOnly: true
              terminationMessagePath: "/dev/termination-log"
              terminationMessagePolicy: File
              imagePullPolicy: Always
              resources:
                requests:
                  cpu: 100m
                  memory: 256Mi
                limits:
                  cpu: 250m
                  memory: 512Mi
          restartPolicy: Always
          terminationGracePeriodSeconds: 30
          dnsPolicy: ClusterFirst
          securityContext: {}
          schedulerName: default-scheduler
          volumes:
            - name: mender-useradm-key-secret-volume
              secret:
                secretName: mender-useradm-key-secret
                items:
                - key: key
                  path: private.pem
          affinity:
            podAntiAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                - labelSelector:
                    matchExpressions:
                      - key: name
                        operator: In
                        values:
                          - mender-useradm
                  topologyKey: kubernetes.io/hostname
      triggers:
        - type: ConfigChange
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - mender-useradm
            from:
              kind: ImageStreamTag
              namespace: "${TOOLS_WORKSPACE}"
              name: mender-useradm-stream:${IMAGESTREAM_TAG}

  # mender deviceauth
  ## responsible for issuing, maintaining, and verifying 
  ## JWT authentication tokens used by devices in Mender API calls
  ### https://github.com/mendersoftware/deviceauth
  - apiVersion: v1
    kind: Service
    metadata:
      name: mender-device-auth
      labels:
        app: mender
        subapp: mender-components
    spec:
      ports:
      - port: 8080
        protocol: TCP
      selector:
        service: mender-device-auth
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        description: "The device auth service which handles authorizing devices."
        template.alpha.openshift.io/wait-for-ready: "true" #?
      name: mender-device-auth
      labels:
        app: mender
        subapp: mender-components
    spec:
      replicas: 1
      selector:
        app: mender
        service: mender-device-auth
      strategy:
        type: Rolling
        rollingParams:
          updatePeriodSeconds: 1
          intervalSeconds: 1
          timeoutSeconds: 240
          maxSurge: 2
          maxUnavailable: 1
        resources: {}
        activeDeadlineSeconds: 3600
      template:
        metadata:
          labels:
            app: mender
            service: mender-device-auth
        spec:
          containers:
            - name: mender-device-auth
              image: " "
              args:
                - server 
                - --automigrate
              env:
                - name: DEVICEAUTH_MONGO
                  value: mender-mongodb
                - name: DEVICEAUTH_MONGO_USERNAME
                  valueFrom:
                    secretKeyRef:
                      name: mender-mongodb
                      key: database-user
                - name: DEVICEAUTH_MONGO_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: mender-mongodb
                      key: database-password
              volumeMounts:
                - name: mender-device-auth-key-secret-volume
                  mountPath: "/etc/deviceauth/rsa/"
                  readOnly: true
              readinessProbe:
                failureThreshold: 3
                initialDelaySeconds: 3
                periodSeconds: 10
                successThreshold: 1
                tcpSocket:
                  port: 8080
                timeoutSeconds: 3
              livenessProbe:
                failureThreshold: 3
                initialDelaySeconds: 3
                periodSeconds: 10
                successThreshold: 1
                tcpSocket:
                  port: 8080
                timeoutSeconds: 3
              terminationMessagePath: "/dev/termination-log"
              terminationMessagePolicy: File
              imagePullPolicy: Always
              resources:
                requests:
                  cpu: 100m
                  memory: 256Mi
                limits:
                  cpu: 250m
                  memory: 512Mi
          restartPolicy: Always
          terminationGracePeriodSeconds: 30
          dnsPolicy: ClusterFirst
          securityContext: {}
          schedulerName: default-scheduler
          volumes:
            - name: mender-device-auth-key-secret-volume
              secret:
                secretName: mender-device-auth-key-secret
                items:
                - key: key
                  path: private.pem
          affinity:
            podAntiAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                - labelSelector:
                    matchExpressions:
                      - key: name
                        operator: In
                        values:
                          - mender-device-auth
                  topologyKey: kubernetes.io/hostname
      triggers:
        - type: ConfigChange
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - mender-device-auth
            from:
              kind: ImageStreamTag
              namespace: "${TOOLS_WORKSPACE}"
              name: mender-device-auth-stream:${IMAGESTREAM_TAG}

  # mender inventory
  ## stores attributes about devices reported by Mender clients, 
  ## and supports searching and sorting of attributes
  ### https://github.com/mendersoftware/inventory
  - apiVersion: v1
    kind: Service
    metadata:
      name: mender-inventory
      labels:
        app: mender
        subapp: mender-components
    spec:
      ports:
      - port: 8080
        protocol: TCP
      selector:
        service: mender-inventory
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        description: "The inventory service which keeps track clients."
        template.alpha.openshift.io/wait-for-ready: "true" #?
      name: mender-inventory
      labels:
        app: mender
        subapp: mender-components
    spec:
      replicas: 1
      selector:
        app: mender
        service: mender-inventory
      strategy:
        type: Rolling
        rollingParams:
          updatePeriodSeconds: 1
          intervalSeconds: 1
          timeoutSeconds: 240
          maxSurge: 2
          maxUnavailable: 1
        resources: {}
        activeDeadlineSeconds: 3600
      template:
        metadata:
          labels:
            app: mender
            service: mender-inventory
        spec:
          containers:
            - name: mender-inventory
              image: " "
              args:
                - server 
                - --automigrate
              env:
                - name: INVENTORY_MONGO
                  value: mender-mongodb
                - name: INVENTORY_MONGO_USERNAME
                  valueFrom:
                    secretKeyRef:
                      name: mender-mongodb
                      key: database-user
                - name: INVENTORY_MONGO_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: mender-mongodb
                      key: database-password
              readinessProbe:
                failureThreshold: 3
                initialDelaySeconds: 3
                periodSeconds: 10
                successThreshold: 1
                tcpSocket:
                  port: 8080
                timeoutSeconds: 3
              livenessProbe:
                failureThreshold: 3
                initialDelaySeconds: 3
                periodSeconds: 10
                successThreshold: 1
                tcpSocket:
                  port: 8080
                timeoutSeconds: 3
              terminationMessagePath: "/dev/termination-log"
              terminationMessagePolicy: File
              imagePullPolicy: Always
              resources:
                requests:
                  cpu: 100m
                  memory: 256Mi
                limits:
                  cpu: 250m
                  memory: 512Mi
          restartPolicy: Always
          terminationGracePeriodSeconds: 30
          dnsPolicy: ClusterFirst
          securityContext: {}
          schedulerName: default-scheduler
          affinity:
            podAntiAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                - labelSelector:
                    matchExpressions:
                      - key: name
                        operator: In
                        values:
                          - mender-inventory
                  topologyKey: kubernetes.io/hostname
      triggers:
        - type: ConfigChange
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - mender-inventory
            from:
              kind: ImageStreamTag
              namespace: "${TOOLS_WORKSPACE}"
              name: mender-inventory-stream:${IMAGESTREAM_TAG}

  # mender deployments
  ## handles connnecting clients to update artifacts
  ### https://github.com/mendersoftware/deployments
  - apiVersion: v1
    kind: Service
    metadata:
      name: mender-deployments
      labels:
        app: mender
        subapp: mender-components
    spec:
      ports:
      - port: 8080
        protocol: TCP
      selector:
        service: mender-deployments
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        description: "The deployments service which handles retreiving update URL for clients"
        template.alpha.openshift.io/wait-for-ready: "true" #?
      name: mender-deployments
      labels:
        app: mender
        subapp: mender-components
    spec:
      replicas: 1
      selector:
        app: mender
        service: mender-deployments
      strategy:
        type: Rolling
        rollingParams:
          updatePeriodSeconds: 1
          intervalSeconds: 1
          timeoutSeconds: 240
          maxSurge: 2
          maxUnavailable: 1
        resources: {}
        activeDeadlineSeconds: 3600
      template:
        metadata:
          labels:
            app: mender
            service: mender-deployments
        spec:
          containers:
            - name: mender-deployments
              image: " "
              args:
                - server
                - --automigrate
              env:
                - name: DEPLOYMENTS_AWS_AUTH_KEY
                  valueFrom:
                    secretKeyRef:
                      key: accesskey
                      name: minio
                - name: DEPLOYMENTS_AWS_AUTH_SECRET
                  valueFrom:
                    secretKeyRef:
                      key: secretkey
                      name: minio
                - name: DEPLOYMENTS_AWS_URI
                  value: https://${MINIO_ROUTE_HOSTNAME}
                - name: DEPLOYMENTS_MONGO_URL
                  value: mender-mongodb
                - name: DEPLOYMENTS_MONGO_USERNAME
                  valueFrom:
                    secretKeyRef:
                      name: mender-mongodb
                      key: database-user
                - name: DEPLOYMENTS_MONGO_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: mender-mongodb
                      key: database-password
              readinessProbe:
                failureThreshold: 3
                initialDelaySeconds: 3
                periodSeconds: 10
                successThreshold: 1
                tcpSocket:
                  port: 8080
                timeoutSeconds: 3
              livenessProbe:
                failureThreshold: 3
                initialDelaySeconds: 3
                periodSeconds: 10
                successThreshold: 1
                tcpSocket:
                  port: 8080
                timeoutSeconds: 3
              terminationMessagePath: "/dev/termination-log"
              terminationMessagePolicy: File
              imagePullPolicy: Always
              resources:
                requests:
                  cpu: 100m
                  memory: 256Mi
                limits:
                  cpu: 250m
                  memory: 512Mi
          restartPolicy: Always
          terminationGracePeriodSeconds: 30
          dnsPolicy: ClusterFirst
          securityContext: {}
          schedulerName: default-scheduler
          affinity:
            podAntiAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                - labelSelector:
                    matchExpressions:
                      - key: name
                        operator: In
                        values:
                          - mender-deployments
                  topologyKey: kubernetes.io/hostname
      triggers:
        - type: ConfigChange
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - mender-deployments
            from:
              kind: ImageStreamTag
              namespace: "${TOOLS_WORKSPACE}"
              name: mender-deployments-stream:${IMAGESTREAM_TAG}
  # Minio Route, needed for communication with Minio
  - apiVersion: v1
    kind: Route
    metadata:
      name: minio-route
      labels:
        app: mender
        subapp: mender-components
    spec:
      host: ${MINIO_ROUTE_HOSTNAME}
      port:
        targetPort: http
      to:
        kind: Service
        name: minio
      tls:
        termination: edge
        insecureEdgeTerminationPolicy: Redirect
   # Secrets
  # mender-useradm RSA key
  - apiVersion: v1
    kind: Secret
    metadata:
      name: mender-useradm-key-secret
      labels:
        app: mender
        subapp: mender-components
      annotations:
        template.openshift.io/base64-expose-key: "{.data['key']}"
    type: Opaque
    stringData:
      key: "${USERADM_KEY}"

  # mender-device-auth RSA key
  - apiVersion: v1
    kind: Secret
    metadata:
      name: mender-device-auth-key-secret
      labels:
        app: mender
        subapp: mender-components
      annotations:
        template.openshift.io/base64-expose-key: "{.data['key']}"
    type: Opaque
    stringData:
      key: "${DEVICEAUTH_KEY}"

  # Mender default login secret
  - apiVersion: v1
    kind: Secret
    metadata:
      name: mender-login-secret
      labels:
        app: mender
        subapp: mender-components
      annotations:
        template.openshift.io/base64-expose-mender-username: "{.data['mender-username']}"
        template.openshift.io/base64-expose-mender-password: "{.data['mender-password']}"
    type: Opaque
    stringData:
      mender-username: "${MENDER_DEFAULT_USERNAME}"
      mender-password: "${MENDER_DEFAULT_PASSWORD}"

parameters:
  - description: The tag for image streams (i.e. dev/prod)
    name: IMAGESTREAM_TAG
    required: true
  - description: The namespace of the image streams
    name: TOOLS_WORKSPACE
    required: true
  - description: The hostname mapped to the Minio storage route.
    name: MINIO_ROUTE_HOSTNAME
    required: true
  - description: The mender-useradm private key.
    name: USERADM_KEY
    required: true
  - description: The mender-device-auth private key.
    name: DEVICEAUTH_KEY
    required: true
  - description: Default password for Mender application (UI login)
    name: MENDER_DEFAULT_PASSWORD
    required: true
    from: '[a-zA-Z0-9]{16}'
    generate: expression
  - description: Default username for Mender application (UI login)
    name: MENDER_DEFAULT_USERNAME
    required: true
