<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="646" onload="init(evt)" viewBox="0 0 1200 646" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="646" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="629.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="629.00"> </text><svg id="frames" x="10" width="1180"><g><title>_bootstrap (threading.py:885) (92 samples, 1.42%)</title><rect x="0.0000%" y="84" width="1.4163%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="94.50"></text></g><g><title>_bootstrap_inner (threading.py:917) (92 samples, 1.42%)</title><rect x="0.0000%" y="100" width="1.4163%" height="15" fill="rgb(217,0,24)"/><text x="0.2500%" y="110.50"></text></g><g><title>run (_pydevd_bundle/pydevd_daemon_thread.py:46) (92 samples, 1.42%)</title><rect x="0.0000%" y="116" width="1.4163%" height="15" fill="rgb(221,193,54)"/><text x="0.2500%" y="126.50"></text></g><g><title>__call__ (_pydev_bundle/pydev_monkey.py:823) (98 samples, 1.51%)</title><rect x="1.7703%" y="100" width="1.5086%" height="15" fill="rgb(248,212,6)"/><text x="2.0203%" y="110.50"></text></g><g><title>_bootstrap (threading.py:885) (98 samples, 1.51%)</title><rect x="1.7703%" y="116" width="1.5086%" height="15" fill="rgb(208,68,35)"/><text x="2.0203%" y="126.50"></text></g><g><title>_bootstrap_inner (threading.py:917) (98 samples, 1.51%)</title><rect x="1.7703%" y="132" width="1.5086%" height="15" fill="rgb(232,128,0)"/><text x="2.0203%" y="142.50"></text></g><g><title>run (_pydevd_bundle/pydevd_daemon_thread.py:46) (98 samples, 1.51%)</title><rect x="1.7703%" y="148" width="1.5086%" height="15" fill="rgb(207,160,47)"/><text x="2.0203%" y="158.50"></text></g><g><title>run (gunicorn/reloader.py:42) (67 samples, 1.03%)</title><rect x="3.2789%" y="164" width="1.0314%" height="15" fill="rgb(228,23,34)"/><text x="3.5289%" y="174.50"></text></g><g><title>run (gunicorn/reloader.py:44) (207 samples, 3.19%)</title><rect x="4.3103%" y="164" width="3.1866%" height="15" fill="rgb(218,30,26)"/><text x="4.5603%" y="174.50">run..</text></g><g><title>__thread_body (eventlet/green/thread.py:42) (291 samples, 4.48%)</title><rect x="3.2789%" y="100" width="4.4797%" height="15" fill="rgb(220,122,19)"/><text x="3.5289%" y="110.50">__thr..</text></g><g><title>_bootstrap (threading.py:885) (291 samples, 4.48%)</title><rect x="3.2789%" y="116" width="4.4797%" height="15" fill="rgb(250,228,42)"/><text x="3.5289%" y="126.50">_boot..</text></g><g><title>wrap_bootstrap_inner (eventlet/green/thread.py:63) (291 samples, 4.48%)</title><rect x="3.2789%" y="132" width="4.4797%" height="15" fill="rgb(240,193,28)"/><text x="3.5289%" y="142.50">wrap_..</text></g><g><title>_bootstrap_inner (threading.py:917) (291 samples, 4.48%)</title><rect x="3.2789%" y="148" width="4.4797%" height="15" fill="rgb(216,20,37)"/><text x="3.5289%" y="158.50">_boot..</text></g><g><title>handle (gunicorn/workers/base_async.py:48) (75 samples, 1.15%)</title><rect x="8.0357%" y="132" width="1.1546%" height="15" fill="rgb(206,188,39)"/><text x="8.2857%" y="142.50"></text></g><g><title>push (flask/ctx.py:390) (74 samples, 1.14%)</title><rect x="10.3756%" y="228" width="1.1392%" height="15" fill="rgb(217,207,13)"/><text x="10.6256%" y="238.50"></text></g><g><title>wsgi_app (flask/app.py:2446) (135 samples, 2.08%)</title><rect x="10.1601%" y="212" width="2.0782%" height="15" fill="rgb(231,73,38)"/><text x="10.4101%" y="222.50">w..</text></g><g><title>full_dispatch_request (flask/app.py:1948) (111 samples, 1.71%)</title><rect x="12.2383%" y="228" width="1.7087%" height="15" fill="rgb(225,20,46)"/><text x="12.4883%" y="238.50"></text></g><g><title>preprocess_request (flask/app.py:2242) (110 samples, 1.69%)</title><rect x="12.2537%" y="244" width="1.6933%" height="15" fill="rgb(210,31,41)"/><text x="12.5037%" y="254.50"></text></g><g><title>_before_request (flask_oidc/__init__.py:407) (109 samples, 1.68%)</title><rect x="12.2691%" y="260" width="1.6780%" height="15" fill="rgb(221,200,47)"/><text x="12.5191%" y="270.50"></text></g><g><title>authenticate_or_redirect (flask_oidc/__init__.py:429) (105 samples, 1.62%)</title><rect x="12.3307%" y="276" width="1.6164%" height="15" fill="rgb(226,26,5)"/><text x="12.5807%" y="286.50"></text></g><g><title>__init__ (httplib2/__init__.py:1273) (1,211 samples, 18.64%)</title><rect x="18.7962%" y="388" width="18.6422%" height="15" fill="rgb(249,33,26)"/><text x="19.0462%" y="398.50">__init__ (httplib2/__init__.p..</text></g><g><title>_build_ssl_context (httplib2/__init__.py:214) (1,196 samples, 18.41%)</title><rect x="19.0271%" y="404" width="18.4113%" height="15" fill="rgb(235,183,28)"/><text x="19.2771%" y="414.50">_build_ssl_context (httplib2/..</text></g><g><title>request (httplib2/__init__.py:1827) (1,230 samples, 18.93%)</title><rect x="18.6884%" y="372" width="18.9347%" height="15" fill="rgb(221,5,38)"/><text x="18.9384%" y="382.50">request (httplib2/__init__.py:..</text></g><g><title>query (dns/resolver.py:1004) (106 samples, 1.63%)</title><rect x="39.2241%" y="516" width="1.6318%" height="15" fill="rgb(247,18,42)"/><text x="39.4741%" y="526.50"></text></g><g><title>query (dns/resolver.py:913) (145 samples, 2.23%)</title><rect x="41.5333%" y="516" width="2.2321%" height="15" fill="rgb(241,131,45)"/><text x="41.7833%" y="526.50">q..</text></g><g><title>step (eventlet/support/greendns.py:340) (298 samples, 4.59%)</title><rect x="39.1933%" y="500" width="4.5874%" height="15" fill="rgb(249,31,29)"/><text x="39.4433%" y="510.50">step ..</text></g><g><title>query (eventlet/support/greendns.py:368) (300 samples, 4.62%)</title><rect x="39.1780%" y="484" width="4.6182%" height="15" fill="rgb(225,111,53)"/><text x="39.4280%" y="494.50">query..</text></g><g><title>resolve (eventlet/support/greendns.py:425) (394 samples, 6.07%)</title><rect x="37.8849%" y="468" width="6.0653%" height="15" fill="rgb(238,160,17)"/><text x="38.1349%" y="478.50">resolve ..</text></g><g><title>_getaddrinfo_lookup (eventlet/support/greendns.py:479) (421 samples, 6.48%)</title><rect x="37.8695%" y="452" width="6.4809%" height="15" fill="rgb(214,148,48)"/><text x="38.1195%" y="462.50">_getaddr..</text></g><g><title>getaddrinfo (eventlet/support/greendns.py:517) (431 samples, 6.63%)</title><rect x="37.8387%" y="436" width="6.6349%" height="15" fill="rgb(232,36,49)"/><text x="38.0887%" y="446.50">getaddrin..</text></g><g><title>connect (httplib2/__init__.py:1305) (451 samples, 6.94%)</title><rect x="37.6847%" y="420" width="6.9427%" height="15" fill="rgb(209,103,24)"/><text x="37.9347%" y="430.50">connect (..</text></g><g><title>connect (eventlet/greenio/base.py:248) (69 samples, 1.06%)</title><rect x="44.8584%" y="436" width="1.0622%" height="15" fill="rgb(229,88,8)"/><text x="45.1084%" y="446.50"></text></g><g><title>socket_connect (eventlet/greenio/base.py:40) (69 samples, 1.06%)</title><rect x="44.8584%" y="452" width="1.0622%" height="15" fill="rgb(213,181,19)"/><text x="45.1084%" y="462.50"></text></g><g><title>connect (httplib2/__init__.py:1324) (82 samples, 1.26%)</title><rect x="44.8584%" y="420" width="1.2623%" height="15" fill="rgb(254,191,54)"/><text x="45.1084%" y="430.50"></text></g><g><title>do_handshake (ssl.py:1117) (108 samples, 1.66%)</title><rect x="46.3208%" y="500" width="1.6626%" height="15" fill="rgb(241,83,37)"/><text x="46.5708%" y="510.50"></text></g><g><title>_call_trampolining (eventlet/green/ssl.py:161) (116 samples, 1.79%)</title><rect x="46.2284%" y="484" width="1.7857%" height="15" fill="rgb(233,36,39)"/><text x="46.4784%" y="494.50">_..</text></g><g><title>__init__ (eventlet/green/ssl.py:139) (144 samples, 2.22%)</title><rect x="46.2284%" y="452" width="2.2167%" height="15" fill="rgb(226,3,54)"/><text x="46.4784%" y="462.50">_..</text></g><g><title>do_handshake (eventlet/green/ssl.py:312) (144 samples, 2.22%)</title><rect x="46.2284%" y="468" width="2.2167%" height="15" fill="rgb(245,192,40)"/><text x="46.4784%" y="478.50">d..</text></g><g><title>connect (httplib2/__init__.py:1326) (167 samples, 2.57%)</title><rect x="46.1207%" y="420" width="2.5708%" height="15" fill="rgb(238,167,29)"/><text x="46.3707%" y="430.50">co..</text></g><g><title>wrap_socket (eventlet/green/ssl.py:448) (165 samples, 2.54%)</title><rect x="46.1515%" y="436" width="2.5400%" height="15" fill="rgb(232,182,51)"/><text x="46.4015%" y="446.50">wr..</text></g><g><title>_conn_request (httplib2/__init__.py:1557) (719 samples, 11.07%)</title><rect x="37.6539%" y="404" width="11.0683%" height="15" fill="rgb(231,60,39)"/><text x="37.9039%" y="414.50">_conn_request (h..</text></g><g><title>getresponse (http/client.py:1321) (90 samples, 1.39%)</title><rect x="49.3073%" y="420" width="1.3855%" height="15" fill="rgb(208,69,12)"/><text x="49.5573%" y="430.50"></text></g><g><title>_conn_request (httplib2/__init__.py:1589) (102 samples, 1.57%)</title><rect x="49.1379%" y="404" width="1.5702%" height="15" fill="rgb(235,93,37)"/><text x="49.3879%" y="414.50"></text></g><g><title>request (httplib2/__init__.py:1994) (866 samples, 13.33%)</title><rect x="37.6385%" y="372" width="13.3313%" height="15" fill="rgb(213,116,39)"/><text x="37.8885%" y="382.50">request (httplib2/__..</text></g><g><title>_request (httplib2/__init__.py:1651) (865 samples, 13.32%)</title><rect x="37.6539%" y="388" width="13.3159%" height="15" fill="rgb(222,207,29)"/><text x="37.9039%" y="398.50">_request (httplib2/_..</text></g><g><title>_get_token_info (flask_oidc/__init__.py:894) (2,373 samples, 36.53%)</title><rect x="14.5166%" y="356" width="36.5302%" height="15" fill="rgb(206,96,30)"/><text x="14.7666%" y="366.50">_get_token_info (flask_oidc/__init__.py:894)</text></g><g><title>_validate_token (flask_oidc/__init__.py:775) (2,382 samples, 36.67%)</title><rect x="14.4550%" y="340" width="36.6687%" height="15" fill="rgb(218,138,4)"/><text x="14.7050%" y="350.50">_validate_token (flask_oidc/__init__.py:775)</text></g><g><title>decorated (flask_oidc/__init__.py:858) (2,387 samples, 36.75%)</title><rect x="14.4550%" y="308" width="36.7457%" height="15" fill="rgb(250,191,14)"/><text x="14.7050%" y="318.50">decorated (flask_oidc/__init__.py:858)</text></g><g><title>validate_token (flask_oidc/__init__.py:758) (2,387 samples, 36.75%)</title><rect x="14.4550%" y="324" width="36.7457%" height="15" fill="rgb(239,60,40)"/><text x="14.7050%" y="334.50">validate_token (flask_oidc/__init__.py:758)</text></g><g><title>__iter__ (sqlalchemy/orm/query.py:3508) (114 samples, 1.75%)</title><rect x="51.8165%" y="356" width="1.7549%" height="15" fill="rgb(206,27,48)"/><text x="52.0665%" y="366.50"></text></g><g><title>_execute_and_instances (sqlalchemy/orm/query.py:3533) (100 samples, 1.54%)</title><rect x="52.0320%" y="372" width="1.5394%" height="15" fill="rgb(225,35,8)"/><text x="52.2820%" y="382.50"></text></g><g><title>execute (sqlalchemy/engine/base.py:1011) (100 samples, 1.54%)</title><rect x="52.0320%" y="388" width="1.5394%" height="15" fill="rgb(250,213,24)"/><text x="52.2820%" y="398.50"></text></g><g><title>_execute_on_connection (sqlalchemy/sql/elements.py:298) (99 samples, 1.52%)</title><rect x="52.0474%" y="404" width="1.5240%" height="15" fill="rgb(247,123,22)"/><text x="52.2974%" y="414.50"></text></g><g><title>all (sqlalchemy/orm/query.py:3346) (137 samples, 2.11%)</title><rect x="51.6318%" y="340" width="2.1090%" height="15" fill="rgb(231,138,38)"/><text x="51.8818%" y="350.50">a..</text></g><g><title>get (api/app/resources/theq/categories.py:31) (161 samples, 2.48%)</title><rect x="51.3701%" y="324" width="2.4784%" height="15" fill="rgb(231,145,46)"/><text x="51.6201%" y="334.50">ge..</text></g><g><title>_compile_context (sqlalchemy/orm/query.py:4058) (120 samples, 1.85%)</title><rect x="55.2802%" y="372" width="1.8473%" height="15" fill="rgb(251,118,11)"/><text x="55.5302%" y="382.50">_..</text></g><g><title>setup_context (sqlalchemy/orm/query.py:4432) (120 samples, 1.85%)</title><rect x="55.2802%" y="388" width="1.8473%" height="15" fill="rgb(217,147,25)"/><text x="55.5302%" y="398.50">s..</text></g><g><title>_setup_entity_query (sqlalchemy/orm/loading.py:326) (119 samples, 1.83%)</title><rect x="55.2956%" y="404" width="1.8319%" height="15" fill="rgb(247,81,37)"/><text x="55.5456%" y="414.50">_..</text></g><g><title>setup (sqlalchemy/orm/interfaces.py:556) (112 samples, 1.72%)</title><rect x="55.4033%" y="420" width="1.7241%" height="15" fill="rgb(209,12,38)"/><text x="55.6533%" y="430.50"></text></g><g><title>setup_query (sqlalchemy/orm/strategies.py:1554) (106 samples, 1.63%)</title><rect x="55.4957%" y="436" width="1.6318%" height="15" fill="rgb(227,1,9)"/><text x="55.7457%" y="446.50"></text></g><g><title>_setup_entity_query (sqlalchemy/orm/loading.py:326) (104 samples, 1.60%)</title><rect x="55.5265%" y="452" width="1.6010%" height="15" fill="rgb(248,47,43)"/><text x="55.7765%" y="462.50"></text></g><g><title>setup (sqlalchemy/orm/interfaces.py:556) (83 samples, 1.28%)</title><rect x="55.8498%" y="468" width="1.2777%" height="15" fill="rgb(221,10,30)"/><text x="56.0998%" y="478.50"></text></g><g><title>__init__ (sqlalchemy/orm/util.py:1042) (113 samples, 1.74%)</title><rect x="57.6663%" y="404" width="1.7395%" height="15" fill="rgb(210,229,1)"/><text x="57.9163%" y="414.50"></text></g><g><title>_create_joins (sqlalchemy/orm/relationships.py:2459) (112 samples, 1.72%)</title><rect x="57.6817%" y="420" width="1.7241%" height="15" fill="rgb(222,148,37)"/><text x="57.9317%" y="430.50"></text></g><g><title>join_targets (sqlalchemy/orm/relationships.py:3458) (100 samples, 1.54%)</title><rect x="57.8664%" y="436" width="1.5394%" height="15" fill="rgb(234,67,33)"/><text x="58.1164%" y="446.50"></text></g><g><title>traverse (sqlalchemy/sql/visitors.py:240) (100 samples, 1.54%)</title><rect x="57.8664%" y="452" width="1.5394%" height="15" fill="rgb(247,98,35)"/><text x="58.1164%" y="462.50"></text></g><g><title>replacement_traverse (sqlalchemy/sql/visitors.py:484) (97 samples, 1.49%)</title><rect x="57.9126%" y="468" width="1.4932%" height="15" fill="rgb(247,138,52)"/><text x="58.1626%" y="478.50"></text></g><g><title>_create_eager_join (sqlalchemy/orm/strategies.py:1846) (142 samples, 2.19%)</title><rect x="57.3584%" y="388" width="2.1860%" height="15" fill="rgb(213,79,30)"/><text x="57.6084%" y="398.50">_..</text></g><g><title>_compile_context (sqlalchemy/orm/query.py:4062) (174 samples, 2.68%)</title><rect x="57.1275%" y="372" width="2.6786%" height="15" fill="rgb(246,177,23)"/><text x="57.3775%" y="382.50">_c..</text></g><g><title>__iter__ (sqlalchemy/orm/query.py:3504) (305 samples, 4.70%)</title><rect x="55.2648%" y="356" width="4.6952%" height="15" fill="rgb(230,62,27)"/><text x="55.5148%" y="366.50">__ite..</text></g><g><title>&lt;listcomp&gt; (sqlalchemy/sql/compiler.py:2140) (139 samples, 2.14%)</title><rect x="60.6219%" y="564" width="2.1398%" height="15" fill="rgb(216,154,8)"/><text x="60.8719%" y="574.50">&lt;..</text></g><g><title>_label_select_column (sqlalchemy/sql/compiler.py:1892) (106 samples, 1.63%)</title><rect x="61.1299%" y="580" width="1.6318%" height="15" fill="rgb(244,35,45)"/><text x="61.3799%" y="590.50"></text></g><g><title>_compiler_dispatch (sqlalchemy/sql/visitors.py:96) (102 samples, 1.57%)</title><rect x="61.1915%" y="596" width="1.5702%" height="15" fill="rgb(251,115,12)"/><text x="61.4415%" y="606.50"></text></g><g><title>visit_select (sqlalchemy/sql/compiler.py:2140) (152 samples, 2.34%)</title><rect x="60.6065%" y="548" width="2.3399%" height="15" fill="rgb(240,54,50)"/><text x="60.8565%" y="558.50">v..</text></g><g><title>_execute_clauseelement (sqlalchemy/engine/base.py:1121) (210 samples, 3.23%)</title><rect x="60.3910%" y="420" width="3.2328%" height="15" fill="rgb(233,84,52)"/><text x="60.6410%" y="430.50">_ex..</text></g><g><title>&lt;lambda&gt; (&lt;string&gt;:1) (210 samples, 3.23%)</title><rect x="60.3910%" y="436" width="3.2328%" height="15" fill="rgb(207,117,47)"/><text x="60.6410%" y="446.50">&lt;la..</text></g><g><title>compile (sqlalchemy/sql/elements.py:481) (210 samples, 3.23%)</title><rect x="60.3910%" y="452" width="3.2328%" height="15" fill="rgb(249,43,39)"/><text x="60.6410%" y="462.50">com..</text></g><g><title>_compiler (sqlalchemy/sql/elements.py:487) (210 samples, 3.23%)</title><rect x="60.3910%" y="468" width="3.2328%" height="15" fill="rgb(209,38,44)"/><text x="60.6410%" y="478.50">_co..</text></g><g><title>__init__ (sqlalchemy/sql/compiler.py:593) (210 samples, 3.23%)</title><rect x="60.3910%" y="484" width="3.2328%" height="15" fill="rgb(236,212,23)"/><text x="60.6410%" y="494.50">__i..</text></g><g><title>__init__ (sqlalchemy/sql/compiler.py:322) (210 samples, 3.23%)</title><rect x="60.3910%" y="500" width="3.2328%" height="15" fill="rgb(242,79,21)"/><text x="60.6410%" y="510.50">__i..</text></g><g><title>process (sqlalchemy/sql/compiler.py:353) (210 samples, 3.23%)</title><rect x="60.3910%" y="516" width="3.2328%" height="15" fill="rgb(211,96,35)"/><text x="60.6410%" y="526.50">pro..</text></g><g><title>_compiler_dispatch (sqlalchemy/sql/visitors.py:96) (210 samples, 3.23%)</title><rect x="60.3910%" y="532" width="3.2328%" height="15" fill="rgb(253,215,40)"/><text x="60.6410%" y="542.50">_co..</text></g><g><title>__iter__ (sqlalchemy/orm/query.py:3508) (295 samples, 4.54%)</title><rect x="59.9600%" y="356" width="4.5413%" height="15" fill="rgb(211,81,21)"/><text x="60.2100%" y="366.50">__ite..</text></g><g><title>_execute_and_instances (sqlalchemy/orm/query.py:3533) (268 samples, 4.13%)</title><rect x="60.3756%" y="372" width="4.1256%" height="15" fill="rgb(208,190,38)"/><text x="60.6256%" y="382.50">_exe..</text></g><g><title>execute (sqlalchemy/engine/base.py:1011) (268 samples, 4.13%)</title><rect x="60.3756%" y="388" width="4.1256%" height="15" fill="rgb(235,213,38)"/><text x="60.6256%" y="398.50">exec..</text></g><g><title>_execute_on_connection (sqlalchemy/sql/elements.py:298) (268 samples, 4.13%)</title><rect x="60.3756%" y="404" width="4.1256%" height="15" fill="rgb(237,122,38)"/><text x="60.6256%" y="414.50">_exe..</text></g><g><title>create_row_processor (sqlalchemy/orm/strategies.py:2001) (84 samples, 1.29%)</title><rect x="64.5936%" y="436" width="1.2931%" height="15" fill="rgb(244,218,35)"/><text x="64.8436%" y="446.50"></text></g><g><title>instances (sqlalchemy/orm/loading.py:60) (92 samples, 1.42%)</title><rect x="64.5012%" y="356" width="1.4163%" height="15" fill="rgb(240,68,47)"/><text x="64.7512%" y="366.50"></text></g><g><title>&lt;listcomp&gt; (sqlalchemy/orm/loading.py:60) (92 samples, 1.42%)</title><rect x="64.5012%" y="372" width="1.4163%" height="15" fill="rgb(210,16,53)"/><text x="64.7512%" y="382.50"></text></g><g><title>row_processor (sqlalchemy/orm/query.py:4403) (92 samples, 1.42%)</title><rect x="64.5012%" y="388" width="1.4163%" height="15" fill="rgb(235,124,12)"/><text x="64.7512%" y="398.50"></text></g><g><title>_instance_processor (sqlalchemy/orm/loading.py:433) (90 samples, 1.39%)</title><rect x="64.5320%" y="404" width="1.3855%" height="15" fill="rgb(224,169,11)"/><text x="64.7820%" y="414.50"></text></g><g><title>create_row_processor (sqlalchemy/orm/interfaces.py:568) (90 samples, 1.39%)</title><rect x="64.5320%" y="420" width="1.3855%" height="15" fill="rgb(250,166,2)"/><text x="64.7820%" y="430.50"></text></g><g><title>all (sqlalchemy/orm/query.py:3346) (784 samples, 12.07%)</title><rect x="55.2494%" y="340" width="12.0690%" height="15" fill="rgb(242,216,29)"/><text x="55.4994%" y="350.50">all (sqlalchemy/or..</text></g><g><title>instances (sqlalchemy/orm/loading.py:80) (88 samples, 1.35%)</title><rect x="65.9637%" y="356" width="1.3547%" height="15" fill="rgb(230,116,27)"/><text x="66.2137%" y="366.50"></text></g><g><title>&lt;listcomp&gt; (sqlalchemy/orm/loading.py:80) (88 samples, 1.35%)</title><rect x="65.9637%" y="372" width="1.3547%" height="15" fill="rgb(228,99,48)"/><text x="66.2137%" y="382.50"></text></g><g><title>_instance (sqlalchemy/orm/loading.py:588) (85 samples, 1.31%)</title><rect x="66.0099%" y="388" width="1.3085%" height="15" fill="rgb(253,11,6)"/><text x="66.2599%" y="398.50"></text></g><g><title>get (api/app/resources/theq/citizen/citizen_list.py:42) (791 samples, 12.18%)</title><rect x="55.2494%" y="324" width="12.1767%" height="15" fill="rgb(247,143,39)"/><text x="55.4994%" y="334.50">get (api/app/resou..</text></g><g><title>InstanceSerializer (&lt;string&gt;:12) (74 samples, 1.14%)</title><rect x="67.4415%" y="420" width="1.1392%" height="15" fill="rgb(236,97,10)"/><text x="67.6915%" y="430.50"></text></g><g><title>_serialize (marshmallow/fields.py:453) (73 samples, 1.12%)</title><rect x="67.4569%" y="436" width="1.1238%" height="15" fill="rgb(233,208,19)"/><text x="67.7069%" y="446.50"></text></g><g><title>dump (marshmallow/schema.py:512) (73 samples, 1.12%)</title><rect x="67.4569%" y="452" width="1.1238%" height="15" fill="rgb(216,164,2)"/><text x="67.7069%" y="462.50"></text></g><g><title>_transform (marshmallow/schema.py:563) (73 samples, 1.12%)</title><rect x="67.4569%" y="468" width="1.1238%" height="15" fill="rgb(220,129,5)"/><text x="67.7069%" y="478.50"></text></g><g><title>marshall (toastedmarshmallow/jit.py:705) (73 samples, 1.12%)</title><rect x="67.4569%" y="484" width="1.1238%" height="15" fill="rgb(242,17,10)"/><text x="67.7069%" y="494.50"></text></g><g><title>&lt;listcomp&gt; (toastedmarshmallow/jit.py:705) (73 samples, 1.12%)</title><rect x="67.4569%" y="500" width="1.1238%" height="15" fill="rgb(242,107,0)"/><text x="67.7069%" y="510.50"></text></g><g><title>__call__ (toastedmarshmallow/jit.py:597) (73 samples, 1.12%)</title><rect x="67.4569%" y="516" width="1.1238%" height="15" fill="rgb(251,28,31)"/><text x="67.7069%" y="526.50"></text></g><g><title>_transform (marshmallow/schema.py:563) (111 samples, 1.71%)</title><rect x="67.4415%" y="356" width="1.7087%" height="15" fill="rgb(233,223,10)"/><text x="67.6915%" y="366.50"></text></g><g><title>marshall (toastedmarshmallow/jit.py:705) (111 samples, 1.71%)</title><rect x="67.4415%" y="372" width="1.7087%" height="15" fill="rgb(215,21,27)"/><text x="67.6915%" y="382.50"></text></g><g><title>&lt;listcomp&gt; (toastedmarshmallow/jit.py:705) (111 samples, 1.71%)</title><rect x="67.4415%" y="388" width="1.7087%" height="15" fill="rgb(232,23,21)"/><text x="67.6915%" y="398.50"></text></g><g><title>__call__ (toastedmarshmallow/jit.py:597) (111 samples, 1.71%)</title><rect x="67.4415%" y="404" width="1.7087%" height="15" fill="rgb(244,5,23)"/><text x="67.6915%" y="414.50"></text></g><g><title>get (api/app/resources/theq/citizen/citizen_list.py:43) (143 samples, 2.20%)</title><rect x="67.4261%" y="324" width="2.2014%" height="15" fill="rgb(226,81,46)"/><text x="67.6761%" y="334.50">g..</text></g><g><title>dump (marshmallow/schema.py:512) (142 samples, 2.19%)</title><rect x="67.4415%" y="340" width="2.1860%" height="15" fill="rgb(247,70,30)"/><text x="67.6915%" y="350.50">d..</text></g><g><title>__iter__ (sqlalchemy/orm/query.py:3508) (86 samples, 1.32%)</title><rect x="70.1663%" y="420" width="1.3239%" height="15" fill="rgb(212,68,19)"/><text x="70.4163%" y="430.50"></text></g><g><title>_execute_and_instances (sqlalchemy/orm/query.py:3533) (69 samples, 1.06%)</title><rect x="70.4280%" y="436" width="1.0622%" height="15" fill="rgb(240,187,13)"/><text x="70.6780%" y="446.50"></text></g><g><title>execute (sqlalchemy/engine/base.py:1011) (69 samples, 1.06%)</title><rect x="70.4280%" y="452" width="1.0622%" height="15" fill="rgb(223,113,26)"/><text x="70.6780%" y="462.50"></text></g><g><title>_execute_on_connection (sqlalchemy/sql/elements.py:298) (69 samples, 1.06%)</title><rect x="70.4280%" y="468" width="1.0622%" height="15" fill="rgb(206,192,2)"/><text x="70.6780%" y="478.50"></text></g><g><title>get (api/app/resources/theq/services.py:143) (125 samples, 1.92%)</title><rect x="69.6583%" y="324" width="1.9243%" height="15" fill="rgb(241,108,4)"/><text x="69.9083%" y="334.50">g..</text></g><g><title>get (sqlalchemy/orm/query.py:1018) (109 samples, 1.68%)</title><rect x="69.9046%" y="340" width="1.6780%" height="15" fill="rgb(247,173,49)"/><text x="70.1546%" y="350.50"></text></g><g><title>_get_impl (sqlalchemy/orm/query.py:1135) (108 samples, 1.66%)</title><rect x="69.9200%" y="356" width="1.6626%" height="15" fill="rgb(224,114,35)"/><text x="70.1700%" y="366.50"></text></g><g><title>load_on_pk_identity (sqlalchemy/orm/loading.py:286) (108 samples, 1.66%)</title><rect x="69.9200%" y="372" width="1.6626%" height="15" fill="rgb(245,159,27)"/><text x="70.1700%" y="382.50"></text></g><g><title>one (sqlalchemy/orm/query.py:3463) (108 samples, 1.66%)</title><rect x="69.9200%" y="388" width="1.6626%" height="15" fill="rgb(245,172,44)"/><text x="70.1700%" y="398.50"></text></g><g><title>one_or_none (sqlalchemy/orm/query.py:3432) (108 samples, 1.66%)</title><rect x="69.9200%" y="404" width="1.6626%" height="15" fill="rgb(236,23,11)"/><text x="70.1700%" y="414.50"></text></g><g><title>get (sqlalchemy/orm/attributes.py:723) (82 samples, 1.26%)</title><rect x="71.5979%" y="356" width="1.2623%" height="15" fill="rgb(205,117,38)"/><text x="71.8479%" y="366.50"></text></g><g><title>_load_for_state (sqlalchemy/orm/strategies.py:760) (82 samples, 1.26%)</title><rect x="71.5979%" y="372" width="1.2623%" height="15" fill="rgb(237,72,25)"/><text x="71.8479%" y="382.50"></text></g><g><title>&lt;lambda&gt; (&lt;string&gt;:1) (81 samples, 1.25%)</title><rect x="71.6133%" y="388" width="1.2469%" height="15" fill="rgb(244,70,9)"/><text x="71.8633%" y="398.50"></text></g><g><title>_emit_lazyload (sqlalchemy/orm/strategies.py:902) (73 samples, 1.12%)</title><rect x="71.7365%" y="404" width="1.1238%" height="15" fill="rgb(217,125,39)"/><text x="71.9865%" y="414.50"></text></g><g><title>all (sqlalchemy/ext/baked.py:545) (73 samples, 1.12%)</title><rect x="71.7365%" y="420" width="1.1238%" height="15" fill="rgb(235,36,10)"/><text x="71.9865%" y="430.50"></text></g><g><title>__get__ (sqlalchemy/orm/attributes.py:287) (85 samples, 1.31%)</title><rect x="71.5979%" y="340" width="1.3085%" height="15" fill="rgb(251,123,47)"/><text x="71.8479%" y="350.50"></text></g><g><title>get (api/app/resources/theq/services.py:144) (112 samples, 1.72%)</title><rect x="71.5825%" y="324" width="1.7241%" height="15" fill="rgb(221,13,13)"/><text x="71.8325%" y="334.50"></text></g><g><title>serialize (marshmallow/marshalling.py:147) (118 samples, 1.82%)</title><rect x="73.5530%" y="404" width="1.8165%" height="15" fill="rgb(238,131,9)"/><text x="73.8030%" y="414.50">s..</text></g><g><title>call_and_store (marshmallow/marshalling.py:68) (107 samples, 1.65%)</title><rect x="73.7223%" y="420" width="1.6472%" height="15" fill="rgb(211,50,8)"/><text x="73.9723%" y="430.50"></text></g><g><title>&lt;lambda&gt; (marshmallow/marshalling.py:141) (107 samples, 1.65%)</title><rect x="73.7223%" y="436" width="1.6472%" height="15" fill="rgb(245,182,24)"/><text x="73.9723%" y="446.50"></text></g><g><title>get (api/app/resources/theq/services.py:146) (137 samples, 2.11%)</title><rect x="73.3067%" y="324" width="2.1090%" height="15" fill="rgb(242,14,37)"/><text x="73.5567%" y="334.50">g..</text></g><g><title>dump (marshmallow/schema.py:512) (137 samples, 2.11%)</title><rect x="73.3067%" y="340" width="2.1090%" height="15" fill="rgb(246,228,12)"/><text x="73.5567%" y="350.50">d..</text></g><g><title>_transform (marshmallow/schema.py:575) (135 samples, 2.08%)</title><rect x="73.3374%" y="356" width="2.0782%" height="15" fill="rgb(213,55,15)"/><text x="73.5874%" y="366.50">_..</text></g><g><title>serialize (marshmallow/marshalling.py:124) (135 samples, 2.08%)</title><rect x="73.3374%" y="372" width="2.0782%" height="15" fill="rgb(209,9,3)"/><text x="73.5874%" y="382.50">s..</text></g><g><title>&lt;listcomp&gt; (marshmallow/marshalling.py:124) (134 samples, 2.06%)</title><rect x="73.3528%" y="388" width="2.0628%" height="15" fill="rgb(230,59,30)"/><text x="73.6028%" y="398.50">&lt;..</text></g><g><title>__iter__ (sqlalchemy/orm/query.py:3508) (80 samples, 1.23%)</title><rect x="76.2469%" y="372" width="1.2315%" height="15" fill="rgb(209,121,21)"/><text x="76.4969%" y="382.50"></text></g><g><title>_execute_and_instances (sqlalchemy/orm/query.py:3533) (69 samples, 1.06%)</title><rect x="76.4163%" y="388" width="1.0622%" height="15" fill="rgb(220,109,13)"/><text x="76.6663%" y="398.50"></text></g><g><title>execute (sqlalchemy/engine/base.py:1011) (69 samples, 1.06%)</title><rect x="76.4163%" y="404" width="1.0622%" height="15" fill="rgb(232,18,1)"/><text x="76.6663%" y="414.50"></text></g><g><title>_execute_on_connection (sqlalchemy/sql/elements.py:298) (68 samples, 1.05%)</title><rect x="76.4317%" y="420" width="1.0468%" height="15" fill="rgb(215,41,42)"/><text x="76.6817%" y="430.50"></text></g><g><title>all (sqlalchemy/orm/query.py:3346) (112 samples, 1.72%)</title><rect x="76.0776%" y="356" width="1.7241%" height="15" fill="rgb(224,123,36)"/><text x="76.3276%" y="366.50"></text></g><g><title>get (api/app/resources/bookings/appointment/appointment_list.py:46) (114 samples, 1.75%)</title><rect x="76.0776%" y="340" width="1.7549%" height="15" fill="rgb(240,125,3)"/><text x="76.3276%" y="350.50"></text></g><g><title>call_and_store (marshmallow/marshalling.py:68) (83 samples, 1.28%)</title><rect x="78.2482%" y="436" width="1.2777%" height="15" fill="rgb(205,98,50)"/><text x="78.4982%" y="446.50"></text></g><g><title>&lt;lambda&gt; (marshmallow/marshalling.py:141) (83 samples, 1.28%)</title><rect x="78.2482%" y="452" width="1.2777%" height="15" fill="rgb(205,185,37)"/><text x="78.4982%" y="462.50"></text></g><g><title>serialize (marshmallow/marshalling.py:147) (95 samples, 1.46%)</title><rect x="78.0942%" y="420" width="1.4624%" height="15" fill="rgb(238,207,15)"/><text x="78.3442%" y="430.50"></text></g><g><title>get (api/app/resources/bookings/appointment/appointment_list.py:48) (115 samples, 1.77%)</title><rect x="77.8325%" y="340" width="1.7703%" height="15" fill="rgb(213,199,42)"/><text x="78.0825%" y="350.50">g..</text></g><g><title>dump (marshmallow/schema.py:512) (112 samples, 1.72%)</title><rect x="77.8787%" y="356" width="1.7241%" height="15" fill="rgb(235,201,11)"/><text x="78.1287%" y="366.50"></text></g><g><title>_transform (marshmallow/schema.py:575) (105 samples, 1.62%)</title><rect x="77.9865%" y="372" width="1.6164%" height="15" fill="rgb(207,46,11)"/><text x="78.2365%" y="382.50"></text></g><g><title>serialize (marshmallow/marshalling.py:124) (105 samples, 1.62%)</title><rect x="77.9865%" y="388" width="1.6164%" height="15" fill="rgb(241,35,35)"/><text x="78.2365%" y="398.50"></text></g><g><title>&lt;listcomp&gt; (marshmallow/marshalling.py:124) (105 samples, 1.62%)</title><rect x="77.9865%" y="404" width="1.6164%" height="15" fill="rgb(243,32,47)"/><text x="78.2365%" y="414.50"></text></g><g><title>get (api/app/resources/theq/channels.py:33) (88 samples, 1.35%)</title><rect x="79.6028%" y="340" width="1.3547%" height="15" fill="rgb(247,202,23)"/><text x="79.8528%" y="350.50"></text></g><g><title>all (sqlalchemy/orm/query.py:3346) (74 samples, 1.14%)</title><rect x="79.8183%" y="356" width="1.1392%" height="15" fill="rgb(219,102,11)"/><text x="80.0683%" y="366.50"></text></g><g><title>dispatch_request (flask_restx/resource.py:44) (4,352 samples, 67.00%)</title><rect x="14.0394%" y="292" width="66.9951%" height="15" fill="rgb(243,110,44)"/><text x="14.2894%" y="302.50">dispatch_request (flask_restx/resource.py:44)</text></g><g><title>decorated (flask_oidc/__init__.py:860) (1,938 samples, 29.83%)</title><rect x="51.2007%" y="308" width="29.8337%" height="15" fill="rgb(222,74,54)"/><text x="51.4507%" y="318.50">decorated (flask_oidc/__init__.py:860)</text></g><g><title>wrapper (api/app/utilities/auth_util.py:48) (362 samples, 5.57%)</title><rect x="75.4618%" y="324" width="5.5727%" height="15" fill="rgb(216,99,12)"/><text x="75.7118%" y="334.50">wrapper..</text></g><g><title>wrapper (flask_restx/api.py:375) (4,358 samples, 67.09%)</title><rect x="13.9932%" y="260" width="67.0874%" height="15" fill="rgb(226,22,26)"/><text x="14.2432%" y="270.50">wrapper (flask_restx/api.py:375)</text></g><g><title>view (flask/views.py:89) (4,358 samples, 67.09%)</title><rect x="13.9932%" y="276" width="67.0874%" height="15" fill="rgb(217,163,10)"/><text x="14.2432%" y="286.50">view (flask/views.py:89)</text></g><g><title>_iterencode_dict (json/encoder.py:405) (73 samples, 1.12%)</title><rect x="89.6244%" y="420" width="1.1238%" height="15" fill="rgb(213,25,53)"/><text x="89.8744%" y="430.50"></text></g><g><title>_iterencode_list (json/encoder.py:325) (96 samples, 1.48%)</title><rect x="89.3011%" y="404" width="1.4778%" height="15" fill="rgb(252,105,26)"/><text x="89.5511%" y="414.50"></text></g><g><title>_iterencode_dict (json/encoder.py:405) (130 samples, 2.00%)</title><rect x="88.8085%" y="388" width="2.0012%" height="15" fill="rgb(220,39,43)"/><text x="89.0585%" y="398.50">_..</text></g><g><title>_iterencode_list (json/encoder.py:325) (389 samples, 5.99%)</title><rect x="85.0677%" y="372" width="5.9883%" height="15" fill="rgb(229,68,48)"/><text x="85.3177%" y="382.50">_iterenc..</text></g><g><title>_iterencode_dict (json/encoder.py:405) (514 samples, 7.91%)</title><rect x="83.1589%" y="356" width="7.9126%" height="15" fill="rgb(252,8,32)"/><text x="83.4089%" y="366.50">_iterencode..</text></g><g><title>encode (json/encoder.py:201) (645 samples, 9.93%)</title><rect x="81.3270%" y="324" width="9.9292%" height="15" fill="rgb(223,20,43)"/><text x="81.5770%" y="334.50">encode (json/e..</text></g><g><title>_iterencode (json/encoder.py:431) (640 samples, 9.85%)</title><rect x="81.4039%" y="340" width="9.8522%" height="15" fill="rgb(229,81,49)"/><text x="81.6539%" y="350.50">_iterencode (j..</text></g><g><title>output_json (flask_restx/representations.py:25) (651 samples, 10.02%)</title><rect x="81.2654%" y="292" width="10.0216%" height="15" fill="rgb(236,28,36)"/><text x="81.5154%" y="302.50">output_json (f..</text></g><g><title>dumps (json/__init__.py:238) (649 samples, 9.99%)</title><rect x="81.2962%" y="308" width="9.9908%" height="15" fill="rgb(249,185,26)"/><text x="81.5462%" y="318.50">dumps (json/__..</text></g><g><title>make_response (flask_restx/api.py:402) (667 samples, 10.27%)</title><rect x="81.2038%" y="276" width="10.2679%" height="15" fill="rgb(249,174,33)"/><text x="81.4538%" y="286.50">make_response (..</text></g><g><title>full_dispatch_request (flask/app.py:1950) (5,037 samples, 77.54%)</title><rect x="13.9470%" y="228" width="77.5400%" height="15" fill="rgb(233,201,37)"/><text x="14.1970%" y="238.50">full_dispatch_request (flask/app.py:1950)</text></g><g><title>dispatch_request (flask/app.py:1936) (5,035 samples, 77.51%)</title><rect x="13.9778%" y="244" width="77.5092%" height="15" fill="rgb(221,78,26)"/><text x="14.2278%" y="254.50">dispatch_request (flask/app.py:1936)</text></g><g><title>wrapper (flask_restx/api.py:379) (676 samples, 10.41%)</title><rect x="81.0807%" y="260" width="10.4064%" height="15" fill="rgb(250,127,30)"/><text x="81.3307%" y="270.50">wrapper (flask_..</text></g><g><title>process_response (flask/app.py:2267) (82 samples, 1.26%)</title><rect x="91.5794%" y="260" width="1.2623%" height="15" fill="rgb(230,49,44)"/><text x="91.8294%" y="270.50"></text></g><g><title>finalize_request (flask/app.py:1970) (125 samples, 1.92%)</title><rect x="91.5179%" y="244" width="1.9243%" height="15" fill="rgb(229,67,23)"/><text x="91.7679%" y="254.50">f..</text></g><g><title>wsgi_app (flask/app.py:2447) (5,276 samples, 81.22%)</title><rect x="12.2383%" y="212" width="81.2192%" height="15" fill="rgb(249,83,47)"/><text x="12.4883%" y="222.50">wsgi_app (flask/app.py:2447)</text></g><g><title>full_dispatch_request (flask/app.py:1953) (127 samples, 1.96%)</title><rect x="91.5025%" y="228" width="1.9550%" height="15" fill="rgb(215,43,3)"/><text x="91.7525%" y="238.50">f..</text></g><g><title>do_teardown_appcontext (flask/app.py:2321) (76 samples, 1.17%)</title><rect x="93.7500%" y="276" width="1.1700%" height="15" fill="rgb(238,154,13)"/><text x="94.0000%" y="286.50"></text></g><g><title>shutdown_session (flask_sqlalchemy/__init__.py:860) (76 samples, 1.17%)</title><rect x="93.7500%" y="292" width="1.1700%" height="15" fill="rgb(219,56,2)"/><text x="94.0000%" y="302.50"></text></g><g><title>remove (sqlalchemy/orm/scoping.py:94) (75 samples, 1.15%)</title><rect x="93.7654%" y="308" width="1.1546%" height="15" fill="rgb(233,0,4)"/><text x="94.0154%" y="318.50"></text></g><g><title>close (sqlalchemy/orm/session.py:1312) (74 samples, 1.14%)</title><rect x="93.7808%" y="324" width="1.1392%" height="15" fill="rgb(235,30,7)"/><text x="94.0308%" y="334.50"></text></g><g><title>pop (flask/ctx.py:238) (78 samples, 1.20%)</title><rect x="93.7500%" y="260" width="1.2007%" height="15" fill="rgb(250,79,13)"/><text x="94.0000%" y="270.50"></text></g><g><title>handle_request (gunicorn/workers/base_async.py:106) (5,569 samples, 85.73%)</title><rect x="9.2826%" y="148" width="85.7297%" height="15" fill="rgb(211,146,34)"/><text x="9.5326%" y="158.50">handle_request (gunicorn/workers/base_async.py:106)</text></g><g><title>__call__ (flask/app.py:2464) (5,568 samples, 85.71%)</title><rect x="9.2980%" y="164" width="85.7143%" height="15" fill="rgb(228,22,38)"/><text x="9.5480%" y="174.50">__call__ (flask/app.py:2464)</text></g><g><title>__call__ (flask_socketio/__init__.py:46) (5,568 samples, 85.71%)</title><rect x="9.2980%" y="180" width="85.7143%" height="15" fill="rgb(235,168,5)"/><text x="9.5480%" y="190.50">__call__ (flask_socketio/__init__.py:46)</text></g><g><title>__call__ (engineio/middleware.py:74) (5,526 samples, 85.07%)</title><rect x="9.9446%" y="196" width="85.0677%" height="15" fill="rgb(221,155,16)"/><text x="10.1946%" y="206.50">__call__ (engineio/middleware.py:74)</text></g><g><title>wsgi_app (flask/app.py:2458) (93 samples, 1.43%)</title><rect x="93.5807%" y="212" width="1.4317%" height="15" fill="rgb(215,215,53)"/><text x="93.8307%" y="222.50"></text></g><g><title>auto_pop (flask/ctx.py:452) (92 samples, 1.42%)</title><rect x="93.5961%" y="228" width="1.4163%" height="15" fill="rgb(223,4,10)"/><text x="93.8461%" y="238.50"></text></g><g><title>pop (flask/ctx.py:438) (82 samples, 1.26%)</title><rect x="93.7500%" y="244" width="1.2623%" height="15" fill="rgb(234,103,6)"/><text x="94.0000%" y="254.50"></text></g><g><title>handle_request (gunicorn/workers/base_async.py:117) (93 samples, 1.43%)</title><rect x="95.9514%" y="148" width="1.4317%" height="15" fill="rgb(227,97,0)"/><text x="96.2014%" y="158.50"></text></g><g><title>handle (logging/__init__.py:905) (68 samples, 1.05%)</title><rect x="97.6447%" y="276" width="1.0468%" height="15" fill="rgb(234,150,53)"/><text x="97.8947%" y="286.50"></text></g><g><title>handle_request (gunicorn/workers/base_async.py:143) (84 samples, 1.29%)</title><rect x="97.4138%" y="148" width="1.2931%" height="15" fill="rgb(228,201,54)"/><text x="97.6638%" y="158.50"></text></g><g><title>&lt;lambda&gt; (gunicorn/config.py:488) (84 samples, 1.29%)</title><rect x="97.4138%" y="164" width="1.2931%" height="15" fill="rgb(222,22,37)"/><text x="97.6638%" y="174.50"></text></g><g><title>post_request (api/gunicorn_config.py:43) (83 samples, 1.28%)</title><rect x="97.4292%" y="180" width="1.2777%" height="15" fill="rgb(237,53,32)"/><text x="97.6792%" y="190.50"></text></g><g><title>info (logging/__init__.py:1994) (82 samples, 1.26%)</title><rect x="97.4446%" y="196" width="1.2623%" height="15" fill="rgb(233,25,53)"/><text x="97.6946%" y="206.50"></text></g><g><title>info (logging/__init__.py:1383) (80 samples, 1.23%)</title><rect x="97.4754%" y="212" width="1.2315%" height="15" fill="rgb(210,40,34)"/><text x="97.7254%" y="222.50"></text></g><g><title>_log (logging/__init__.py:1519) (75 samples, 1.15%)</title><rect x="97.5523%" y="228" width="1.1546%" height="15" fill="rgb(241,220,44)"/><text x="97.8023%" y="238.50"></text></g><g><title>handle (logging/__init__.py:1529) (74 samples, 1.14%)</title><rect x="97.5677%" y="244" width="1.1392%" height="15" fill="rgb(235,28,35)"/><text x="97.8177%" y="254.50"></text></g><g><title>callHandlers (logging/__init__.py:1591) (73 samples, 1.12%)</title><rect x="97.5831%" y="260" width="1.1238%" height="15" fill="rgb(210,56,17)"/><text x="97.8331%" y="270.50"></text></g><g><title>main (eventlet/greenthread.py:221) (5,946 samples, 91.53%)</title><rect x="7.7740%" y="100" width="91.5333%" height="15" fill="rgb(224,130,29)"/><text x="8.0240%" y="110.50">main (eventlet/greenthread.py:221)</text></g><g><title>handle (gunicorn/workers/geventlet.py:115) (5,940 samples, 91.44%)</title><rect x="7.8664%" y="116" width="91.4409%" height="15" fill="rgb(235,212,8)"/><text x="8.1164%" y="126.50">handle (gunicorn/workers/geventlet.py:115)</text></g><g><title>handle (gunicorn/workers/base_async.py:55) (5,854 samples, 90.12%)</title><rect x="9.1903%" y="132" width="90.1170%" height="15" fill="rgb(223,33,50)"/><text x="9.4403%" y="142.50">handle (gunicorn/workers/base_async.py:55)</text></g><g><title>all (6,496 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(219,149,13)"/><text x="0.2500%" y="46.50"></text></g><g><title>process 37055:&quot;/Users/adamcoard/dev/queue-management/queue-env/bin/python3 /Users/adamcoard/.vscode-insiders/extensions/ms-python.python-2020.9.114305/pythonFiles/lib/python/debugpy/launcher 53180 -- /Users/adamcoard/dev/queue-management/queue-env/bin/gunicorn wsgi --bind=0.0.0.0:5000 --access-logfile=- --config=/Users/adamcoard/dev/queue-management/api/gunicorn_config.py --timeout=9999 --reload&quot; (6,496 samples, 100.00%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(250,156,29)"/><text x="0.2500%" y="62.50">process 37055:&quot;/Users/adamcoard/dev/queue-management/queue-env/bin/python3 /Users/adamcoard/.vscode-insiders/extensions/ms-python.python-2020.9.114305/pythonFiles/lib/..</text></g><g><title>process 37059:&quot;/Users/adamcoard/dev/queue-management/queue-env/bin/python3 /Users/adamcoard/.vscode-insiders/extensions/ms-python.python-2020.9.114305/pythonFiles/lib/python/debugpy --connect 127.0.0.1:53179 --configure-qt auto --adapter-access-token 249d240820531c7f4058e0676330c27a1931888487c469389d89612799cabbb6 /Users/adamcoard/dev/queue-management/queue-env/bin/gunicorn wsgi --bind=0.0.0.0:5000 --access-logfile=- --config=/Users/adamcoard/dev/queue-management/api/gunicorn_config.py --timeout=9999 --reload&quot; (6,496 samples, 100.00%)</title><rect x="0.0000%" y="68" width="100.0000%" height="15" fill="rgb(216,193,19)"/><text x="0.2500%" y="78.50">process 37059:&quot;/Users/adamcoard/dev/queue-management/queue-env/bin/python3 /Users/adamcoard/.vscode-insiders/extensions/ms-python.python-2020.9.114305/pythonFiles/lib/..</text></g><g><title>process 43069:&quot;/Users/adamcoard/dev/queue-management/queue-env/bin/python3 /Users/adamcoard/.vscode-insiders/extensions/ms-python.python-2020.9.114305/pythonFiles/lib/python/debugpy --connect 127.0.0.1:53179 --configure-qt auto --adapter-access-token 249d240820531c7f4058e0676330c27a1931888487c469389d89612799cabbb6 /Users/adamcoard/dev/queue-management/queue-env/bin/gunicorn wsgi --bind=0.0.0.0:5000 --access-logfile=- --config=/Users/adamcoard/dev/queue-management/api/gunicorn_config.py --timeout=9999 --reload&quot; (6,381 samples, 98.23%)</title><rect x="1.7703%" y="84" width="98.2297%" height="15" fill="rgb(216,135,14)"/><text x="2.0203%" y="94.50">process 43069:&quot;/Users/adamcoard/dev/queue-management/queue-env/bin/python3 /Users/adamcoard/.vscode-insiders/extensions/ms-python.python-2020.9.114305/pythonFiles/l..</text></g></svg></svg>