name: Pull Request Deploy New 2
on:
  workflow_dispatch:
    inputs:
      pr-number:
        description: "Pull Request Number:"
        type: string
        required: true
      namespace:
        description: "Deploy To:"
        type: choice
        required: true
        options:
        - The Q Dev
        - QMS Dev
        - The Q Test

jobs:

  ##### SETUP ######################################################################################

  parse-inputs:
    name: refs/pull/${{ github.event.inputs.pr-number }}/head to ${{ github.event.inputs.namespace }}
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.parse.outputs.environment }}
      image-tag: ${{ steps.parse.outputs.image-tag }}
      push-qms: ${{ steps.parse.outputs.push-qms }}
      push-theq: ${{ steps.parse.outputs.push-theq }}

    steps:
    # Use the "namespace" input value to figure out which "-tools" namespace to push the images.
    - name: Parse Namespace
      id: parse
      run: |
        ENVIRONMENT=$(echo ${{ github.event.inputs.namespace }} | awk -F' ' '{print $NF}' | tr '[:upper:]' '[:lower:]')
        echo ENVIRONMENT:$ENVIRONMENT
        echo "::set-output name=environment::$ENVIRONMENT"

        IMAGE_TAG=pr${{ github.event.inputs.pr-number }}
        echo IMAGE_TAG:$IMAGE_TAG
        echo "::set-output name=image-tag::$IMAGE_TAG"

        PUSH_QMS=$(if [[ "${{ github.event.inputs.namespace }}" == QMS* ]]; then echo true; else echo false; fi)
        echo PUSH_QMS:$PUSH_QMS
        echo "::set-output name=push-qms::$PUSH_QMS"

        PUSH_THEQ=$(if [[ "${{ github.event.inputs.namespace }}" == The\ Q* ]]; then echo true; else echo false; fi)
        echo PUSH_THEQ:$PUSH_THEQ
        echo "::set-output name=push-theq::$PUSH_THEQ"

  ##### BUILD ######################################################################################

  appointment-frontend:
    name: appointment-frontend
    needs: parse-inputs
    uses: walter-moar/queue-management/.github/workflows/reusable-build-dockerfile.yaml@master
    secrets:
      artifactory-password: ${{ secrets.ARTIFACTORY_PASSWORD }}
      artifactory-registry: ${{ secrets.ARTIFACTORY_REGISTRY }}
      artifactory-username: ${{ secrets.ARTIFACTORY_USERNAME }}
      namespace-theq: ${{ secrets.NAMESPACE_THEQ }}
      namespace-theq-password: ${{ secrets.NAMESPACE_THEQ_PASSWORD }}
      namespace-theq-username: ${{ secrets.NAMESPACE_THEQ_USERNAME }}
      namespace-qms: ${{ secrets.NAMESPACE_QMS }}
      namespace-qms-password: ${{ secrets.NAMESPACE_QMS_PASSWORD }}
      namespace-qms-username: ${{ secrets.NAMESPACE_QMS_USERNAME }}
      openshift-registry: ${{ secrets.OPENSHIFT_REGISTRY }}
    with:
      ref: refs/pull/${{ github.event.inputs.pr-number }}/head
      directory: appointment-frontend
      image-name: appointment-frontend
      image-tags: ${{ needs.parse-inputs.outputs.image-tag }}
      push-qms: ${{ needs.parse-inputs.outputs.push-qms == 'true' }}
      push-theq: ${{ needs.parse-inputs.outputs.push-theq == 'true' }}

  feedback-api:
    name: feedback-api
    needs: parse-inputs
    uses: walter-moar/queue-management/.github/workflows/reusable-build-s2i.yaml@master
    secrets:
      namespace-theq: ${{ secrets.NAMESPACE_THEQ }}
      namespace-theq-password: ${{ secrets.NAMESPACE_THEQ_PASSWORD }}
      namespace-theq-username: ${{ secrets.NAMESPACE_THEQ_USERNAME }}
      namespace-qms: ${{ secrets.NAMESPACE_QMS }}
      namespace-qms-password: ${{ secrets.NAMESPACE_QMS_PASSWORD }}
      namespace-qms-username: ${{ secrets.NAMESPACE_QMS_USERNAME }}
      openshift-registry: ${{ secrets.OPENSHIFT_REGISTRY }}
    with:
      ref: refs/pull/${{ github.event.inputs.pr-number }}/head
      directory: feedback-api
      image-name: feedback-api
      image-tags: ${{ needs.parse-inputs.outputs.image-tag }}
      push-qms: ${{ needs.parse-inputs.outputs.push-qms == 'true' }}
      push-theq: ${{ needs.parse-inputs.outputs.push-theq == 'true' }}

  notifications-api:
    name: notifications-api
    needs: parse-inputs
    uses: walter-moar/queue-management/.github/workflows/reusable-build-s2i.yaml@master
    secrets:
      namespace-theq: ${{ secrets.NAMESPACE_THEQ }}
      namespace-theq-password: ${{ secrets.NAMESPACE_THEQ_PASSWORD }}
      namespace-theq-username: ${{ secrets.NAMESPACE_THEQ_USERNAME }}
      namespace-qms: ${{ secrets.NAMESPACE_QMS }}
      namespace-qms-password: ${{ secrets.NAMESPACE_QMS_PASSWORD }}
      namespace-qms-username: ${{ secrets.NAMESPACE_QMS_USERNAME }}
      openshift-registry: ${{ secrets.OPENSHIFT_REGISTRY }}
    with:
      ref: refs/pull/${{ github.event.inputs.pr-number }}/head
      directory: notifications-api
      image-name: notifications-api
      image-tags: ${{ needs.parse-inputs.outputs.image-tag }}
      push-qms: ${{ needs.parse-inputs.outputs.push-qms == 'true' }}
      push-theq: ${{ needs.parse-inputs.outputs.push-theq == 'true' }}

  queue-management-api:
    name: queue-management-api
    needs: parse-inputs
    uses: walter-moar/queue-management/.github/workflows/reusable-build-s2i.yaml@master
    secrets:
      artifactory-password: ${{ secrets.ARTIFACTORY_PASSWORD }}
      artifactory-registry: ${{ secrets.ARTIFACTORY_REGISTRY }}
      artifactory-username: ${{ secrets.ARTIFACTORY_USERNAME }}
      namespace-theq: ${{ secrets.NAMESPACE_THEQ }}
      namespace-theq-password: ${{ secrets.NAMESPACE_THEQ_PASSWORD }}
      namespace-theq-username: ${{ secrets.NAMESPACE_THEQ_USERNAME }}
      namespace-qms: ${{ secrets.NAMESPACE_QMS }}
      namespace-qms-password: ${{ secrets.NAMESPACE_QMS_PASSWORD }}
      namespace-qms-username: ${{ secrets.NAMESPACE_QMS_USERNAME }}
      openshift-registry: ${{ secrets.OPENSHIFT_REGISTRY }}
    with:
      ref: refs/pull/${{ github.event.inputs.pr-number }}/head
      directory: api
      image-name: queue-management-api
      image-tags: ${{ needs.parse-inputs.outputs.image-tag }}
      push-qms: ${{ needs.parse-inputs.outputs.push-qms == 'true' }}
      push-theq: ${{ needs.parse-inputs.outputs.push-theq == 'true' }}

  queue-management-frontend:
    name: queue-management-frontend
    needs: parse-inputs
    uses: walter-moar/queue-management/.github/workflows/reusable-build-dockerfile.yaml@master
    secrets:
      artifactory-password: ${{ secrets.ARTIFACTORY_PASSWORD }}
      artifactory-registry: ${{ secrets.ARTIFACTORY_REGISTRY }}
      artifactory-username: ${{ secrets.ARTIFACTORY_USERNAME }}
      namespace-theq: ${{ secrets.NAMESPACE_THEQ }}
      namespace-theq-password: ${{ secrets.NAMESPACE_THEQ_PASSWORD }}
      namespace-theq-username: ${{ secrets.NAMESPACE_THEQ_USERNAME }}
      namespace-qms: ${{ secrets.NAMESPACE_QMS }}
      namespace-qms-password: ${{ secrets.NAMESPACE_QMS_PASSWORD }}
      namespace-qms-username: ${{ secrets.NAMESPACE_QMS_USERNAME }}
      openshift-registry: ${{ secrets.OPENSHIFT_REGISTRY }}
    with:
      ref: refs/pull/${{ github.event.inputs.pr-number }}/head
      directory: frontend
      image-name: queue-management-frontend
      image-tags: ${{ needs.parse-inputs.outputs.image-tag }}
      push-qms: ${{ needs.parse-inputs.outputs.push-qms == 'true' }}
      push-theq: ${{ needs.parse-inputs.outputs.push-theq == 'true' }}

  send-appointment-reminder-crond:
    name: send-appointment-reminder-crond
    needs: parse-inputs
    uses: walter-moar/queue-management/.github/workflows/reusable-build-dockerfile.yaml@master
    secrets:
      artifactory-password: ${{ secrets.ARTIFACTORY_PASSWORD }}
      artifactory-registry: ${{ secrets.ARTIFACTORY_REGISTRY }}
      artifactory-username: ${{ secrets.ARTIFACTORY_USERNAME }}
      namespace-theq: ${{ secrets.NAMESPACE_THEQ }}
      namespace-theq-password: ${{ secrets.NAMESPACE_THEQ_PASSWORD }}
      namespace-theq-username: ${{ secrets.NAMESPACE_THEQ_USERNAME }}
      namespace-qms: ${{ secrets.NAMESPACE_QMS }}
      namespace-qms-password: ${{ secrets.NAMESPACE_QMS_PASSWORD }}
      namespace-qms-username: ${{ secrets.NAMESPACE_QMS_USERNAME }}
      openshift-registry: ${{ secrets.OPENSHIFT_REGISTRY }}
    with:
      ref: refs/pull/${{ github.event.inputs.pr-number }}/head
      directory: jobs/appointment_reminder
      image-name: send-appointment-reminder-crond
      image-tags: ${{ needs.parse-inputs.outputs.image-tag }}
      push-qms: ${{ needs.parse-inputs.outputs.push-qms == 'true' }}
      push-theq: ${{ needs.parse-inputs.outputs.push-theq == 'true' }}

  ##### DEPLOY ####################################################################################

  tag:
    name: Tag
    needs: [parse-inputs, appointment-frontend, feedback-api, notifications-api, queue-management-api, queue-management-frontend, send-appointment-reminder-crond]
    uses: walter-moar/queue-management/.github/workflows/reusable-tag-image.yaml@master
    secrets:
      namespace: ${{ needs.parse-inputs.outputs.deploy-theq == 'true' && secrets.NAMESPACE_THEQ || secrets.NAMESPACE_QMS }}
      openshift-api: ${{ secrets.OPENSHIFT_API }}
      openshift-token: ${{ needs.parse-inputs.outputs.deploy-theq == 'true' && secrets.NAMESPACE_THEQ_PASSWORD || secrets.NAMESPACE_QMS_PASSWORD }}
    with:
      image-names: appointment-frontend feedback-api notifications-api queue-management-api queue-management-frontend send-appointment-reminder-crond
      tag-from: ${{ needs.parse-inputs.outputs.image-tag }}
      tag-to: ${{ needs.parse-inputs.outputs.environment }}

  wait-for-rollout:
    name: Wait for Image Rollout
    needs: tag
    environment: ${{ github.event.inputs.namespace }}
    runs-on: ubuntu-latest

    steps:
      - name: Rollout Confirmed
        run: echo Confirmed

  ##### TEST ######################################################################################

  # Only run Newman for The Q dev - other environments will fail due to the data.
  newman-theq-dev:
    name: Newman Tests
    if: github.event.inputs.namespace == 'The Q Dev'
    needs: [parse-inputs, wait-for-rollout]
    runs-on: ubuntu-latest

    steps:
    - name: Check out
      uses: actions/checkout@v2

    - name: NPM Install
      run: |
        cd api/postman
        npm install newman

    - name: Run Newman Tests
      run: |
        cd api/postman
        node_modules/newman/bin/newman.js run API_Test_TheQ_Booking.json \
          -e postman_env.json \
          --delay-request 250 \
          --global-var 'auth_url=${{ secrets.POSTMAN_AUTH_URL_DEV }}' \
          --global-var 'clientid=${{ secrets.POSTMAN_CLIENTID_DEV }}' \
          --global-var 'client_secret=${{ secrets.POSTMAN_CLIENT_SECRET_DEV }}' \
          --global-var 'password=${{ secrets.POSTMAN_PASSWORD }}' \
          --global-var 'password_nonqtxn=${{ secrets.POSTMAN_PASSWORD_NONQTXN }}' \
          --global-var 'public_url=${{ secrets.POSTMAN_PUBLIC_API_URL_THEQ_DEV }}' \
          --global-var 'public_user_id=${{ secrets.POSTMAN_PUBLIC_USERID }}' \
          --global-var 'public_user_password=${{ secrets.POSTMAN_PASSWORD_PUBLIC_USER }}' \
          --global-var 'realm=${{ secrets.POSTMAN_REALM }}' \
          --global-var 'url=${{ secrets.POSTMAN_API_URL_THEQ_DEV }}' \
          --global-var 'userid=${{ secrets.POSTMAN_USERID }}' \
          --global-var 'userid_nonqtxn=${{ secrets.POSTMAN_USERID_NONQTXN }}'

  owasp-staff:
    name: OWASP ZAP Scan
    needs: [parse-inputs, wait-for-rollout]
    runs-on: ubuntu-latest

    steps:
      - name: Get Parameters
        run: |
          if [ needs.parse-inputs.outputs.deploy-qms == "true" ]; then
            echo "ZAP_URL=${{ secrets.ZAP_STAFFURL_QMS_DEV }}" >> $GITHUB_ENV
          else if [ needs.parse-inputs.outputs.environment == "dev" ]; then
            echo "ZAP_URL=${{ secrets.ZAP_STAFFURL_THEQ_DEV }}" >> $GITHUB_ENV
          else
            echo "ZAP_URL=${{ secrets.ZAP_STAFFURL_THEQ_TEST }}" >> $GITHUB_ENV
          fi

      - name: OWASP ZAP Scan
        uses: zaproxy/action-full-scan@v0.3.0
        with:
          allow_issue_writing: false
          target: ${{ env.ZAP_URL }}

      - name: Upload Report as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: OWASP ZAP - Staff Front End Report
          path: report_html.html

  owasp-appointment:
    name: OWASP ZAP Scan of Appointments
    needs: [parse-inputs, wait-for-rollout]
    runs-on: ubuntu-latest

    steps:
      - name: Get Parameters
        run: |
          if [ needs.parse-inputs.outputs.deploy-qms == "true" ]; then
            echo "ZAP_URL=${{ secrets.ZAP_APPTMNTURL_QMS_DEV }}" >> $GITHUB_ENV
          else if [ needs.parse-inputs.outputs.environment == "dev" ]; then
            echo "ZAP_URL=${{ secrets.ZAP_APPTMNTURL_THEQ_DEV }}" >> $GITHUB_ENV
          else
            echo "ZAP_URL=${{ secrets.ZAP_APPTMNTURL_THEQ_TEST }}" >> $GITHUB_ENV
          fi

      - name: OWASP ZAP Scan
        uses: zaproxy/action-full-scan@v0.3.0
        with:
          allow_issue_writing: false
          target: ${{ env.ZAP_URL }}

      - name: Upload Report as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: OWASP ZAP - Staff Front End Report
          path: report_html.html
