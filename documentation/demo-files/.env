###############################  Misc Variables ###############################
CFMS_DEV_URL=http://localhost:8080
#POSTMAN_OPERATOR_PASSWORD=xxxx          # <needed for Postman and Jest tests>
THEQ_CLEAR_COMMENTS_FLAG=True            # Clears comments, for privacy, on service left or complete
VIDEO_PATH=/opt/app-root/src/videos      # Where digital signage videos are stored
PROFILER=0                               # Turns on and off SqlAlchemy profiling, for performance tuning

# BACK_OFFICE_DISPLAY determines what services displayed when Back Office clicked
# - BackOffice = only back office services displayed (where display_dashboard_ind = 0)
# - All        = both front office and back office services will be displayed
BACK_OFFICE_DISPLAY="BackOffice"

# RECURRING_FEATURE_FLAG determines whether or not the recurring events feature is visible to users
# - On = recurring events is visible to users
# - Off = recurring events is NOT visible to users
RECURRING_FEATURE_FLAG="On"

###############################  Logging Variables ############################

##  To turn off all python print("==> Debug message") output, set false
PRINT_ENABLE=False

#  NOTE:  The two most common scenarios will likely be:
#  (1) Set LOG_BASIC=DEFAULT, to leave everything in it's default state
#  (2) Set LOG_BASIC=<Level>, to set all loggers to the same level of <Level>
#  --> After this is done, set individual logging levels as you want them
LOG_BASIC=DEFAULT
# LOG_BASIC=WARNING

#  Sets the level of the root, parent, logger
LOG_ROOT=INFO

#  NOTE: To set the level of any logger below, take the following steps:
#  (1) Convert to upper case
#  (2) Change periods to underscores, and add a LOG_ prefix
#  (3) Set the level to a Python logging level
#  Examples::  LOG_CELERY_UTILS_DISPATCH=DEBUG
#              LOG_FLASK_CORS_CORE=WARNING
#  NOTE:  All loggers the system currently uses and is aware of are listed below.
#
# amqp
# asyncio
# celery
# celery.app
# celery.app.base
# celery.app.builtins
# celery.task
# celery.utils
# celery.utils.dispatch
# celery.utils.dispatch.signal
# celery.worker
# concurrent
# concurrent.futures
# contracts
# engineio
# engineio.client
# engineio.server
# flask_caching
# flask_cors
# flask_cors.core
# flask_cors.decorator
# flask_cors.extension
# flask_oidc
# flask_restplus
# flask_restplus.api
# flask_restplus.mask
# flask-admin
# flask-admin.sqla
# gunicorn
# gunicorn.access
# gunicorn.error
# gunicorn.http
# gunicorn.http.wsgi
# kombu
# kombu.common
# kombu.connection
# kombu.utils
# kombu.utils.url
# oauth2client
# oauth2client._helpers
# oauth2client.client
# oauth2client.crypt
# oauth2client.transport
# past
# past.translation
# pyasn1
# requests
# rsa
# rsa.key
# snowplow_tracker
# snowplow_tracker.emitters
# socketio
# socketio.client
# socketio.server
# sqlalchemy
# sqlalchemy.dialects
# sqlalchemy.dialects.mysql
# sqlalchemy.dialects.mysql.base
# sqlalchemy.dialects.mysql.base.MySQLDialect
# sqlalchemy.dialects.mysql.reflection
# sqlalchemy.dialects.mysql.reflection.MySQLTableDefinitionParser
# sqlalchemy.dialects.postgresql
# sqlalchemy.engine
# sqlalchemy.engine.base
# sqlalchemy.engine.base.Engine
# sqlalchemy.ext
# sqlalchemy.ext.baked
# sqlalchemy.orm
# sqlalchemy.orm.dynamic
# sqlalchemy.orm.dynamic.DynaLoader
# sqlalchemy.orm.mapper
# sqlalchemy.orm.mapper.Mapper
# sqlalchemy.orm.path_registry
# sqlalchemy.orm.properties
# sqlalchemy.orm.properties.ColumnProperty
# sqlalchemy.orm.query
# sqlalchemy.orm.query.Query
# sqlalchemy.orm.relationships
# sqlalchemy.orm.relationships.RelationshipProperty
# sqlalchemy.orm.strategies
# sqlalchemy.orm.strategies.ColumnLoader
# sqlalchemy.orm.strategies.DeferredColumnLoader
# sqlalchemy.orm.strategies.DoNothingLoader
# sqlalchemy.orm.strategies.ExpressionColumnLoader
# sqlalchemy.orm.strategies.JoinedLoader
# sqlalchemy.orm.strategies.LazyLoader
# sqlalchemy.orm.strategies.NoLoader
# sqlalchemy.orm.strategies.SelectInLoader
# sqlalchemy.orm.strategies.SubqueryLoader
# sqlalchemy.pool
# sqlalchemy.pool.impl
# sqlalchemy.pool.impl.QueuePool
# urllib3
# urllib3.connection
# urllib3.connectionpool
# urllib3.poolmanager
# urllib3.response
# urllib3.util
# urllib3.util.retry

###############################  Feedback Variables ###########################

##  Feedback can be sent to Service Now, Slack, or Rocketchat
##  - if you have a Rocketchat or Slack webhook URL, or a Service Now instance
##  Example:  THEQ_FEEDBACK=Slack, Service Now, RocketChat
THEQ_FEEDBACK=None
#SLACK_URL=<put Slack webhook URL here>
#ROCKET_CHAT_URL=<put Rocket Chat webhook URL here>

###############################  Service Now Variables  #######################

## These variables only valid if you have your own Service Now instance
#SERVICENOW_INSTANCE=<instance name>
#SERVICENOW_USER=<user id>
#SERVICENOW_PASSWORD=<password>
#SERVICENOW_TENANT=<optional, if a default setup>
#SERVICENOW_TABLE=<usually /table/incident, unless multi-tenant>
#SERVICENOW_ASSIGN_GROUP=<the group to be assigned tickets>

###############################  Snowplow Variables ###########################

##  Snowplow isn't available for offsite local development
##  - unless you have a Snowplow environment
THEQ_SNOWPLOW_CALLFLAG=False
#THEQ_SNOWPLOW_ENDPOINT=<your Snowplow endpoint URL>
#THEQ_SNOWPLOW_APPID=<your Snowplow application ID>
#THEQ_SNOWPLOW_NAMESPACE=<your Snowplow namespace>

###############################  Database Variables ###########################

##  Below is for Postgres, localhost
DATABASE_ENGINE=postgresql
DATABASE_USERNAME=demo
DATABASE_PASSWORD=demo
DATABASE_NAME=queue_management
DATABASE_HOST=127.0.0.1
DATABASE_PORT=5432

###############################  SQLAlchemy Variables #########################

##  Set as desired for your environment
SQLALCHEMY_POOL_SIZE=10
SQLALCHEMY_MAX_OVERFLOW=20
SQLALCHEMY_ECHO=False
