kind: Template
apiVersion: v1
metadata:
  name: queue-management-chained-build
  annotations:
    description: ""
    tags: queue-management,python
    iconClass: icon-python
labels:
  template: python
parameters:
  - name: S2I_NAMESPACE
    displayName: Namespace
    description: The OpenShift Namespace where the S2I ImageStream resides.
    value: openshift
  - name: SOURCE_REPOSITORY_URL
    displayName: Git Repository URL
    description: The URL of the repository with your application source code.
    value: https://github.com/bcgov/queue-management.git
  - name: SOURCE_REPOSITORY_REF
    displayName: Git Reference
    description: Set this to a branch name, tag or other ref of your repository if you are not using the default branch.
objects:
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      name: jenkin-config
    data:
      jenkin-config: |
        user_qtxn=<set to cfms-postman-operator>
        password_qtxn=<cfms-postman-operator userid password>
        userid_nonqtxn=<set to cfms-postman-non-operator>
        password_nonqtxn=<cfms-postman-non-operator userid password>
        client_secret=<keycloak client secret>
        zap_with_url=<zap command including dev url for analysis> 
        namespace=< project namespace>
        url=<url of api>/api/v1/
        auth_url=<Keycloak domain>
        clientid=<keycload Client ID>
        realm=<keycloak realm>
  - kind: ImageStream
    apiVersion: v1
    metadata:
      name: queue-management-api
      annotations:
        description: "Keeps track of changes in the application image"
      labels:
        app: queue-management-api
  - kind: ImageStream
    apiVersion: v1
    metadata:
      name: queue-management-frontend-build
      annotations:
        description: "Keeps track of changes in the application image"
      labels:
        app: queue-management-frontend-build
  - kind: ImageStream
    apiVersion: v1
    metadata:
      name: queue-management-frontend
      annotations:
        description: "Keeps track of changes in the application image"
      labels:
        app: queue-management-frontend
  - kind: BuildConfig
    apiVersion: v1
    metadata:
      name: queue-management-api
      labels:
        app: queue-management-api
    spec:
      triggers:
        - type: ImageChange
          imageChange: {}
        - type: ConfigChange
      runPolicy: Serial
      source:
        type: Git
        git:
          uri: "${SOURCE_REPOSITORY_URL}"
          ref: "${SOURCE_REPOSITORY_REF}"
        contextDir: api
      strategy:
        type: Source
        sourceStrategy:
          from:
            kind: ImageStreamTag
            namespace: openshift
            name: python:latest
      output:
        to:
          kind: ImageStreamTag
          name: queue-management-api:latest
      resources: {}
      postCommit: {}
      nodeSelector:
      successfulBuildsHistoryLimit: 10
      failedBuildsHistoryLimit: 10
    status:
      lastVersion: 0
  - kind: BuildConfig
    apiVersion: v1
    metadata:
      name: queue-management-npm-build
      labels:
        app: queue-management-npm-build
    spec:
      triggers:
        - type: ImageChange
          imageChange: {}
        - type: ConfigChange
      runPolicy: Serial
      source:
        type: Git
        git:
          uri: "${SOURCE_REPOSITORY_URL}"
          ref: "${SOURCE_REPOSITORY_REF}"
        contextDir: frontend
      strategy:
        type: Source
        sourceStrategy:
          env:
            - name: NODE_ENV
              value: development
          from:
            kind: ImageStreamTag
            namespace: openshift
            name: nodejs:10
      output:
        to:
          kind: ImageStreamTag
          name: queue-management-frontend-build:latest
      resources:
        limits:
          cpu: "1"
          memory: 4Gi
        requests:
          cpu: "1"
          memory: 4Gi
      postCommit: {}
      nodeSelector:
      successfulBuildsHistoryLimit: 10
      failedBuildsHistoryLimit: 10
  - kind: BuildConfig
    apiVersion: v1
    metadata:
      name: queue-management-frontend
      labels:
        app: queue-management-frontend
    spec:
      triggers:
        - type: ImageChange
          imageChange: {}
        - type: ConfigChange
      runPolicy: Serial
      source:
        type: Dockerfile
        dockerfile: "FROM bcgov-s2i-caddy\nCOPY dist /var/www/html/\nCOPY caddy/Caddyfile /etc/Caddyfile"
        images:
          - from:
              kind: ImageStreamTag
              name: queue-management-frontend-build:latest
            paths:
              - sourcePath: "/opt/app-root/src/dist"
                destinationDir: "./"
              - sourcePath: "/opt/app-root/src/caddy"
                destinationDir: "./"
      strategy:
        type: Docker
        dockerStrategy:
          from:
            kind: ImageStreamTag
            namespace: openshift
            name: bcgov-s2i-caddy:latest
      output:
        to:
          kind: ImageStreamTag
          name: queue-management-frontend:latest
      resources: {}
      postCommit: {}
      nodeSelector:
      successfulBuildsHistoryLimit: 10
      failedBuildsHistoryLimit: 10
  - kind: BuildConfig
    apiVersion: v1
    metadata:
      name: queue-management-pipeline
      labels:
        app: queue-management-pipeline
        name: queue-management-pipeline
    spec:
      runPolicy: Parallel
      source:
        type: Git
        git:
          uri: "${SOURCE_REPOSITORY_URL}"
          ref: "${SOURCE_REPOSITORY_REF}"
      strategy:
        type: JenkinsPipeline
        jenkinsPipelineStrategy:
          jenkinsfilePath: Jenkinsfile
      output: {}
      resources: {}
      postCommit: {}
      nodeSelector:
    status:
      lastVersion: 0
