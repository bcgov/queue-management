apiVersion: v1
kind: Template
labels:
  template: queue-management-api
metadata:
  name: queue-management-api
objects:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: lockdir
    spec:
      accessModes:
        - ReadWriteMany
      resources:
        limits:
          cpu: '1'
          memory: 600Mi
        requests:
          cpu: 400m
          memory: 400Mi
          storage: 128Mi
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: "Exposes and load balances the api pods"
      name: "${API_NAME}"
      labels:
        app: "${API_NAME}"
    spec:
      ports:
        - name: web
          port: 8080
          targetPort: 8080
      selector:
        app: "${API_NAME}"
  - apiVersion: v1
    kind: Route
    metadata:
      name: "${API_NAME}"
    spec:
      host: "${API_APPLICATION_DOMAIN}"
      path: /api
      to:
        kind: Service
        name: "${API_NAME}"
      tls:
        insecureEdgeTerminationPolicy: Redirect
        termination: edge
  - apiVersion: v1
    kind: Route
    metadata:
      name: "${API_NAME}-admin"
    spec:
      host: "${API_APPLICATION_DOMAIN}"
      path: /admin
      to:
        kind: Service
        name: "${API_NAME}"
      tls:
        insecureEdgeTerminationPolicy: Redirect
        termination: edge
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        description: "Defines how to deploy the application server"
        template.alpha.openshift.io/wait-for-ready: "true"
      name: "${API_NAME}"
    spec:
      replicas: 2
      selector:
        name: ${API_NAME}
      strategy:
        type: Rolling
        rollingParams:
          updatePeriodSeconds: 1
          intervalSeconds: 1
          timeoutSeconds: 120
          maxSurge: 2
          maxUnavailable: 1
        resources: {}
        activeDeadlineSeconds: 3600
      template:
        metadata:
          labels:
            app: "${API_NAME}"
            app-group: "${APP_GROUP}"
            name: "${API_NAME}"
        spec:
          containers:
            - name: "${API_NAME}"
              image: " "
              env:
                - name: DATABASE_ENGINE
                  value: "postgresql"
                - name: DATABASE_USERNAME
                  valueFrom:
                    secretKeyRef:
                      name: "patroni"
                      key: app-db-username
                - name: DATABASE_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: "patroni"
                      key: app-db-password
                - name: DATABASE_NAME
                  valueFrom:
                    secretKeyRef:
                      name: "patroni"
                      key: app-db-name
                - name: DATABASE_HOST
                  value: "patroni-master"
                - name: DATABASE_PORT
                  value: "5432"
                - name: DATABASE_LONG_RUNNING_QUERY
                  value: "${DATABASE_LONG_RUNNING_QUERY}"
                - name: SQLALCHEMY_POOL_PRE_PING
                  value: "true"
                - name: SQLALCHEMY_POOL_SIZE
                  value: "${SQLALCHEMY_POOL_SIZE}"
                - name: SQLALCHEMY_MAX_OVERFLOW
                  value: "${SQLALCHEMY_MAX_OVERFLOW}"
                - name: SQLALCHEMY_ECHO
                  value: "${SQLALCHEMY_ECHO}"
                - name: APP_CONFIG
                  value: gunicorn_config.py
                - name: FLASK_CONFIGURATION
                  value: "${FLASK_CONFIGURATION}"
                - name: APP_MODULE
                  value: wsgi
                - name: ACTIVE_MQ_TYPE
                  value: "redis"								  					  
                - name: ACTIVE_MQ_HOST
                  value: redis-theq
                - name: ACTIVE_MQ_PORT
                  value: '6379'
                - name: ACTIVE_MQ_USER
                  value: "${ACTIVE_MQ_USER}"				
                - name: ACTIVE_MQ_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: password
                      name: redis-theq-secret
                - name: SECRET_KEY
                  value: "${SECRET_KEY}"
                - name: SERVER_NAME
                  value: "${API_APPLICATION_DOMAIN}"
                - name: CACHE_DEFAULT_TIMEOUT
                  value: "${CACHE_DEFAULT_TIMEOUT}"
                - name: VIDEO_PATH
                  value: /opt/app-root/src/videos
                - name: MAIL_FROM_ID
                  value: "${MAIL_FROM_ID}"
                - name: EMAIL_APPOINTMENT_APP_URL
                  value: "${EMAIL_APPOINTMENT_APP_URL}"
                - name: CORS_ALLOWED_ORIGINS
                  value: "${CORS_ALLOWED_ORIGINS}"
                - name: BACK_OFFICE_DISPLAY
                  value: "${BACK_OFFICE_DISPLAY}"
                - name: THEQ_CLEAR_COMMENTS_FLAG
                  value: "${THEQ_CLEAR_COMMENTS_FLAG}"
                - name: THEQ_FEEDBACK
                  value: "${THEQ_FEEDBACK}"
                - name: RECURRING_FEATURE_FLAG
                  value: "true"
                - name: APPOINTMENT_LIMIT_DAYS
                  value: "${APPOINTMENT_LIMIT_DAYS}"
                - name: NOTIFICATIONS_EMAIL_ENDPOINT
                  value: "${NOTIFICATIONS_EMAIL_ENDPOINT}"
                - name: ROCKET_CHAT_URL
                  value: "${ROCKET_CHAT_URL}"
                - name: SERVICENOW_INSTANCE
                  value: "${SERVICENOW_INSTANCE}"
                - name: SERVICENOW_USER
                  value: "${SERVICENOW_USER}"
                - name: SERVICENOW_PASSWORD
                  value: "${SERVICENOW_PASSWORD}"
                - name: SERVICENOW_TENANT
                  value: "${SERVICENOW_TENANT}"
                - name: SERVICENOW_TABLE
                  value: "${SERVICENOW_TABLE}"
                - name: SERVICENOW_ASSIGN_GROUP
                  value: "${SERVICENOW_ASSIGN_GROUP}"                
                - name: MINIO_HOST
                  value: "${MINIO_HOST}"
                - name: MINIO_BUCKET
                  value: "${MINIO_BUCKET}"
                - name: MINIO_ACCESS_KEY
                  value: "${MINIO_ACCESS_KEY}"
                - name: MINIO_SECRET_KEY
                  value: "${MINIO_SECRET_KEY}" 
                - name: MINIO_USE_SECURE
                  value: "${MINIO_USE_SECURE}"
                - name: BCMP_BASE_URL
                  value: "${BCMP_BASE_URL}"
                - name: BCMP_AUTH_TOKEN
                  value: "${BCMP_AUTH_TOKEN}" 
                - name: THEQ_SNOWPLOW_ENDPOINT
                  value: "${THEQ_SNOWPLOW_ENDPOINT}"
                - name: THEQ_SNOWPLOW_APPID
                  value: "${THEQ_SNOWPLOW_APPID}"
                - name: THEQ_SNOWPLOW_NAMESPACE
                  value: "${THEQ_SNOWPLOW_NAMESPACE}"
                - name: THEQ_SNOWPLOW_CALLFLAG
                  value: "${THEQ_SNOWPLOW_CALLFLAG}"
                - name: THEQ_SNOWPLOW_ENV
                  value: ${THEQ_SNOWPLOW_ENV}
                - name: THEQ_SNOWPLOW_ROUTE
                  value: "${THEQ_SNOWPLOW_ROUTE}"
                - name: NOTIFICATIONS_ENDPOINT
                  value: "${NOTIFICATIONS_ENDPOINT}"
                - name: LOG_ENABLE
                  value: "${LOG_ENABLE}"
                - name: LOG_MYAPP_SQLTIME
                  value: INFO
                - name: PRINT_ENABLE
                  value: "false"
                - name: LOG_BASIC
                  value: WARNING
                - name: LOG_ROOT
                  value: WARNING
                - name: JWT_OIDC_WELL_KNOWN_CONFIG
                  value: "${JWT_OIDC_WELL_KNOWN_CONFIG}"
                - name: JWT_OIDC_AUDIENCE
                  value: "${JWT_OIDC_AUDIENCE}"
                - name: SOCKETIO_PING_TIMEOUT
                  value: "10"
                - name: SOCKETIO_PING_INTERVAL
                  value: "5"
                - name: SHOW_ESTIMATE_TIME_WALKIN
                  value: "${SHOW_ESTIMATE_TIME_WALKIN}"
                - name: APPOINTMENT_PORTAL_URL
                  value: "${SHOW_ESTIMATE_TIME_WALKIN}"                               
                - name: BCMP_USER
                  value: "${BCMP_USER}"
                - name: CHES_POST_EMAIL_ENDPOINT
                  value: "${CHES_POST_EMAIL_ENDPOINT}"
                - name: CHES_SSO_CLIENT_ID
                  value: "${CHES_SSO_CLIENT_ID}"
                - name: CHES_SSO_CLIENT_SECRET
                  value: "${CHES_SSO_CLIENT_SECRET}"
                - name: CHES_SSO_TOKEN_URL
                  value: "${CHES_SSO_TOKEN_URL}"
                - name: TEAMS_URL
                  value: "${TEAMS_URL}"

              ports:
                - containerPort: 8080
              readinessProbe:
                httpGet:
                  path: /api/v1/healthz/
                  port: 8080
                  scheme: HTTP
                initialDelaySeconds: 30
                timeoutSeconds: 5
                periodSeconds: 10
                successThreshold: 1
                failureThreshold: 3
              terminationMessagePath: /dev/termination-log
              name: queue-management-api
              livenessProbe:
                httpGet:
                  path: /api/v1/readyz/
                  port: 8080
                  scheme: HTTP
                initialDelaySeconds: 30
                timeoutSeconds: 5
                periodSeconds: 10
                successThreshold: 1
                failureThreshold: 3
              volumeMounts:
                - mountPath: /opt/app-root/src/lock
                  name: lockdir
                - mountPath: /opt/app-root/src/videos
                  name: frontend-videos
              terminationMessagePath: "/dev/termination-log"
              terminationMessagePolicy: File
              imagePullPolicy: Always
              resources:
                requests:
                  cpu: 400m
                  memory: 400Mi
                limits:
                  cpu: '1'
                  memory: 600Mi
          restartPolicy: Always
          terminationGracePeriodSeconds: 30
          dnsPolicy: ClusterFirst
          securityContext: {}
          schedulerName: default-scheduler
          volumes:
            - name: lockdir
              persistentVolumeClaim:
                claimName: lockdir
            - name: frontend-videos
              persistentVolumeClaim:
                claimName: frontend-videos
          affinity:
            podAntiAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                - labelSelector:
                    matchExpressions:
                      - key: name
                        operator: In
                        values:
                          - "${API_NAME}"
                  topologyKey: kubernetes.io/hostname
      triggers:
        - type: ConfigChange
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - "${API_NAME}"
            from:
              kind: ImageStreamTag
              namespace: "${TOOLS_WORKSPACE}"
              name: "${API_NAME}:${API_IMAGE_TAG}"
parameters:
  - name: API_NAME
    displayName: Name
    description: "Name of the flask application"
    required: true
    value: "queue-management-api"
  - name: API_APPLICATION_DOMAIN
    description: "The exposed hostname that will route to the Flask service"
    required: true
    value: ""
  - name: FLASK_CONFIGURATION
    description: "The configuration object that should be loaded for this deployment."
    required: true
  - name: SQLALCHEMY_ECHO
    description: ""
    required: true
    value: ""
  - name: API_IMAGE_TAG
    description: "The tag to use when deploying"
    required: true
    value: ""
  - name: TOOLS_WORKSPACE
    description: "IMAGE STREAM WORKSPACE LOCATION"
    required: true
    value: ""
  - name: SECRET_KEY
    description: "Key required for Flask"
    required: true
    generate: expression
    from: "[a-zA-Z0-9]{16}"
  - name: TEAMS_URL
    description: "Teams API URL"
    required: false
    value: ""
  - name: THEQ_CLEAR_COMMENTS_FLAG
    description: "Remove Comments in Database (True or False)"
    required: false
    value: "True"
  - name: THEQ_SNOWPLOW_CALLFLAG
    description: "Send events to Snowplow for Analytics (True or False)"
    required: true
    value: ""
  - name: THEQ_SNOWPLOW_ENDPOINT
    description: "Snowplow URL Endopoint"
    required: false
    value: ""
  - name: THEQ_SNOWPLOW_APPID
    description: "Snowplow Application ID"
    required: false
    value: ""
  - name: THEQ_SNOWPLOW_NAMESPACE
    description: "Snowplow Namespace"
    required: false
    value: ""
  - name: THEQ_SNOWPLOW_ENV
    description: "Snowplow Environment"
    required: false
    value: ""
  - name: THEQ_SNOWPLOW_ROUTE
    description: "Snowplow Route"
    required: false
    value: ""
  - name: LOG_ENABLE
    description: "Enable/Disable Logging of Socketio errors"
    required: false
    value: "false"
  - name: THEQ_FEEDBACK
    description: "Where feedback should go (eg. 'Teams, Service Now')"
    required: false
  - name: SERVICENOW_INSTANCE
    description: "The name of your organizations Service Now instance"
    required: false
  - name: SERVICENOW_USER
    description: "The login ID of a Service Now account to create incidents"
    required: false
  - name: SERVICENOW_PASSWORD
    description: "The password of the SERVICENOW_USER account"
    required: false
  - name: MAIL_FROM_ID
    description: "Mail from address to appear on emails"
    required: false
  - name: EMAIL_APPOINTMENT_APP_URL
    description: "Appointment Url to provide in email"
    required: true
  - name: CORS_ALLOWED_ORIGINS
    description: "Comma separated cors origin for the api."
    required: false
  - name: BACK_OFFICE_DISPLAY
    description: "Display Front line services in Back Office Dropdown"
    required: false
  - name: ROCKET_CHAT_URL
    description: "Send messages from feedback to Rocket Chat. The Rocketchat Webhook URL"
    required: false
  - name: NOTIFICATIONS_EMAIL_ENDPOINT
    description: "Notifications email send endpoint."
    required: true
  - name: CACHE_DEFAULT_TIMEOUT
    description: "Timeout for all caches."
    required: false
    value: "300"
  - name: MINIO_HOST
    description: "MINIO HOST"
    required: false
  - name: MINIO_BUCKET
    description: "MINIO BUCKET"
    required: false
  - name: MINIO_SECRET_KEY
    description: "MINIO SECRET KEY"
    required: false
  - name: MINIO_ACCESS_KEY
    description: "MINIO ACCESS KEY"
    required: false 
  - name: MINIO_USE_SECURE
    description: "Allow for https minio"
    required: false
    value: ""
  - name: BCMP_BASE_URL
    description: "BC MailPlus/Pesticide application API URL"
    required: false
    value: ""   
  - name: BCMP_AUTH_TOKEN
    description: "BC MailPlus/Pesticide application auth token"
    required: false
    value: ""
  - name: SERVICENOW_TENANT
    description: "Send messages through feedback via Servicenow api settings"
    required: false
    value: ""
  - name: SERVICENOW_TABLE
    description: "Send messages through feedback via Servicenow api settings"
    required: false
    value: ""
  - name: SERVICENOW_ASSIGN_GROUP
    description: "Send messages through feedback via Servicenow api settings"
    required: false
    value: ""
  - name: SQLALCHEMY_POOL_SIZE
    description: "SQL pool settings"
    required: false
    value: ""
  - name: SQLALCHEMY_MAX_OVERFLOW
    description: "SQL pool settings"
    required: false
    value: ""
  - name: DATABASE_LONG_RUNNING_QUERY
    description: "Enables displaying warning of long running queries over a time period in seconds"
    required: false
    value: ""
  - name: PRINT_ENABLE
    description: "Enables additional logging details in console"
    required: true
    value: ""
  - name: RECURRING_FEATURE_FLAG
    description: "Allows recurring blackout option in application"
    required: true
    value: ""
  - name: SQLALCHEMY_POOL_PRE_PING
    description: "SQL pool settings"
    required: true
    value: ""
  - name: APPOINTMENT_LIMIT_DAYS
    description: "the number of days in advance to book appointment "
    required: true
    value: ""
  - name: JWT_OIDC_WELL_KNOWN_CONFIG
    description: "Well known config URL for the keycloak realm "
    required: true
    value: ""
  - name: JWT_OIDC_AUDIENCE
    description: "OIDC Audience"
    required: true
    value: ""
  - name: NOTIFICATIONS_ENDPOINT
    description: "Notifications endpoint"
    required: true
    value: ""
  - name: SHOW_ESTIMATE_TIME_WALKIN
    description: ""
    required: true
    value: ""
  - name: APPOINTMENT_PORTAL_URL
    description: ""
    required: true
    value: ""
  - name: APP_GROUP
    description: "For EDB NSP identification"
    required: true
    value: "theq"
  - name: BCMP_USER
    description: ""
    required: true
    value: "env_exam"
  - name: ACTIVE_MQ_USER
    description: "redis default user"
    required: true
    value: ""
  - name: CHES_POST_EMAIL_ENDPOINT
    description: "email endpoint"
    required: true
    value: ""
  - name: CHES_SSO_CLIENT_ID
    description: "CHES client Id"
    required: true
    value: ""
  - name: CHES_SSO_CLIENT_SECRET
    description: "CHES client Secret"
    required: true
    value: ""
  - name: CHES_SSO_TOKEN_URL
    description: "CHES SSO token URL"
    required: true
    value: ""
