apiVersion: v1
kind: Template
labels:
  template: queue-management-api
metadata:
  name: queue-management-api
objects:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: lockdir
    spec:
      accessModes:
        - ReadWriteMany
      resources:
        requests:
          storage: 128Mi
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      name: oidc-secrets
      labels:
        app: "${API_NAME}"
    data:
      secrets.json: |
        {
          "web": {
            "realm_public_key": "",
            "issuer": "https://<keycloak server>/auth/realms/<realm>",
            "auth_uri": "https://<keycloak server>/auth/realms/<realm>/protocol/openid-connect/auth",
            "client_id": "",
            "client_secret": "",
            "redirect_urls": [
              ""  
            ],
            "userinfo_uri": "https://<keycloak server>/auth/realms/<realm>/protocol/openid-connect/userinfo",
            "token_uri": "https://<keycloak server>/auth/realms/<realm>/protocol/openid-connect/token",
            "token_introspection_uri": "https://<keycloak server>/auth/realms/<realm>/protocol/openid-connect/token/introspect"  
          }
        }
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: "Exposes and load balances the api pods"
      name: "${API_NAME}"
      labels:
        app: "${API_NAME}"
    spec:
      ports:
        - name: web
          port: 8080
          targetPort: 8080
      selector:
        app: "${API_NAME}"
  - apiVersion: v1
    kind: Route
    metadata:
      name: "${API_NAME}"
    spec:
      host: "${API_APPLICATION_DOMAIN}"
      path: /api
      to:
        kind: Service
        name: "${API_NAME}"
      tls:
        insecureEdgeTerminationPolicy: Redirect
        termination: edge
  - apiVersion: v1
    kind: Route
    metadata:
      name: "${API_NAME}-admin"
    spec:
      host: "${API_APPLICATION_DOMAIN}"
      path: /admin
      to:
        kind: Service
        name: "${API_NAME}"
      tls:
        insecureEdgeTerminationPolicy: Redirect
        termination: edge
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        description: "Defines how to deploy the application server"
        template.alpha.openshift.io/wait-for-ready: "true"
      name: "${API_NAME}"
    spec:
      replicas: 2
      selector:
        name: ${API_NAME}
      strategy:
        type: Rolling
        rollingParams:
          updatePeriodSeconds: 1
          intervalSeconds: 1
          timeoutSeconds: 60
          maxSurge: 2
          maxUnavailable: 1
        resources: {}
        activeDeadlineSeconds: 3600
      template:
        metadata:
          labels:
            app: "${API_NAME}"
            name: "${API_NAME}"
        spec:
          containers:
            - name: "${API_NAME}"
              image: " "
              env:
                - name: DATABASE_ENGINE
                  value: "mysql"
                - name: DATABASE_USERNAME
                  valueFrom:
                    secretKeyRef:
                      name: "percona-passwords"
                      key: mysql_user
                - name: DATABASE_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: "percona-passwords"
                      key: mysql_password
                - name: DATABASE_NAME
                  valueFrom:
                    secretKeyRef:
                      name: "percona-passwords"
                      key: mysql_database
                - name: DATABASE_HOST
                  value: "percona"
                - name: DATABASE_PORT
                  value: "3306"
                - name: SQLALCHEMY_ECHO
                  value: "${SQLALCHEMY_ECHO}"
                - name: APP_CONFIG
                  value: gunicorn_config.py
                - name: FLASK_CONFIGURATION
                  value: "${FLASK_CONFIGURATION}"
                - name: APP_MODULE
                  value: wsgi
                - name: ACTIVE_MQ_HOST
                  value: rabbitmq-cluster
                - name: ACTIVE_MQ_PORT
                  value: "5672"
                - name: SLACK_URL
                  value: "${SLACK_URL}"
                - name: THEQ_SNOWPLOW_ENDPOINT
                  value: "${THEQ_SNOWPLOW_ENDPOINT}"
                - name: THEQ_SNOWPLOW_APPID
                  value: "${THEQ_SNOWPLOW_APPID}"
                - name: THEQ_SNOWPLOW_NAMESPACE
                  value: "${THEQ_SNOWPLOW_NAMESPACE}"
                - name: THEQ_SNOWPLOW_CALLFLAG
                  value: "${THEQ_SNOWPLOW_CALLFLAG}"
                - name: THEQ_CLEAR_COMMENTS_FLAG
                  value: "${THEQ_CLEAR_COMMENTS_FLAG}"
                - name: SECRET_KEY
                  value: "${SECRET_KEY}"
                - name: SERVER_NAME
                  value: "${API_APPLICATION_DOMAIN}"
                - name: LOG_ERRORS
                  value: "${LOG_ERRORS}"
                - name: THEQ_FEEDBACK
                  value: "${THEQ_FEEDBACK}"
                - name: SERVICENOW_INSTANCE
                  value: "${SERVICENOW_INSTANCE}"
                - name: SERVICENOW_USER
                  value: "${SERVICENOW_USER}"
                - name: SERVICENOW_PASSWORD
                  value: "${SERVICENOW_PASSWORD}"

              ports:
                - containerPort: 8080
              readinessProbe:
                failureThreshold: 3
                initialDelaySeconds: 3
                periodSeconds: 10
                successThreshold: 1
                tcpSocket:
                  port: 8080
                timeoutSeconds: 3
              livenessProbe:
                failureThreshold: 3
                initialDelaySeconds: 3
                periodSeconds: 10
                successThreshold: 1
                tcpSocket:
                  port: 8080
                timeoutSeconds: 3
              volumeMounts:
                - mountPath: /opt/app-root/src/client_secrets
                  name: oidc-secrets-o6ya6
                  readOnly: true
                - mountPath: /opt/app-root/src/lock
                  name: lockdir
              terminationMessagePath: "/dev/termination-log"
              terminationMessagePolicy: File
              imagePullPolicy: Always
              resources:
                requests:
                  cpu: 200m
                  memory: 256Mi
                limits:
                  cpu: 500m
                  memory: 512Mi
          restartPolicy: Always
          terminationGracePeriodSeconds: 30
          dnsPolicy: ClusterFirst
          securityContext: {}
          schedulerName: default-scheduler
          volumes:
            - configMap:
                defaultMode: 420
                name: oidc-secrets
              name: oidc-secrets-o6ya6
            - name: lockdir
              persistentVolumeClaim:
                claimName: lockdir
          affinity:
            podAntiAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                - labelSelector:
                    matchExpressions:
                      - key: name
                        operator: In
                        values:
                          - "${API_NAME}"
                  topologyKey: kubernetes.io/hostname
      triggers:
        - type: ConfigChange
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - "${API_NAME}"
            from:
              kind: ImageStreamTag
              namespace: "${TOOLS_WORKSPACE}"
              name: "${API_NAME}:${API_IMAGE_TAG}"
parameters:
  - name: API_NAME
    displayName: Name
    description: "Name of the flask application"
    required: true
    value: "queue-management-api"
  - name: API_APPLICATION_DOMAIN
    description: "The exposed hostname that will route to the Flask service"
    required: true
    value: ""
  - name: FLASK_CONFIGURATION
    description: "The configuration object that should be loaded for this deployment."
    required: true
    value: development
  - name: SQLALCHEMY_ECHO
    description: ""
    required: true
    value: "False"
  - name: API_IMAGE_TAG
    description: "The tag to use when deploying"
    required: true
    value: "dev"
  - name: TOOLS_WORKSPACE
    description: "IMAGE STREAM WORKSPACE LOCATION"
    required: true
    value: ""
  - name: SECRET_KEY
    description: "Key required for Flask"
    required: true
    generate: expression
    from: "[a-zA-Z0-9]{16}"
  - name: SLACK_URL
    description: "Slack API URL"
    required: false
    value: ""
  - name: THEQ_CLEAR_COMMENTS_FLAG
    description: "Remove Comments in Database (True or False)"
    required: false
    value: "True"
  - name: THEQ_SNOWPLOW_CALLFLAG
    description: "Send events to Snowplow for Analytics (True or False)"
    required: true
    value: "False"
  - name: THEQ_SNOWPLOW_ENDPOINT
    description: "Snowplow URL Endopoint"
    required: false
    value: ""
  - name: THEQ_SNOWPLOW_APPID
    description: "Snowplow Application ID"
    required: false
    value: ""
  - name: THEQ_SNOWPLOW_NAMESPACE
    description: "Snowplow Namespace"
    required: false
    value: ""
  - name: LOG_ERRORS
    description: "Enable/Disable Logging of Socketio errors"
    required: false
    value: ""
  - name: THEQ_FEEDBACK
    description: "Where feedback should go (eg. 'Slack, Service Now')"
    required: false
  - name: SERVICENOW_INSTANCE
    description: "The name of your organizations Service Now instance"
    required: false
  - name: SERVICENOW_USER
    description: "The login ID of a Service Now account to create incidents"
    required: false
  - name: SERVICENOW_PASSWORD
    description: "The password of the SERVICENOW_USER account"
    required: false
